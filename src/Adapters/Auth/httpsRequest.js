const https = require('https');
const util = require('util');
const requestPromise = util.promisify(require('request'));
function makeCallback(resolve, reject, noJSON) {
  return function (res) {
    let data = '';
    res.on('data', chunk => {
      data += chunk;
    });
    res.on('end', () => {
      if (noJSON) {
        return resolve(data);
      }
      try {
        data = JSON.parse(data);
      } catch (e) {
        return reject(e);
      }
      resolve(data);
    });
    res.on('error', reject);
  };
}
function get(options, noJSON = false) {
  return new Promise((resolve, reject) => {
    https.get(options, makeCallback(resolve, reject, noJSON)).on('error', reject);
  });
}
function request(options, postData) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, makeCallback(resolve, reject));
    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}
async function getAccessToken(options) {
  try {
    const response = await requestPromise(options);
    let accessTokenData = response.body;
    try {
      accessTokenData = jsonAndQueryStringParse(accessTokenData);
    } catch (error) {
      return error;
    }
    return accessTokenData;
  } catch (error) {
    return error;
  }
}
function parseQueryString(queryString) {
  if (!queryString || typeof queryString !== 'string') return queryString;
  const params = {};
  const pairs = queryString.split('&');
  pairs.forEach(pair => {
    const [key, value] = pair.split('=');
    params[key] = value;
  });
  return params;
}
function jsonAndQueryStringParse(str = '') {
  try {
    return JSON.parse(str);
  } catch (error) {
    return parseQueryString(str);
  }
}
module.exports = {
  get,
  request,
  getAccessToken,
  jsonAndQueryStringParse
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwcyIsInJlcXVpcmUiLCJ1dGlsIiwicmVxdWVzdFByb21pc2UiLCJwcm9taXNpZnkiLCJtYWtlQ2FsbGJhY2siLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9KU09OIiwicmVzIiwiZGF0YSIsIm9uIiwiY2h1bmsiLCJKU09OIiwicGFyc2UiLCJlIiwiZ2V0Iiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXF1ZXN0IiwicG9zdERhdGEiLCJyZXEiLCJ3cml0ZSIsImVuZCIsImdldEFjY2Vzc1Rva2VuIiwicmVzcG9uc2UiLCJhY2Nlc3NUb2tlbkRhdGEiLCJib2R5IiwianNvbkFuZFF1ZXJ5U3RyaW5nUGFyc2UiLCJlcnJvciIsInBhcnNlUXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZyIsInBhcmFtcyIsInBhaXJzIiwic3BsaXQiLCJmb3JFYWNoIiwicGFpciIsImtleSIsInZhbHVlIiwic3RyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2h0dHBzUmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCByZXF1ZXN0UHJvbWlzZSA9IHV0aWwucHJvbWlzaWZ5KHJlcXVpcmUoJ3JlcXVlc3QnKSk7XG5mdW5jdGlvbiBtYWtlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBub0pTT04pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXMpIHtcbiAgICBsZXQgZGF0YSA9ICcnO1xuICAgIHJlcy5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICAgIGRhdGEgKz0gY2h1bms7XG4gICAgfSk7XG4gICAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICBpZiAobm9KU09OKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGRhdGEpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZSk7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH0pO1xuICAgIHJlcy5vbignZXJyb3InLCByZWplY3QpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXQob3B0aW9ucywgbm9KU09OID0gZmFsc2UpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBodHRwcy5nZXQob3B0aW9ucywgbWFrZUNhbGxiYWNrKHJlc29sdmUsIHJlamVjdCwgbm9KU09OKSkub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3Qob3B0aW9ucywgcG9zdERhdGEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZXEgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMsIG1ha2VDYWxsYmFjayhyZXNvbHZlLCByZWplY3QpKTtcbiAgICByZXEub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICByZXEud3JpdGUocG9zdERhdGEpO1xuICAgIHJlcS5lbmQoKTtcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbihvcHRpb25zKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0UHJvbWlzZShvcHRpb25zKTtcbiAgICBsZXQgYWNjZXNzVG9rZW5EYXRhID0gcmVzcG9uc2UuYm9keTtcbiAgICB0cnkge1xuICAgICAgYWNjZXNzVG9rZW5EYXRhID0ganNvbkFuZFF1ZXJ5U3RyaW5nUGFyc2UoYWNjZXNzVG9rZW5EYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gYWNjZXNzVG9rZW5EYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykge1xuICBpZiAoIXF1ZXJ5U3RyaW5nIHx8IHR5cGVvZiBxdWVyeVN0cmluZyAhPT0gJ3N0cmluZycpIHJldHVybiBxdWVyeVN0cmluZztcbiAgY29uc3QgcGFyYW1zID0ge307XG4gIGNvbnN0IHBhaXJzID0gcXVlcnlTdHJpbmcuc3BsaXQoJyYnKTtcblxuICBwYWlycy5mb3JFYWNoKHBhaXIgPT4ge1xuICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHBhaXIuc3BsaXQoJz0nKTtcbiAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBqc29uQW5kUXVlcnlTdHJpbmdQYXJzZShzdHIgPSAnJykge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHBhcnNlUXVlcnlTdHJpbmcoc3RyKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7IGdldCwgcmVxdWVzdCwgZ2V0QWNjZXNzVG9rZW4sIGpzb25BbmRRdWVyeVN0cmluZ1BhcnNlIH07XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUU1QixNQUFNRSxjQUFjLEdBQUdELElBQUksQ0FBQ0UsU0FBUyxDQUFDSCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDekQsU0FBU0ksWUFBWUEsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtFQUM3QyxPQUFPLFVBQVVDLEdBQUcsRUFBRTtJQUNwQixJQUFJQyxJQUFJLEdBQUcsRUFBRTtJQUNiRCxHQUFHLENBQUNFLEVBQUUsQ0FBQyxNQUFNLEVBQUVDLEtBQUssSUFBSTtNQUN0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