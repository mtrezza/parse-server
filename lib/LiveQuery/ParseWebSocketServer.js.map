{"version":3,"sources":["../../src/LiveQuery/ParseWebSocketServer.js"],"names":["ParseWebSocketServer","constructor","server","onConnect","config","wss","wssAdapter","WSAdapter","onListen","logger","info","onConnection","ws","on","error","message","JSON","stringify","ParseWebSocket","pingIntervalId","setInterval","readyState","OPEN","ping","clearInterval","websocketTimeout","onError","start","close","events","EventEmitter","onmessage","request","emit","data","onclose","send"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,oBAAN,CAA2B;AAGhCC,EAAAA,WAAW,CAACC,MAAD,EAAcC,SAAd,EAAmCC,MAAnC,EAA2C;AACpDA,IAAAA,MAAM,CAACF,MAAP,GAAgBA,MAAhB;AACA,UAAMG,GAAG,GAAG,gCAAYD,MAAM,CAACE,UAAnB,EAA+BC,oBAA/B,EAA0CH,MAA1C,CAAZ;;AACAC,IAAAA,GAAG,CAACG,QAAJ,GAAe,MAAM;AACnBC,sBAAOC,IAAP,CAAY,uCAAZ;AACD,KAFD;;AAGAL,IAAAA,GAAG,CAACM,YAAJ,GAAmBC,EAAE,IAAI;AACvBA,MAAAA,EAAE,CAACC,EAAH,CAAM,OAAN,EAAeC,KAAK,IAAI;AACtBL,wBAAOK,KAAP,CAAaA,KAAK,CAACC,OAAnB;;AACAN,wBAAOK,KAAP,CAAaE,IAAI,CAACC,SAAL,CAAeL,EAAf,CAAb;AACD,OAHD;AAIAT,MAAAA,SAAS,CAAC,IAAIe,cAAJ,CAAmBN,EAAnB,CAAD,CAAT,CALuB,CAMvB;;AACA,YAAMO,cAAc,GAAGC,WAAW,CAAC,MAAM;AACvC,YAAIR,EAAE,CAACS,UAAH,IAAiBT,EAAE,CAACU,IAAxB,EAA8B;AAC5BV,UAAAA,EAAE,CAACW,IAAH;AACD,SAFD,MAEO;AACLC,UAAAA,aAAa,CAACL,cAAD,CAAb;AACD;AACF,OANiC,EAM/Bf,MAAM,CAACqB,gBAAP,IAA2B,KAAK,IAND,CAAlC;AAOD,KAdD;;AAeApB,IAAAA,GAAG,CAACqB,OAAJ,GAAcZ,KAAK,IAAI;AACrBL,sBAAOK,KAAP,CAAaA,KAAb;AACD,KAFD;;AAGAT,IAAAA,GAAG,CAACsB,KAAJ;AACA,SAAKzB,MAAL,GAAcG,GAAd;AACD;;AAEDuB,EAAAA,KAAK,GAAG;AACN,QAAI,KAAK1B,MAAL,IAAe,KAAKA,MAAL,CAAY0B,KAA/B,EAAsC;AACpC,WAAK1B,MAAL,CAAY0B,KAAZ;AACD;AACF;;AAnC+B;;;;AAsC3B,MAAMV,cAAN,SAA6BW,gBAAOC,YAApC,CAAiD;AAGtD7B,EAAAA,WAAW,CAACW,EAAD,EAAU;AACnB;;AACAA,IAAAA,EAAE,CAACmB,SAAH,GAAeC,OAAO,IACpB,KAAKC,IAAL,CAAU,SAAV,EAAqBD,OAAO,IAAIA,OAAO,CAACE,IAAnB,GAA0BF,OAAO,CAACE,IAAlC,GAAyCF,OAA9D,CADF;;AAEApB,IAAAA,EAAE,CAACuB,OAAH,GAAa,MAAM,KAAKF,IAAL,CAAU,YAAV,CAAnB;;AACA,SAAKrB,EAAL,GAAUA,EAAV;AACD;;AAEDwB,EAAAA,IAAI,CAACrB,OAAD,EAAqB;AACvB,SAAKH,EAAL,CAAQwB,IAAR,CAAarB,OAAb;AACD;;AAbqD","sourcesContent":["import { loadAdapter } from '../Adapters/AdapterLoader';\nimport { WSAdapter } from '../Adapters/WebSocketServer/WSAdapter';\nimport logger from '../logger';\nimport events from 'events';\n\nexport class ParseWebSocketServer {\n  server: Object;\n\n  constructor(server: any, onConnect: Function, config) {\n    config.server = server;\n    const wss = loadAdapter(config.wssAdapter, WSAdapter, config);\n    wss.onListen = () => {\n      logger.info('Parse LiveQuery Server starts running');\n    };\n    wss.onConnection = ws => {\n      ws.on('error', error => {\n        logger.error(error.message);\n        logger.error(JSON.stringify(ws));\n      });\n      onConnect(new ParseWebSocket(ws));\n      // Send ping to client periodically\n      const pingIntervalId = setInterval(() => {\n        if (ws.readyState == ws.OPEN) {\n          ws.ping();\n        } else {\n          clearInterval(pingIntervalId);\n        }\n      }, config.websocketTimeout || 10 * 1000);\n    };\n    wss.onError = error => {\n      logger.error(error);\n    };\n    wss.start();\n    this.server = wss;\n  }\n\n  close() {\n    if (this.server && this.server.close) {\n      this.server.close();\n    }\n  }\n}\n\nexport class ParseWebSocket extends events.EventEmitter {\n  ws: any;\n\n  constructor(ws: any) {\n    super();\n    ws.onmessage = request =>\n      this.emit('message', request && request.data ? request.data : request);\n    ws.onclose = () => this.emit('disconnect');\n    this.ws = ws;\n  }\n\n  send(message: any): void {\n    this.ws.send(message);\n  }\n}\n"],"file":"ParseWebSocketServer.js"}