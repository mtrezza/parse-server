{"version":3,"sources":["../../src/LiveQuery/ParseCloudCodePublisher.js"],"names":["ParseCloudCodePublisher","constructor","config","parsePublisher","ParsePubSub","createPublisher","onCloudCodeAfterSave","request","_onCloudCodeMessage","Parse","applicationId","onCloudCodeAfterDelete","type","logger","verbose","object","original","message","currentParseObject","_toFullJSON","originalParseObject","publish","JSON","stringify"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,uBAAN,CAA8B;AAG5B;AACA;AACAC,EAAAA,WAAW,CAACC,MAAW,GAAG,EAAf,EAAmB;AAC5B,SAAKC,cAAL,GAAsBC,yBAAYC,eAAZ,CAA4BH,MAA5B,CAAtB;AACD;;AAEDI,EAAAA,oBAAoB,CAACC,OAAD,EAAqB;AACvC,SAAKC,mBAAL,CAAyBC,cAAMC,aAAN,GAAsB,WAA/C,EAA4DH,OAA5D;AACD;;AAEDI,EAAAA,sBAAsB,CAACJ,OAAD,EAAqB;AACzC,SAAKC,mBAAL,CAAyBC,cAAMC,aAAN,GAAsB,aAA/C,EAA8DH,OAA9D;AACD,GAf2B,CAiB5B;;;AACAC,EAAAA,mBAAmB,CAACI,IAAD,EAAeL,OAAf,EAAmC;AACpDM,oBAAOC,OAAP,CACE,0DADF,EAEEP,OAAO,CAACQ,MAFV,EAGER,OAAO,CAACS,QAHV,EADoD,CAMpD;;;AACA,UAAMC,OAAO,GAAG;AACdC,MAAAA,kBAAkB,EAAEX,OAAO,CAACQ,MAAR,CAAeI,WAAf;AADN,KAAhB;;AAGA,QAAIZ,OAAO,CAACS,QAAZ,EAAsB;AACpBC,MAAAA,OAAO,CAACG,mBAAR,GAA8Bb,OAAO,CAACS,QAAR,CAAiBG,WAAjB,EAA9B;AACD;;AACD,SAAKhB,cAAL,CAAoBkB,OAApB,CAA4BT,IAA5B,EAAkCU,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAlC;AACD;;AAhC2B","sourcesContent":["import { ParsePubSub } from './ParsePubSub';\nimport Parse from 'parse/node';\nimport logger from '../logger';\n\nclass ParseCloudCodePublisher {\n  parsePublisher: Object;\n\n  // config object of the publisher, right now it only contains the redisURL,\n  // but we may extend it later.\n  constructor(config: any = {}) {\n    this.parsePublisher = ParsePubSub.createPublisher(config);\n  }\n\n  onCloudCodeAfterSave(request: any): void {\n    this._onCloudCodeMessage(Parse.applicationId + 'afterSave', request);\n  }\n\n  onCloudCodeAfterDelete(request: any): void {\n    this._onCloudCodeMessage(Parse.applicationId + 'afterDelete', request);\n  }\n\n  // Request is the request object from cloud code functions. request.object is a ParseObject.\n  _onCloudCodeMessage(type: string, request: any): void {\n    logger.verbose(\n      'Raw request from cloud code current : %j | original : %j',\n      request.object,\n      request.original\n    );\n    // We need the full JSON which includes className\n    const message = {\n      currentParseObject: request.object._toFullJSON(),\n    };\n    if (request.original) {\n      message.originalParseObject = request.original._toFullJSON();\n    }\n    this.parsePublisher.publish(type, JSON.stringify(message));\n  }\n}\n\nexport { ParseCloudCodePublisher };\n"],"file":"ParseCloudCodePublisher.js"}