{"version":3,"sources":["../../src/GraphQL/ParseGraphQLSchema.js"],"names":["RESERVED_GRAPHQL_TYPE_NAMES","RESERVED_GRAPHQL_QUERY_NAMES","RESERVED_GRAPHQL_MUTATION_NAMES","ParseGraphQLSchema","constructor","params","parseGraphQLController","databaseController","log","graphQLCustomTypeDefs","appId","load","parseGraphQLConfig","_initializeSchemaAndConfig","parseClasses","_getClassesForSchema","parseClassesString","JSON","stringify","functionNames","_getFunctionNames","functionNamesString","graphQLSchema","_hasSchemaInputChanged","parseClassTypes","viewerType","graphQLAutoSchema","graphQLTypes","graphQLQueries","graphQLMutations","graphQLSubscriptions","graphQLSchemaDirectivesDefinitions","graphQLSchemaDirectives","relayNodeInterface","defaultGraphQLTypes","defaultRelaySchema","schemaTypes","_getParseClassesWithConfig","forEach","parseClass","parseClassConfig","parseClassQueries","parseClassMutations","loadArrayResult","defaultGraphQLQueries","defaultGraphQLMutations","graphQLQuery","undefined","Object","keys","length","GraphQLObjectType","name","description","fields","addGraphQLType","graphQLMutation","graphQLSubscription","GraphQLSchema","types","query","mutation","subscription","schemaDirectives","getTypeMap","customGraphQLSchemaTypeMap","findAndReplaceLastType","parent","key","getType","ofType","values","customGraphQLSchemaType","startsWith","autoGraphQLSchemaType","_typeMap","getFields","field","_fields","schemas","mergeDirectives","directivesDefinitionsSchema","autoSchema","stitchSchemas","graphQLSchemaTypeMap","graphQLSchemaTypeName","graphQLSchemaType","definitions","graphQLCustomTypeDef","find","definition","value","graphQLSchemaTypeFieldMap","graphQLSchemaTypeFieldName","graphQLSchemaTypeField","astNode","SchemaDirectiveVisitor","visitSchemaDirectives","type","throwError","ignoreReserved","ignoreConnection","includes","existingType","endsWith","message","Error","warn","push","addGraphQLQuery","fieldName","addGraphQLMutation","handleError","error","Parse","stack","schemaController","Promise","all","loadSchema","getGraphQLConfig","enabledForClasses","disabledForClasses","allClasses","getAllClasses","Array","isArray","includedClasses","filter","clazz","className","isUsersClassDisabled","some","classConfigs","sortClasses","a","b","sort","map","c","functionName","test"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\nimport { GraphQLSchema, GraphQLObjectType, DocumentNode, GraphQLNamedType } from 'graphql';\nimport { stitchSchemas } from '@graphql-tools/stitch';\nimport { SchemaDirectiveVisitor } from '@graphql-tools/utils';\nimport requiredParameter from '../requiredParameter';\nimport * as defaultGraphQLTypes from './loaders/defaultGraphQLTypes';\nimport * as parseClassTypes from './loaders/parseClassTypes';\nimport * as parseClassQueries from './loaders/parseClassQueries';\nimport * as parseClassMutations from './loaders/parseClassMutations';\nimport * as defaultGraphQLQueries from './loaders/defaultGraphQLQueries';\nimport * as defaultGraphQLMutations from './loaders/defaultGraphQLMutations';\nimport ParseGraphQLController, { ParseGraphQLConfig } from '../Controllers/ParseGraphQLController';\nimport DatabaseController from '../Controllers/DatabaseController';\nimport { toGraphQLError } from './parseGraphQLUtils';\nimport * as schemaDirectives from './loaders/schemaDirectives';\nimport * as schemaTypes from './loaders/schemaTypes';\nimport { getFunctionNames } from '../triggers';\nimport * as defaultRelaySchema from './loaders/defaultRelaySchema';\n\nconst RESERVED_GRAPHQL_TYPE_NAMES = [\n  'String',\n  'Boolean',\n  'Int',\n  'Float',\n  'ID',\n  'ArrayResult',\n  'Query',\n  'Mutation',\n  'Subscription',\n  'CreateFileInput',\n  'CreateFilePayload',\n  'Viewer',\n  'SignUpInput',\n  'SignUpPayload',\n  'LogInInput',\n  'LogInPayload',\n  'LogOutInput',\n  'LogOutPayload',\n  'CloudCodeFunction',\n  'CallCloudCodeInput',\n  'CallCloudCodePayload',\n  'CreateClassInput',\n  'CreateClassPayload',\n  'UpdateClassInput',\n  'UpdateClassPayload',\n  'DeleteClassInput',\n  'DeleteClassPayload',\n  'PageInfo',\n];\nconst RESERVED_GRAPHQL_QUERY_NAMES = ['health', 'viewer', 'class', 'classes'];\nconst RESERVED_GRAPHQL_MUTATION_NAMES = [\n  'signUp',\n  'logIn',\n  'logOut',\n  'createFile',\n  'callCloudCode',\n  'createClass',\n  'updateClass',\n  'deleteClass',\n];\n\nclass ParseGraphQLSchema {\n  databaseController: DatabaseController;\n  parseGraphQLController: ParseGraphQLController;\n  parseGraphQLConfig: ParseGraphQLConfig;\n  log: any;\n  appId: string;\n  graphQLCustomTypeDefs: ?(string | GraphQLSchema | DocumentNode | GraphQLNamedType[]);\n\n  constructor(\n    params: {\n      databaseController: DatabaseController,\n      parseGraphQLController: ParseGraphQLController,\n      log: any,\n      appId: string,\n      graphQLCustomTypeDefs: ?(string | GraphQLSchema | DocumentNode | GraphQLNamedType[]),\n    } = {}\n  ) {\n    this.parseGraphQLController =\n      params.parseGraphQLController ||\n      requiredParameter('You must provide a parseGraphQLController instance!');\n    this.databaseController =\n      params.databaseController ||\n      requiredParameter('You must provide a databaseController instance!');\n    this.log = params.log || requiredParameter('You must provide a log instance!');\n    this.graphQLCustomTypeDefs = params.graphQLCustomTypeDefs;\n    this.appId = params.appId || requiredParameter('You must provide the appId!');\n  }\n\n  async load() {\n    const { parseGraphQLConfig } = await this._initializeSchemaAndConfig();\n    const parseClasses = await this._getClassesForSchema(parseGraphQLConfig);\n    const parseClassesString = JSON.stringify(parseClasses);\n    const functionNames = await this._getFunctionNames();\n    const functionNamesString = JSON.stringify(functionNames);\n\n    if (\n      this.graphQLSchema &&\n      !this._hasSchemaInputChanged({\n        parseClasses,\n        parseClassesString,\n        parseGraphQLConfig,\n        functionNamesString,\n      })\n    ) {\n      return this.graphQLSchema;\n    }\n\n    this.parseClasses = parseClasses;\n    this.parseClassesString = parseClassesString;\n    this.parseGraphQLConfig = parseGraphQLConfig;\n    this.functionNames = functionNames;\n    this.functionNamesString = functionNamesString;\n    this.parseClassTypes = {};\n    this.viewerType = null;\n    this.graphQLAutoSchema = null;\n    this.graphQLSchema = null;\n    this.graphQLTypes = [];\n    this.graphQLQueries = {};\n    this.graphQLMutations = {};\n    this.graphQLSubscriptions = {};\n    this.graphQLSchemaDirectivesDefinitions = null;\n    this.graphQLSchemaDirectives = {};\n    this.relayNodeInterface = null;\n\n    defaultGraphQLTypes.load(this);\n    defaultRelaySchema.load(this);\n    schemaTypes.load(this);\n\n    this._getParseClassesWithConfig(parseClasses, parseGraphQLConfig).forEach(\n      ([parseClass, parseClassConfig]) => {\n        parseClassTypes.load(this, parseClass, parseClassConfig);\n        parseClassQueries.load(this, parseClass, parseClassConfig);\n        parseClassMutations.load(this, parseClass, parseClassConfig);\n      }\n    );\n\n    defaultGraphQLTypes.loadArrayResult(this, parseClasses);\n    defaultGraphQLQueries.load(this);\n    defaultGraphQLMutations.load(this);\n\n    let graphQLQuery = undefined;\n    if (Object.keys(this.graphQLQueries).length > 0) {\n      graphQLQuery = new GraphQLObjectType({\n        name: 'Query',\n        description: 'Query is the top level type for queries.',\n        fields: this.graphQLQueries,\n      });\n      this.addGraphQLType(graphQLQuery, true, true);\n    }\n\n    let graphQLMutation = undefined;\n    if (Object.keys(this.graphQLMutations).length > 0) {\n      graphQLMutation = new GraphQLObjectType({\n        name: 'Mutation',\n        description: 'Mutation is the top level type for mutations.',\n        fields: this.graphQLMutations,\n      });\n      this.addGraphQLType(graphQLMutation, true, true);\n    }\n\n    let graphQLSubscription = undefined;\n    if (Object.keys(this.graphQLSubscriptions).length > 0) {\n      graphQLSubscription = new GraphQLObjectType({\n        name: 'Subscription',\n        description: 'Subscription is the top level type for subscriptions.',\n        fields: this.graphQLSubscriptions,\n      });\n      this.addGraphQLType(graphQLSubscription, true, true);\n    }\n\n    this.graphQLAutoSchema = new GraphQLSchema({\n      types: this.graphQLTypes,\n      query: graphQLQuery,\n      mutation: graphQLMutation,\n      subscription: graphQLSubscription,\n    });\n\n    if (this.graphQLCustomTypeDefs) {\n      schemaDirectives.load(this);\n\n      if (typeof this.graphQLCustomTypeDefs.getTypeMap === 'function') {\n        const customGraphQLSchemaTypeMap = this.graphQLCustomTypeDefs.getTypeMap();\n        const findAndReplaceLastType = (parent, key) => {\n          if (parent[key].name) {\n            if (\n              this.graphQLAutoSchema.getType(parent[key].name) &&\n              this.graphQLAutoSchema.getType(parent[key].name) !== parent[key]\n            ) {\n              // To avoid unresolved field on overloaded schema\n              // replace the final type with the auto schema one\n              parent[key] = this.graphQLAutoSchema.getType(parent[key].name);\n            }\n          } else {\n            if (parent[key].ofType) {\n              findAndReplaceLastType(parent[key], 'ofType');\n            }\n          }\n        };\n        Object.values(customGraphQLSchemaTypeMap).forEach(customGraphQLSchemaType => {\n          if (\n            !customGraphQLSchemaType ||\n            !customGraphQLSchemaType.name ||\n            customGraphQLSchemaType.name.startsWith('__')\n          ) {\n            return;\n          }\n          const autoGraphQLSchemaType = this.graphQLAutoSchema.getType(\n            customGraphQLSchemaType.name\n          );\n          if (!autoGraphQLSchemaType) {\n            this.graphQLAutoSchema._typeMap[customGraphQLSchemaType.name] = customGraphQLSchemaType;\n          }\n        });\n        Object.values(customGraphQLSchemaTypeMap).forEach(customGraphQLSchemaType => {\n          if (\n            !customGraphQLSchemaType ||\n            !customGraphQLSchemaType.name ||\n            customGraphQLSchemaType.name.startsWith('__')\n          ) {\n            return;\n          }\n          const autoGraphQLSchemaType = this.graphQLAutoSchema.getType(\n            customGraphQLSchemaType.name\n          );\n\n          if (autoGraphQLSchemaType && typeof customGraphQLSchemaType.getFields === 'function') {\n            Object.values(customGraphQLSchemaType.getFields()).forEach(field => {\n              findAndReplaceLastType(field, 'type');\n            });\n            autoGraphQLSchemaType._fields = {\n              ...autoGraphQLSchemaType.getFields(),\n              ...customGraphQLSchemaType.getFields(),\n            };\n          }\n        });\n        this.graphQLSchema = stitchSchemas({\n          schemas: [this.graphQLSchemaDirectivesDefinitions, this.graphQLAutoSchema],\n          mergeDirectives: true,\n        });\n      } else if (typeof this.graphQLCustomTypeDefs === 'function') {\n        this.graphQLSchema = await this.graphQLCustomTypeDefs({\n          directivesDefinitionsSchema: this.graphQLSchemaDirectivesDefinitions,\n          autoSchema: this.graphQLAutoSchema,\n          stitchSchemas,\n        });\n      } else {\n        this.graphQLSchema = stitchSchemas({\n          schemas: [\n            this.graphQLSchemaDirectivesDefinitions,\n            this.graphQLAutoSchema,\n            this.graphQLCustomTypeDefs,\n          ],\n          mergeDirectives: true,\n        });\n      }\n\n      const graphQLSchemaTypeMap = this.graphQLSchema.getTypeMap();\n      Object.keys(graphQLSchemaTypeMap).forEach(graphQLSchemaTypeName => {\n        const graphQLSchemaType = graphQLSchemaTypeMap[graphQLSchemaTypeName];\n        if (\n          typeof graphQLSchemaType.getFields === 'function' &&\n          this.graphQLCustomTypeDefs.definitions\n        ) {\n          const graphQLCustomTypeDef = this.graphQLCustomTypeDefs.definitions.find(\n            definition => definition.name.value === graphQLSchemaTypeName\n          );\n          if (graphQLCustomTypeDef) {\n            const graphQLSchemaTypeFieldMap = graphQLSchemaType.getFields();\n            Object.keys(graphQLSchemaTypeFieldMap).forEach(graphQLSchemaTypeFieldName => {\n              const graphQLSchemaTypeField = graphQLSchemaTypeFieldMap[graphQLSchemaTypeFieldName];\n              if (!graphQLSchemaTypeField.astNode) {\n                const astNode = graphQLCustomTypeDef.fields.find(\n                  field => field.name.value === graphQLSchemaTypeFieldName\n                );\n                if (astNode) {\n                  graphQLSchemaTypeField.astNode = astNode;\n                }\n              }\n            });\n          }\n        }\n      });\n\n      SchemaDirectiveVisitor.visitSchemaDirectives(\n        this.graphQLSchema,\n        this.graphQLSchemaDirectives\n      );\n    } else {\n      this.graphQLSchema = this.graphQLAutoSchema;\n    }\n\n    return this.graphQLSchema;\n  }\n\n  addGraphQLType(type, throwError = false, ignoreReserved = false, ignoreConnection = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_TYPE_NAMES.includes(type.name)) ||\n      this.graphQLTypes.find(existingType => existingType.name === type.name) ||\n      (!ignoreConnection && type.name.endsWith('Connection'))\n    ) {\n      const message = `Type ${type.name} could not be added to the auto schema because it collided with an existing type.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLTypes.push(type);\n    return type;\n  }\n\n  addGraphQLQuery(fieldName, field, throwError = false, ignoreReserved = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_QUERY_NAMES.includes(fieldName)) ||\n      this.graphQLQueries[fieldName]\n    ) {\n      const message = `Query ${fieldName} could not be added to the auto schema because it collided with an existing field.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLQueries[fieldName] = field;\n    return field;\n  }\n\n  addGraphQLMutation(fieldName, field, throwError = false, ignoreReserved = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_MUTATION_NAMES.includes(fieldName)) ||\n      this.graphQLMutations[fieldName]\n    ) {\n      const message = `Mutation ${fieldName} could not be added to the auto schema because it collided with an existing field.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLMutations[fieldName] = field;\n    return field;\n  }\n\n  handleError(error) {\n    if (error instanceof Parse.Error) {\n      this.log.error('Parse error: ', error);\n    } else {\n      this.log.error('Uncaught internal server error.', error, error.stack);\n    }\n    throw toGraphQLError(error);\n  }\n\n  async _initializeSchemaAndConfig() {\n    const [schemaController, parseGraphQLConfig] = await Promise.all([\n      this.databaseController.loadSchema(),\n      this.parseGraphQLController.getGraphQLConfig(),\n    ]);\n\n    this.schemaController = schemaController;\n\n    return {\n      parseGraphQLConfig,\n    };\n  }\n\n  /**\n   * Gets all classes found by the `schemaController`\n   * minus those filtered out by the app's parseGraphQLConfig.\n   */\n  async _getClassesForSchema(parseGraphQLConfig: ParseGraphQLConfig) {\n    const { enabledForClasses, disabledForClasses } = parseGraphQLConfig;\n    const allClasses = await this.schemaController.getAllClasses();\n\n    if (Array.isArray(enabledForClasses) || Array.isArray(disabledForClasses)) {\n      let includedClasses = allClasses;\n      if (enabledForClasses) {\n        includedClasses = allClasses.filter(clazz => {\n          return enabledForClasses.includes(clazz.className);\n        });\n      }\n      if (disabledForClasses) {\n        // Classes included in `enabledForClasses` that\n        // are also present in `disabledForClasses` will\n        // still be filtered out\n        includedClasses = includedClasses.filter(clazz => {\n          return !disabledForClasses.includes(clazz.className);\n        });\n      }\n\n      this.isUsersClassDisabled = !includedClasses.some(clazz => {\n        return clazz.className === '_User';\n      });\n\n      return includedClasses;\n    } else {\n      return allClasses;\n    }\n  }\n\n  /**\n   * This method returns a list of tuples\n   * that provide the parseClass along with\n   * its parseClassConfig where provided.\n   */\n  _getParseClassesWithConfig(parseClasses, parseGraphQLConfig: ParseGraphQLConfig) {\n    const { classConfigs } = parseGraphQLConfig;\n\n    // Make sures that the default classes and classes that\n    // starts with capitalized letter will be generated first.\n    const sortClasses = (a, b) => {\n      a = a.className;\n      b = b.className;\n      if (a[0] === '_') {\n        if (b[0] !== '_') {\n          return -1;\n        }\n      }\n      if (b[0] === '_') {\n        if (a[0] !== '_') {\n          return 1;\n        }\n      }\n      if (a === b) {\n        return 0;\n      } else if (a < b) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n\n    return parseClasses.sort(sortClasses).map(parseClass => {\n      let parseClassConfig;\n      if (classConfigs) {\n        parseClassConfig = classConfigs.find(c => c.className === parseClass.className);\n      }\n      return [parseClass, parseClassConfig];\n    });\n  }\n\n  async _getFunctionNames() {\n    return await getFunctionNames(this.appId).filter(functionName => {\n      if (/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(functionName)) {\n        return true;\n      } else {\n        this.log.warn(\n          `Function ${functionName} could not be added to the auto schema because GraphQL names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/.`\n        );\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Checks for changes to the parseClasses\n   * objects (i.e. database schema) or to\n   * the parseGraphQLConfig object. If no\n   * changes are found, return true;\n   */\n  _hasSchemaInputChanged(params: {\n    parseClasses: any,\n    parseClassesString: string,\n    parseGraphQLConfig: ?ParseGraphQLConfig,\n    functionNamesString: string,\n  }): boolean {\n    const { parseClasses, parseClassesString, parseGraphQLConfig, functionNamesString } = params;\n\n    if (\n      JSON.stringify(this.parseGraphQLConfig) === JSON.stringify(parseGraphQLConfig) &&\n      this.functionNamesString === functionNamesString\n    ) {\n      if (this.parseClasses === parseClasses) {\n        return false;\n      }\n\n      if (this.parseClassesString === parseClassesString) {\n        this.parseClasses = parseClasses;\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport { ParseGraphQLSchema };\n"],"file":"ParseGraphQLSchema.js"}