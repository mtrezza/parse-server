{"version":3,"sources":["../../../src/GraphQL/loaders/parseClassTypes.js"],"names":["getParseClassTypeConfig","parseClassConfig","type","getInputFieldsAndConstraints","parseClass","classFields","Object","keys","fields","concat","inputFields","allowedInputFields","outputFields","allowedOutputFields","constraintFields","allowedConstraintFields","sortFields","allowedSortFields","classOutputFields","classCreateFields","classUpdateFields","classConstraintFields","classSortFields","classCustomFields","filter","field","defaultGraphQLTypes","PARSE_OBJECT_FIELDS","includes","create","update","className","outputField","length","push","asc","desc","map","load","parseGraphQLSchema","graphQLClassName","isCreateEnabled","isUpdateEnabled","classGraphQLCreateTypeName","classGraphQLCreateType","GraphQLInputObjectType","name","description","reduce","targetClass","parseClassTypes","required","GraphQLNonNull","ACL","ACL_INPUT","addGraphQLType","classGraphQLUpdateTypeName","classGraphQLUpdateType","classGraphQLPointerTypeName","classGraphQLPointerType","link","GraphQLID","OBJECT","classGraphQLRelationTypeName","classGraphQLRelationType","add","GraphQLList","OBJECT_ID","remove","classGraphQLConstraintsTypeName","classGraphQLConstraintsType","log","warn","parseField","OR","AND","NOR","classGraphQLRelationConstraintsTypeName","classGraphQLRelationConstraintsType","have","haveNot","exists","GraphQLBoolean","classGraphQLOrderTypeName","classGraphQLOrderType","GraphQLEnumType","values","fieldConfig","updatedSortFields","value","classGraphQLFindArgs","where","order","GraphQLString","skip","SKIP_ATT","connectionArgs","options","READ_OPTIONS_ATT","classGraphQLOutputTypeName","interfaces","PARSE_OBJECT","relayNodeInterface","parseObjectFields","id","obj","objectId","targetParseClassTypes","args","undefined","resolve","source","context","queryInfo","first","after","last","before","readPreference","includeReadPreference","subqueryReadPreference","config","auth","info","selectedFields","include","startsWith","replace","parseOrder","join","objectsQueries","findObjects","$relatedTo","object","__type","key","parseClasses","e","handleError","coordinates","coordinate","latitude","longitude","elem","classGraphQLOutputType","GraphQLObjectType","connectionType","edgeType","connectionFields","count","COUNT_ATT","nodeType","classGraphQLFindResultType","viewerType","sessionToken","SESSION_TOKEN_ATT","user"],"mappings":"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","sourcesContent":["import {\n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLList,\n  GraphQLInputObjectType,\n  GraphQLNonNull,\n  GraphQLBoolean,\n  GraphQLEnumType,\n} from 'graphql';\nimport { globalIdField, connectionArgs, connectionDefinitions } from 'graphql-relay';\nimport getFieldNames from 'graphql-list-fields';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\nimport * as objectsQueries from '../helpers/objectsQueries';\nimport { ParseGraphQLClassConfig } from '../../Controllers/ParseGraphQLController';\nimport { transformClassNameToGraphQL } from '../transformers/className';\nimport { transformInputTypeToGraphQL } from '../transformers/inputType';\nimport { transformOutputTypeToGraphQL } from '../transformers/outputType';\nimport { transformConstraintTypeToGraphQL } from '../transformers/constraintType';\nimport { extractKeysAndInclude, getParseClassMutationConfig } from '../parseGraphQLUtils';\n\nconst getParseClassTypeConfig = function (parseClassConfig: ?ParseGraphQLClassConfig) {\n  return (parseClassConfig && parseClassConfig.type) || {};\n};\n\nconst getInputFieldsAndConstraints = function (\n  parseClass,\n  parseClassConfig: ?ParseGraphQLClassConfig\n) {\n  const classFields = Object.keys(parseClass.fields).concat('id');\n  const {\n    inputFields: allowedInputFields,\n    outputFields: allowedOutputFields,\n    constraintFields: allowedConstraintFields,\n    sortFields: allowedSortFields,\n  } = getParseClassTypeConfig(parseClassConfig);\n\n  let classOutputFields;\n  let classCreateFields;\n  let classUpdateFields;\n  let classConstraintFields;\n  let classSortFields;\n\n  // All allowed customs fields\n  const classCustomFields = classFields.filter(field => {\n    return !Object.keys(defaultGraphQLTypes.PARSE_OBJECT_FIELDS).includes(field) && field !== 'id';\n  });\n\n  if (allowedInputFields && allowedInputFields.create) {\n    classCreateFields = classCustomFields.filter(field => {\n      return allowedInputFields.create.includes(field);\n    });\n  } else {\n    classCreateFields = classCustomFields;\n  }\n  if (allowedInputFields && allowedInputFields.update) {\n    classUpdateFields = classCustomFields.filter(field => {\n      return allowedInputFields.update.includes(field);\n    });\n  } else {\n    classUpdateFields = classCustomFields;\n  }\n\n  if (allowedOutputFields) {\n    classOutputFields = classCustomFields.filter(field => {\n      return allowedOutputFields.includes(field);\n    });\n  } else {\n    classOutputFields = classCustomFields;\n  }\n  // Filters the \"password\" field from class _User\n  if (parseClass.className === '_User') {\n    classOutputFields = classOutputFields.filter(outputField => outputField !== 'password');\n  }\n\n  if (allowedConstraintFields) {\n    classConstraintFields = classCustomFields.filter(field => {\n      return allowedConstraintFields.includes(field);\n    });\n  } else {\n    classConstraintFields = classFields;\n  }\n\n  if (allowedSortFields) {\n    classSortFields = allowedSortFields;\n    if (!classSortFields.length) {\n      // must have at least 1 order field\n      // otherwise the FindArgs Input Type will throw.\n      classSortFields.push({\n        field: 'id',\n        asc: true,\n        desc: true,\n      });\n    }\n  } else {\n    classSortFields = classFields.map(field => {\n      return { field, asc: true, desc: true };\n    });\n  }\n\n  return {\n    classCreateFields,\n    classUpdateFields,\n    classConstraintFields,\n    classOutputFields,\n    classSortFields,\n  };\n};\n\nconst load = (parseGraphQLSchema, parseClass, parseClassConfig: ?ParseGraphQLClassConfig) => {\n  const className = parseClass.className;\n  const graphQLClassName = transformClassNameToGraphQL(className);\n  const {\n    classCreateFields,\n    classUpdateFields,\n    classOutputFields,\n    classConstraintFields,\n    classSortFields,\n  } = getInputFieldsAndConstraints(parseClass, parseClassConfig);\n\n  const {\n    create: isCreateEnabled = true,\n    update: isUpdateEnabled = true,\n  } = getParseClassMutationConfig(parseClassConfig);\n\n  const classGraphQLCreateTypeName = `Create${graphQLClassName}FieldsInput`;\n  let classGraphQLCreateType = new GraphQLInputObjectType({\n    name: classGraphQLCreateTypeName,\n    description: `The ${classGraphQLCreateTypeName} input type is used in operations that involve creation of objects in the ${graphQLClassName} class.`,\n    fields: () =>\n      classCreateFields.reduce(\n        (fields, field) => {\n          const type = transformInputTypeToGraphQL(\n            parseClass.fields[field].type,\n            parseClass.fields[field].targetClass,\n            parseGraphQLSchema.parseClassTypes\n          );\n          if (type) {\n            return {\n              ...fields,\n              [field]: {\n                description: `This is the object ${field}.`,\n                type:\n                  (className === '_User' && (field === 'username' || field === 'password')) ||\n                  parseClass.fields[field].required\n                    ? new GraphQLNonNull(type)\n                    : type,\n              },\n            };\n          } else {\n            return fields;\n          }\n        },\n        {\n          ACL: { type: defaultGraphQLTypes.ACL_INPUT },\n        }\n      ),\n  });\n  classGraphQLCreateType = parseGraphQLSchema.addGraphQLType(classGraphQLCreateType);\n\n  const classGraphQLUpdateTypeName = `Update${graphQLClassName}FieldsInput`;\n  let classGraphQLUpdateType = new GraphQLInputObjectType({\n    name: classGraphQLUpdateTypeName,\n    description: `The ${classGraphQLUpdateTypeName} input type is used in operations that involve creation of objects in the ${graphQLClassName} class.`,\n    fields: () =>\n      classUpdateFields.reduce(\n        (fields, field) => {\n          const type = transformInputTypeToGraphQL(\n            parseClass.fields[field].type,\n            parseClass.fields[field].targetClass,\n            parseGraphQLSchema.parseClassTypes\n          );\n          if (type) {\n            return {\n              ...fields,\n              [field]: {\n                description: `This is the object ${field}.`,\n                type,\n              },\n            };\n          } else {\n            return fields;\n          }\n        },\n        {\n          ACL: { type: defaultGraphQLTypes.ACL_INPUT },\n        }\n      ),\n  });\n  classGraphQLUpdateType = parseGraphQLSchema.addGraphQLType(classGraphQLUpdateType);\n\n  const classGraphQLPointerTypeName = `${graphQLClassName}PointerInput`;\n  let classGraphQLPointerType = new GraphQLInputObjectType({\n    name: classGraphQLPointerTypeName,\n    description: `Allow to link OR add and link an object of the ${graphQLClassName} class.`,\n    fields: () => {\n      const fields = {\n        link: {\n          description: `Link an existing object from ${graphQLClassName} class. You can use either the global or the object id.`,\n          type: GraphQLID,\n        },\n      };\n      if (isCreateEnabled) {\n        fields['createAndLink'] = {\n          description: `Create and link an object from ${graphQLClassName} class.`,\n          type: classGraphQLCreateType,\n        };\n      }\n      return fields;\n    },\n  });\n  classGraphQLPointerType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLPointerType) || defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLRelationTypeName = `${graphQLClassName}RelationInput`;\n  let classGraphQLRelationType = new GraphQLInputObjectType({\n    name: classGraphQLRelationTypeName,\n    description: `Allow to add, remove, createAndAdd objects of the ${graphQLClassName} class into a relation field.`,\n    fields: () => {\n      const fields = {\n        add: {\n          description: `Add existing objects from the ${graphQLClassName} class into the relation. You can use either the global or the object ids.`,\n          type: new GraphQLList(defaultGraphQLTypes.OBJECT_ID),\n        },\n        remove: {\n          description: `Remove existing objects from the ${graphQLClassName} class out of the relation. You can use either the global or the object ids.`,\n          type: new GraphQLList(defaultGraphQLTypes.OBJECT_ID),\n        },\n      };\n      if (isCreateEnabled) {\n        fields['createAndAdd'] = {\n          description: `Create and add objects of the ${graphQLClassName} class into the relation.`,\n          type: new GraphQLList(new GraphQLNonNull(classGraphQLCreateType)),\n        };\n      }\n      return fields;\n    },\n  });\n  classGraphQLRelationType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLRelationType) || defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLConstraintsTypeName = `${graphQLClassName}WhereInput`;\n  let classGraphQLConstraintsType = new GraphQLInputObjectType({\n    name: classGraphQLConstraintsTypeName,\n    description: `The ${classGraphQLConstraintsTypeName} input type is used in operations that involve filtering objects of ${graphQLClassName} class.`,\n    fields: () => ({\n      ...classConstraintFields.reduce((fields, field) => {\n        if (['OR', 'AND', 'NOR'].includes(field)) {\n          parseGraphQLSchema.log.warn(\n            `Field ${field} could not be added to the auto schema ${classGraphQLConstraintsTypeName} because it collided with an existing one.`\n          );\n          return fields;\n        }\n        const parseField = field === 'id' ? 'objectId' : field;\n        const type = transformConstraintTypeToGraphQL(\n          parseClass.fields[parseField].type,\n          parseClass.fields[parseField].targetClass,\n          parseGraphQLSchema.parseClassTypes,\n          field\n        );\n        if (type) {\n          return {\n            ...fields,\n            [field]: {\n              description: `This is the object ${field}.`,\n              type,\n            },\n          };\n        } else {\n          return fields;\n        }\n      }, {}),\n      OR: {\n        description: 'This is the OR operator to compound constraints.',\n        type: new GraphQLList(new GraphQLNonNull(classGraphQLConstraintsType)),\n      },\n      AND: {\n        description: 'This is the AND operator to compound constraints.',\n        type: new GraphQLList(new GraphQLNonNull(classGraphQLConstraintsType)),\n      },\n      NOR: {\n        description: 'This is the NOR operator to compound constraints.',\n        type: new GraphQLList(new GraphQLNonNull(classGraphQLConstraintsType)),\n      },\n    }),\n  });\n  classGraphQLConstraintsType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLConstraintsType) || defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLRelationConstraintsTypeName = `${graphQLClassName}RelationWhereInput`;\n  let classGraphQLRelationConstraintsType = new GraphQLInputObjectType({\n    name: classGraphQLRelationConstraintsTypeName,\n    description: `The ${classGraphQLRelationConstraintsTypeName} input type is used in operations that involve filtering objects of ${graphQLClassName} class.`,\n    fields: () => ({\n      have: {\n        description: 'Run a relational/pointer query where at least one child object can match.',\n        type: classGraphQLConstraintsType,\n      },\n      haveNot: {\n        description:\n          'Run an inverted relational/pointer query where at least one child object can match.',\n        type: classGraphQLConstraintsType,\n      },\n      exists: {\n        description: 'Check if the relation/pointer contains objects.',\n        type: GraphQLBoolean,\n      },\n    }),\n  });\n  classGraphQLRelationConstraintsType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLRelationConstraintsType) ||\n    defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLOrderTypeName = `${graphQLClassName}Order`;\n  let classGraphQLOrderType = new GraphQLEnumType({\n    name: classGraphQLOrderTypeName,\n    description: `The ${classGraphQLOrderTypeName} input type is used when sorting objects of the ${graphQLClassName} class.`,\n    values: classSortFields.reduce((sortFields, fieldConfig) => {\n      const { field, asc, desc } = fieldConfig;\n      const updatedSortFields = {\n        ...sortFields,\n      };\n      const value = field === 'id' ? 'objectId' : field;\n      if (asc) {\n        updatedSortFields[`${field}_ASC`] = { value };\n      }\n      if (desc) {\n        updatedSortFields[`${field}_DESC`] = { value: `-${value}` };\n      }\n      return updatedSortFields;\n    }, {}),\n  });\n  classGraphQLOrderType = parseGraphQLSchema.addGraphQLType(classGraphQLOrderType);\n\n  const classGraphQLFindArgs = {\n    where: {\n      description: 'These are the conditions that the objects need to match in order to be found.',\n      type: classGraphQLConstraintsType,\n    },\n    order: {\n      description: 'The fields to be used when sorting the data fetched.',\n      type: classGraphQLOrderType\n        ? new GraphQLList(new GraphQLNonNull(classGraphQLOrderType))\n        : GraphQLString,\n    },\n    skip: defaultGraphQLTypes.SKIP_ATT,\n    ...connectionArgs,\n    options: defaultGraphQLTypes.READ_OPTIONS_ATT,\n  };\n  const classGraphQLOutputTypeName = `${graphQLClassName}`;\n  const interfaces = [defaultGraphQLTypes.PARSE_OBJECT, parseGraphQLSchema.relayNodeInterface];\n  const parseObjectFields = {\n    id: globalIdField(className, obj => obj.objectId),\n    ...defaultGraphQLTypes.PARSE_OBJECT_FIELDS,\n  };\n  const outputFields = () => {\n    return classOutputFields.reduce((fields, field) => {\n      const type = transformOutputTypeToGraphQL(\n        parseClass.fields[field].type,\n        parseClass.fields[field].targetClass,\n        parseGraphQLSchema.parseClassTypes\n      );\n      if (parseClass.fields[field].type === 'Relation') {\n        const targetParseClassTypes =\n          parseGraphQLSchema.parseClassTypes[parseClass.fields[field].targetClass];\n        const args = targetParseClassTypes ? targetParseClassTypes.classGraphQLFindArgs : undefined;\n        return {\n          ...fields,\n          [field]: {\n            description: `This is the object ${field}.`,\n            args,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n            async resolve(source, args, context, queryInfo) {\n              try {\n                const { where, order, skip, first, after, last, before, options } = args;\n                const { readPreference, includeReadPreference, subqueryReadPreference } =\n                  options || {};\n                const { config, auth, info } = context;\n                const selectedFields = getFieldNames(queryInfo);\n\n                const { keys, include } = extractKeysAndInclude(\n                  selectedFields\n                    .filter(field => field.startsWith('edges.node.'))\n                    .map(field => field.replace('edges.node.', ''))\n                );\n                const parseOrder = order && order.join(',');\n\n                return objectsQueries.findObjects(\n                  source[field].className,\n                  {\n                    $relatedTo: {\n                      object: {\n                        __type: 'Pointer',\n                        className: className,\n                        objectId: source.objectId,\n                      },\n                      key: field,\n                    },\n                    ...(where || {}),\n                  },\n                  parseOrder,\n                  skip,\n                  first,\n                  after,\n                  last,\n                  before,\n                  keys,\n                  include,\n                  false,\n                  readPreference,\n                  includeReadPreference,\n                  subqueryReadPreference,\n                  config,\n                  auth,\n                  info,\n                  selectedFields,\n                  parseGraphQLSchema.parseClasses\n                );\n              } catch (e) {\n                parseGraphQLSchema.handleError(e);\n              }\n            },\n          },\n        };\n      } else if (parseClass.fields[field].type === 'Polygon') {\n        return {\n          ...fields,\n          [field]: {\n            description: `This is the object ${field}.`,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n            async resolve(source) {\n              if (source[field] && source[field].coordinates) {\n                return source[field].coordinates.map(coordinate => ({\n                  latitude: coordinate[0],\n                  longitude: coordinate[1],\n                }));\n              } else {\n                return null;\n              }\n            },\n          },\n        };\n      } else if (parseClass.fields[field].type === 'Array') {\n        return {\n          ...fields,\n          [field]: {\n            description: `Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments`,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n            async resolve(source) {\n              if (!source[field]) return null;\n              return source[field].map(async elem => {\n                if (elem.className && elem.objectId && elem.__type === 'Object') {\n                  return elem;\n                } else {\n                  return { value: elem };\n                }\n              });\n            },\n          },\n        };\n      } else if (type) {\n        return {\n          ...fields,\n          [field]: {\n            description: `This is the object ${field}.`,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n          },\n        };\n      } else {\n        return fields;\n      }\n    }, parseObjectFields);\n  };\n  let classGraphQLOutputType = new GraphQLObjectType({\n    name: classGraphQLOutputTypeName,\n    description: `The ${classGraphQLOutputTypeName} object type is used in operations that involve outputting objects of ${graphQLClassName} class.`,\n    interfaces,\n    fields: outputFields,\n  });\n  classGraphQLOutputType = parseGraphQLSchema.addGraphQLType(classGraphQLOutputType);\n\n  const { connectionType, edgeType } = connectionDefinitions({\n    name: graphQLClassName,\n    connectionFields: {\n      count: defaultGraphQLTypes.COUNT_ATT,\n    },\n    nodeType: classGraphQLOutputType || defaultGraphQLTypes.OBJECT,\n  });\n  let classGraphQLFindResultType = undefined;\n  if (\n    parseGraphQLSchema.addGraphQLType(edgeType) &&\n    parseGraphQLSchema.addGraphQLType(connectionType, false, false, true)\n  ) {\n    classGraphQLFindResultType = connectionType;\n  }\n\n  parseGraphQLSchema.parseClassTypes[className] = {\n    classGraphQLPointerType,\n    classGraphQLRelationType,\n    classGraphQLCreateType,\n    classGraphQLUpdateType,\n    classGraphQLConstraintsType,\n    classGraphQLRelationConstraintsType,\n    classGraphQLFindArgs,\n    classGraphQLOutputType,\n    classGraphQLFindResultType,\n    config: {\n      parseClassConfig,\n      isCreateEnabled,\n      isUpdateEnabled,\n    },\n  };\n\n  if (className === '_User') {\n    const viewerType = new GraphQLObjectType({\n      name: 'Viewer',\n      description: `The Viewer object type is used in operations that involve outputting the current user data.`,\n      fields: () => ({\n        sessionToken: defaultGraphQLTypes.SESSION_TOKEN_ATT,\n        user: {\n          description: 'This is the current user.',\n          type: new GraphQLNonNull(classGraphQLOutputType),\n        },\n      }),\n    });\n    parseGraphQLSchema.addGraphQLType(viewerType, true, true);\n    parseGraphQLSchema.viewerType = viewerType;\n  }\n};\n\nexport { extractKeysAndInclude, load };\n"],"file":"parseClassTypes.js"}