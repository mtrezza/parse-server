{"version":3,"sources":["../../../src/GraphQL/loaders/schemaDirectives.js"],"names":["definitions","load","parseGraphQLSchema","graphQLSchemaDirectivesDefinitions","ResolveDirectiveVisitor","SchemaDirectiveVisitor","visitFieldDefinition","field","resolve","_source","args","context","config","auth","info","functionName","name","to","FunctionsRouter","handleCloudFunction","params","body","response","result","e","handleError","graphQLSchemaDirectives","MockDirectiveVisitor","with","mock"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,WAAW,GAAG,wBAAI;AAC/B;AACA;AACA,CAHO;;;AAKP,MAAMC,IAAI,GAAGC,kBAAkB,IAAI;AACjCA,EAAAA,kBAAkB,CAACC,kCAAnB,GAAwDH,WAAxD;;AAEA,QAAMI,uBAAN,SAAsCC,6BAAtC,CAA6D;AAC3DC,IAAAA,oBAAoB,CAACC,KAAD,EAAQ;AAC1BA,MAAAA,KAAK,CAACC,OAAN,GAAgB,OAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,KAAkC;AAChD,YAAI;AACF,gBAAM;AAAEC,YAAAA,MAAF;AAAUC,YAAAA,IAAV;AAAgBC,YAAAA;AAAhB,cAAyBH,OAA/B;AAEA,cAAII,YAAY,GAAGR,KAAK,CAACS,IAAzB;;AACA,cAAI,KAAKN,IAAL,CAAUO,EAAd,EAAkB;AAChBF,YAAAA,YAAY,GAAG,KAAKL,IAAL,CAAUO,EAAzB;AACD;;AAED,iBAAO,CACL,MAAMC,iCAAgBC,mBAAhB,CAAoC;AACxCC,YAAAA,MAAM,EAAE;AACNL,cAAAA;AADM,aADgC;AAIxCH,YAAAA,MAJwC;AAKxCC,YAAAA,IALwC;AAMxCC,YAAAA,IANwC;AAOxCO,YAAAA,IAAI,EAAEX;AAPkC,WAApC,CADD,EAULY,QAVK,CAUIC,MAVX;AAWD,SAnBD,CAmBE,OAAOC,CAAP,EAAU;AACVtB,UAAAA,kBAAkB,CAACuB,WAAnB,CAA+BD,CAA/B;AACD;AACF,OAvBD;AAwBD;;AA1B0D;;AA6B7DtB,EAAAA,kBAAkB,CAACwB,uBAAnB,CAA2ClB,OAA3C,GAAqDJ,uBAArD;;AAEA,QAAMuB,oBAAN,SAAmCtB,6BAAnC,CAA0D;AACxDC,IAAAA,oBAAoB,CAACC,KAAD,EAAQ;AAC1BA,MAAAA,KAAK,CAACC,OAAN,GAAgB,MAAM;AACpB,eAAO,KAAKE,IAAL,CAAUkB,IAAjB;AACD,OAFD;AAGD;;AALuD;;AAQ1D1B,EAAAA,kBAAkB,CAACwB,uBAAnB,CAA2CG,IAA3C,GAAkDF,oBAAlD;AACD,CA3CD","sourcesContent":["import gql from 'graphql-tag';\nimport { SchemaDirectiveVisitor } from '@graphql-tools/utils';\nimport { FunctionsRouter } from '../../Routers/FunctionsRouter';\n\nexport const definitions = gql`\n  directive @resolve(to: String) on FIELD_DEFINITION\n  directive @mock(with: Any!) on FIELD_DEFINITION\n`;\n\nconst load = parseGraphQLSchema => {\n  parseGraphQLSchema.graphQLSchemaDirectivesDefinitions = definitions;\n\n  class ResolveDirectiveVisitor extends SchemaDirectiveVisitor {\n    visitFieldDefinition(field) {\n      field.resolve = async (_source, args, context) => {\n        try {\n          const { config, auth, info } = context;\n\n          let functionName = field.name;\n          if (this.args.to) {\n            functionName = this.args.to;\n          }\n\n          return (\n            await FunctionsRouter.handleCloudFunction({\n              params: {\n                functionName,\n              },\n              config,\n              auth,\n              info,\n              body: args,\n            })\n          ).response.result;\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      };\n    }\n  }\n\n  parseGraphQLSchema.graphQLSchemaDirectives.resolve = ResolveDirectiveVisitor;\n\n  class MockDirectiveVisitor extends SchemaDirectiveVisitor {\n    visitFieldDefinition(field) {\n      field.resolve = () => {\n        return this.args.with;\n      };\n    }\n  }\n\n  parseGraphQLSchema.graphQLSchemaDirectives.mock = MockDirectiveVisitor;\n};\n\nexport { load };\n"],"file":"schemaDirectives.js"}