{"version":3,"sources":["../../../src/GraphQL/loaders/usersMutations.js"],"names":["usersRouter","UsersRouter","load","parseGraphQLSchema","isUsersClassDisabled","signUpMutation","name","description","inputFields","fields","descriptions","type","parseClassTypes","classGraphQLCreateType","outputFields","viewer","GraphQLNonNull","viewerType","mutateAndGetPayload","args","context","mutationInfo","config","auth","info","parseFields","className","req","sessionToken","objectId","objectsMutations","createObject","e","handleError","addGraphQLType","input","ofType","addGraphQLMutation","logInWithMutation","authData","OBJECT","GraphQLInputObjectType","classGraphQLCreateFields","getFields","Object","keys","reduce","fieldName","logInMutation","username","GraphQLString","password","handleLogIn","body","query","response","logOutMutation","ok","GraphQLBoolean","_args","handleLogOut","resetPasswordMutation","email","handleResetRequest","sendVerificationEmailMutation","handleVerificationEmailRequest"],"mappings":"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","sourcesContent":["import { GraphQLNonNull, GraphQLString, GraphQLBoolean, GraphQLInputObjectType } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\nimport UsersRouter from '../../Routers/UsersRouter';\nimport * as objectsMutations from '../helpers/objectsMutations';\nimport { OBJECT } from './defaultGraphQLTypes';\nimport { getUserFromSessionToken } from './usersQueries';\nimport { transformTypes } from '../transformers/mutation';\n\nconst usersRouter = new UsersRouter();\n\nconst load = parseGraphQLSchema => {\n  if (parseGraphQLSchema.isUsersClassDisabled) {\n    return;\n  }\n\n  const signUpMutation = mutationWithClientMutationId({\n    name: 'SignUp',\n    description: 'The signUp mutation can be used to create and sign up a new user.',\n    inputFields: {\n      fields: {\n        descriptions: 'These are the fields of the new user to be created and signed up.',\n        type: parseGraphQLSchema.parseClassTypes['_User'].classGraphQLCreateType,\n      },\n    },\n    outputFields: {\n      viewer: {\n        description: 'This is the new user that was created, signed up and returned as a viewer.',\n        type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      },\n    },\n    mutateAndGetPayload: async (args, context, mutationInfo) => {\n      try {\n        const { fields } = args;\n        const { config, auth, info } = context;\n\n        const parseFields = await transformTypes('create', fields, {\n          className: '_User',\n          parseGraphQLSchema,\n          req: { config, auth, info },\n        });\n\n        const { sessionToken, objectId } = await objectsMutations.createObject(\n          '_User',\n          parseFields,\n          config,\n          auth,\n          info\n        );\n\n        context.info.sessionToken = sessionToken;\n\n        return {\n          viewer: await getUserFromSessionToken(context, mutationInfo, 'viewer.user.', objectId),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(signUpMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(signUpMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('signUp', signUpMutation, true, true);\n  const logInWithMutation = mutationWithClientMutationId({\n    name: 'LogInWith',\n    description:\n      'The logInWith mutation can be used to signup, login user with 3rd party authentication system. This mutation create a user if the authData do not correspond to an existing one.',\n    inputFields: {\n      authData: {\n        descriptions: 'This is the auth data of your custom auth provider',\n        type: new GraphQLNonNull(OBJECT),\n      },\n      fields: {\n        descriptions: 'These are the fields of the user to be created/updated and logged in.',\n        type: new GraphQLInputObjectType({\n          name: 'UserLoginWithInput',\n          fields: () => {\n            const classGraphQLCreateFields = parseGraphQLSchema.parseClassTypes[\n              '_User'\n            ].classGraphQLCreateType.getFields();\n            return Object.keys(classGraphQLCreateFields).reduce((fields, fieldName) => {\n              if (\n                fieldName !== 'password' &&\n                fieldName !== 'username' &&\n                fieldName !== 'authData'\n              ) {\n                fields[fieldName] = classGraphQLCreateFields[fieldName];\n              }\n              return fields;\n            }, {});\n          },\n        }),\n      },\n    },\n    outputFields: {\n      viewer: {\n        description: 'This is the new user that was created, signed up and returned as a viewer.',\n        type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      },\n    },\n    mutateAndGetPayload: async (args, context, mutationInfo) => {\n      try {\n        const { fields, authData } = args;\n        const { config, auth, info } = context;\n\n        const parseFields = await transformTypes('create', fields, {\n          className: '_User',\n          parseGraphQLSchema,\n          req: { config, auth, info },\n        });\n\n        const { sessionToken, objectId } = await objectsMutations.createObject(\n          '_User',\n          { ...parseFields, authData },\n          config,\n          auth,\n          info\n        );\n\n        context.info.sessionToken = sessionToken;\n\n        return {\n          viewer: await getUserFromSessionToken(context, mutationInfo, 'viewer.user.', objectId),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(logInWithMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(logInWithMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('logInWith', logInWithMutation, true, true);\n\n  const logInMutation = mutationWithClientMutationId({\n    name: 'LogIn',\n    description: 'The logIn mutation can be used to log in an existing user.',\n    inputFields: {\n      username: {\n        description: 'This is the username used to log in the user.',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n      password: {\n        description: 'This is the password used to log in the user.',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      viewer: {\n        description: 'This is the existing user that was logged in and returned as a viewer.',\n        type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      },\n    },\n    mutateAndGetPayload: async (args, context, mutationInfo) => {\n      try {\n        const { username, password } = args;\n        const { config, auth, info } = context;\n\n        const { sessionToken, objectId } = (\n          await usersRouter.handleLogIn({\n            body: {\n              username,\n              password,\n            },\n            query: {},\n            config,\n            auth,\n            info,\n          })\n        ).response;\n\n        context.info.sessionToken = sessionToken;\n\n        return {\n          viewer: await getUserFromSessionToken(context, mutationInfo, 'viewer.user.', objectId),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(logInMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(logInMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('logIn', logInMutation, true, true);\n\n  const logOutMutation = mutationWithClientMutationId({\n    name: 'LogOut',\n    description: 'The logOut mutation can be used to log out an existing user.',\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async (_args, context) => {\n      try {\n        const { config, auth, info } = context;\n\n        await usersRouter.handleLogOut({\n          config,\n          auth,\n          info,\n        });\n\n        return { ok: true };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(logOutMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(logOutMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('logOut', logOutMutation, true, true);\n\n  const resetPasswordMutation = mutationWithClientMutationId({\n    name: 'ResetPassword',\n    description:\n      'The resetPassword mutation can be used to reset the password of an existing user.',\n    inputFields: {\n      email: {\n        descriptions: 'Email of the user that should receive the reset email',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async ({ email }, context) => {\n      const { config, auth, info } = context;\n\n      await usersRouter.handleResetRequest({\n        body: {\n          email,\n        },\n        config,\n        auth,\n        info,\n      });\n\n      return { ok: true };\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(resetPasswordMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(resetPasswordMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('resetPassword', resetPasswordMutation, true, true);\n\n  const sendVerificationEmailMutation = mutationWithClientMutationId({\n    name: 'SendVerificationEmail',\n    description:\n      'The sendVerificationEmail mutation can be used to send the verification email again.',\n    inputFields: {\n      email: {\n        descriptions: 'Email of the user that should receive the verification email',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async ({ email }, context) => {\n      try {\n        const { config, auth, info } = context;\n\n        await usersRouter.handleVerificationEmailRequest({\n          body: {\n            email,\n          },\n          config,\n          auth,\n          info,\n        });\n\n        return { ok: true };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(\n    sendVerificationEmailMutation.args.input.type.ofType,\n    true,\n    true\n  );\n  parseGraphQLSchema.addGraphQLType(sendVerificationEmailMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation(\n    'sendVerificationEmail',\n    sendVerificationEmailMutation,\n    true,\n    true\n  );\n};\n\nexport { load };\n"],"file":"usersMutations.js"}