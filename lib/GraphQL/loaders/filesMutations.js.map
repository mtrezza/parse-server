{"version":3,"sources":["../../../src/GraphQL/loaders/filesMutations.js"],"names":["handleUpload","upload","config","createReadStream","filename","mimetype","data","stream","Promise","resolve","reject","chunks","on","chunk","push","Buffer","concat","length","Parse","Error","FILE_SAVE_ERROR","INVALID_FILE_NAME","match","fileInfo","filesController","createFile","e","logger","error","load","parseGraphQLSchema","createMutation","name","description","inputFields","type","GraphQLNonNull","GraphQLUpload","outputFields","defaultGraphQLTypes","FILE_INFO","mutateAndGetPayload","args","context","handleError","addGraphQLType","input","ofType","addGraphQLMutation"],"mappings":"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","sourcesContent":["import { GraphQLNonNull } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\nimport { GraphQLUpload } from '@graphql-tools/links';\nimport Parse from 'parse/node';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\nimport logger from '../../logger';\n\nconst handleUpload = async (upload, config) => {\n  const { createReadStream, filename, mimetype } = await upload;\n  let data = null;\n  if (createReadStream) {\n    const stream = createReadStream();\n    data = await new Promise((resolve, reject) => {\n      const chunks = [];\n      stream\n        .on('error', reject)\n        .on('data', chunk => chunks.push(chunk))\n        .on('end', () => resolve(Buffer.concat(chunks)));\n    });\n  }\n\n  if (!data || !data.length) {\n    throw new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'Invalid file upload.');\n  }\n\n  if (filename.length > 128) {\n    throw new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename too long.');\n  }\n\n  if (!filename.match(/^[_a-zA-Z0-9][a-zA-Z0-9@\\.\\ ~_-]*$/)) {\n    throw new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename contains invalid characters.');\n  }\n\n  try {\n    return {\n      fileInfo: await config.filesController.createFile(config, filename, data, mimetype),\n    };\n  } catch (e) {\n    logger.error('Error creating a file: ', e);\n    throw new Parse.Error(Parse.Error.FILE_SAVE_ERROR, `Could not store file: ${filename}.`);\n  }\n};\n\nconst load = parseGraphQLSchema => {\n  const createMutation = mutationWithClientMutationId({\n    name: 'CreateFile',\n    description: 'The createFile mutation can be used to create and upload a new file.',\n    inputFields: {\n      upload: {\n        description: 'This is the new file to be created and uploaded.',\n        type: new GraphQLNonNull(GraphQLUpload),\n      },\n    },\n    outputFields: {\n      fileInfo: {\n        description: 'This is the created file info.',\n        type: new GraphQLNonNull(defaultGraphQLTypes.FILE_INFO),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { upload } = args;\n        const { config } = context;\n        return handleUpload(upload, config);\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(createMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(createMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('createFile', createMutation, true, true);\n};\n\nexport { load, handleUpload };\n"],"file":"filesMutations.js"}