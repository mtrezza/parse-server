{"version":3,"sources":["../../../src/GraphQL/loaders/schemaTypes.js"],"names":["SCHEMA_FIELD_NAME_ATT","description","type","GraphQLNonNull","GraphQLString","SCHEMA_FIELD_INPUT","GraphQLInputObjectType","name","fields","SCHEMA_FIELD","GraphQLInterfaceType","resolveType","value","String","SCHEMA_STRING_FIELD","Number","SCHEMA_NUMBER_FIELD","Boolean","SCHEMA_BOOLEAN_FIELD","Array","SCHEMA_ARRAY_FIELD","Object","SCHEMA_OBJECT_FIELD","Date","SCHEMA_DATE_FIELD","File","SCHEMA_FILE_FIELD","GeoPoint","SCHEMA_GEO_POINT_FIELD","Polygon","SCHEMA_POLYGON_FIELD","Bytes","SCHEMA_BYTES_FIELD","Pointer","SCHEMA_POINTER_FIELD","Relation","SCHEMA_RELATION_FIELD","ACL","SCHEMA_ACL_FIELD","SCHEMA_STRING_FIELD_INPUT","GraphQLObjectType","interfaces","SCHEMA_NUMBER_FIELD_INPUT","SCHEMA_BOOLEAN_FIELD_INPUT","SCHEMA_ARRAY_FIELD_INPUT","SCHEMA_OBJECT_FIELD_INPUT","SCHEMA_DATE_FIELD_INPUT","SCHEMA_FILE_FIELD_INPUT","SCHEMA_GEO_POINT_FIELD_INPUT","SCHEMA_POLYGON_FIELD_INPUT","SCHEMA_BYTES_FIELD_INPUT","TARGET_CLASS_ATT","SCHEMA_POINTER_FIELD_INPUT","targetClassName","SCHEMA_RELATION_FIELD_INPUT","SCHEMA_FIELDS_INPUT","addStrings","GraphQLList","addNumbers","addBooleans","addArrays","addObjects","addDates","addFiles","addGeoPoint","addPolygons","addBytes","addPointers","addRelations","remove","CLASS_NAME_ATT","CLASS","schemaFields","load","parseGraphQLSchema","addGraphQLType"],"mappings":"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","sourcesContent":["import {\n  GraphQLNonNull,\n  GraphQLString,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n} from 'graphql';\n\nconst SCHEMA_FIELD_NAME_ATT = {\n  description: 'This is the field name.',\n  type: new GraphQLNonNull(GraphQLString),\n};\n\nconst SCHEMA_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaFieldInput',\n  description: 'The SchemaFieldInput is used to specify a field of an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FIELD = new GraphQLInterfaceType({\n  name: 'SchemaField',\n  description:\n    'The SchemaField interface type is used as a base type for the different supported fields of an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n  resolveType: value =>\n    ({\n      String: SCHEMA_STRING_FIELD,\n      Number: SCHEMA_NUMBER_FIELD,\n      Boolean: SCHEMA_BOOLEAN_FIELD,\n      Array: SCHEMA_ARRAY_FIELD,\n      Object: SCHEMA_OBJECT_FIELD,\n      Date: SCHEMA_DATE_FIELD,\n      File: SCHEMA_FILE_FIELD,\n      GeoPoint: SCHEMA_GEO_POINT_FIELD,\n      Polygon: SCHEMA_POLYGON_FIELD,\n      Bytes: SCHEMA_BYTES_FIELD,\n      Pointer: SCHEMA_POINTER_FIELD,\n      Relation: SCHEMA_RELATION_FIELD,\n      ACL: SCHEMA_ACL_FIELD,\n    }[value.type]),\n});\n\nconst SCHEMA_STRING_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaStringFieldInput',\n  description:\n    'The SchemaStringFieldInput is used to specify a field of type string for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_STRING_FIELD = new GraphQLObjectType({\n  name: 'SchemaStringField',\n  description: 'The SchemaStringField is used to return information of a String field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_NUMBER_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaNumberFieldInput',\n  description:\n    'The SchemaNumberFieldInput is used to specify a field of type number for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_NUMBER_FIELD = new GraphQLObjectType({\n  name: 'SchemaNumberField',\n  description: 'The SchemaNumberField is used to return information of a Number field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BOOLEAN_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaBooleanFieldInput',\n  description:\n    'The SchemaBooleanFieldInput is used to specify a field of type boolean for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BOOLEAN_FIELD = new GraphQLObjectType({\n  name: 'SchemaBooleanField',\n  description: 'The SchemaBooleanField is used to return information of a Boolean field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_ARRAY_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaArrayFieldInput',\n  description:\n    'The SchemaArrayFieldInput is used to specify a field of type array for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_ARRAY_FIELD = new GraphQLObjectType({\n  name: 'SchemaArrayField',\n  description: 'The SchemaArrayField is used to return information of an Array field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_OBJECT_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaObjectFieldInput',\n  description:\n    'The SchemaObjectFieldInput is used to specify a field of type object for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_OBJECT_FIELD = new GraphQLObjectType({\n  name: 'SchemaObjectField',\n  description: 'The SchemaObjectField is used to return information of an Object field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_DATE_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaDateFieldInput',\n  description:\n    'The SchemaDateFieldInput is used to specify a field of type date for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_DATE_FIELD = new GraphQLObjectType({\n  name: 'SchemaDateField',\n  description: 'The SchemaDateField is used to return information of a Date field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FILE_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaFileFieldInput',\n  description:\n    'The SchemaFileFieldInput is used to specify a field of type file for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FILE_FIELD = new GraphQLObjectType({\n  name: 'SchemaFileField',\n  description: 'The SchemaFileField is used to return information of a File field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_GEO_POINT_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaGeoPointFieldInput',\n  description:\n    'The SchemaGeoPointFieldInput is used to specify a field of type geo point for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_GEO_POINT_FIELD = new GraphQLObjectType({\n  name: 'SchemaGeoPointField',\n  description: 'The SchemaGeoPointField is used to return information of a Geo Point field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_POLYGON_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaPolygonFieldInput',\n  description:\n    'The SchemaPolygonFieldInput is used to specify a field of type polygon for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_POLYGON_FIELD = new GraphQLObjectType({\n  name: 'SchemaPolygonField',\n  description: 'The SchemaPolygonField is used to return information of a Polygon field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BYTES_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaBytesFieldInput',\n  description:\n    'The SchemaBytesFieldInput is used to specify a field of type bytes for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BYTES_FIELD = new GraphQLObjectType({\n  name: 'SchemaBytesField',\n  description: 'The SchemaBytesField is used to return information of a Bytes field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst TARGET_CLASS_ATT = {\n  description: 'This is the name of the target class for the field.',\n  type: new GraphQLNonNull(GraphQLString),\n};\n\nconst SCHEMA_POINTER_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'PointerFieldInput',\n  description:\n    'The PointerFieldInput is used to specify a field of type pointer for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_POINTER_FIELD = new GraphQLObjectType({\n  name: 'SchemaPointerField',\n  description: 'The SchemaPointerField is used to return information of a Pointer field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_RELATION_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'RelationFieldInput',\n  description:\n    'The RelationFieldInput is used to specify a field of type relation for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_RELATION_FIELD = new GraphQLObjectType({\n  name: 'SchemaRelationField',\n  description: 'The SchemaRelationField is used to return information of a Relation field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_ACL_FIELD = new GraphQLObjectType({\n  name: 'SchemaACLField',\n  description: 'The SchemaACLField is used to return information of an ACL field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FIELDS_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaFieldsInput',\n  description: `The CreateClassSchemaInput type is used to specify the schema for a new object class to be created.`,\n  fields: {\n    addStrings: {\n      description: 'These are the String fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_STRING_FIELD_INPUT)),\n    },\n    addNumbers: {\n      description: 'These are the Number fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_NUMBER_FIELD_INPUT)),\n    },\n    addBooleans: {\n      description: 'These are the Boolean fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_BOOLEAN_FIELD_INPUT)),\n    },\n    addArrays: {\n      description: 'These are the Array fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_ARRAY_FIELD_INPUT)),\n    },\n    addObjects: {\n      description: 'These are the Object fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_OBJECT_FIELD_INPUT)),\n    },\n    addDates: {\n      description: 'These are the Date fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_DATE_FIELD_INPUT)),\n    },\n    addFiles: {\n      description: 'These are the File fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_FILE_FIELD_INPUT)),\n    },\n    addGeoPoint: {\n      description:\n        'This is the Geo Point field to be added to the class schema. Currently it is supported only one GeoPoint field per Class.',\n      type: SCHEMA_GEO_POINT_FIELD_INPUT,\n    },\n    addPolygons: {\n      description: 'These are the Polygon fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_POLYGON_FIELD_INPUT)),\n    },\n    addBytes: {\n      description: 'These are the Bytes fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_BYTES_FIELD_INPUT)),\n    },\n    addPointers: {\n      description: 'These are the Pointer fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_POINTER_FIELD_INPUT)),\n    },\n    addRelations: {\n      description: 'These are the Relation fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_RELATION_FIELD_INPUT)),\n    },\n    remove: {\n      description: 'These are the fields to be removed from the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_FIELD_INPUT)),\n    },\n  },\n});\n\nconst CLASS_NAME_ATT = {\n  description: 'This is the name of the object class.',\n  type: new GraphQLNonNull(GraphQLString),\n};\n\nconst CLASS = new GraphQLObjectType({\n  name: 'Class',\n  description: `The Class type is used to return the information about an object class.`,\n  fields: {\n    name: CLASS_NAME_ATT,\n    schemaFields: {\n      description: \"These are the schema's fields of the object class.\",\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(SCHEMA_FIELD))),\n    },\n  },\n});\n\nconst load = parseGraphQLSchema => {\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_STRING_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_STRING_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_NUMBER_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_NUMBER_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BOOLEAN_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BOOLEAN_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_ARRAY_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_ARRAY_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_OBJECT_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_OBJECT_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_DATE_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_DATE_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FILE_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FILE_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_GEO_POINT_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_GEO_POINT_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POLYGON_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POLYGON_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BYTES_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BYTES_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POINTER_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POINTER_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_RELATION_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_RELATION_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_ACL_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FIELDS_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(CLASS, true);\n};\n\nexport {\n  SCHEMA_FIELD_NAME_ATT,\n  SCHEMA_FIELD_INPUT,\n  SCHEMA_STRING_FIELD_INPUT,\n  SCHEMA_STRING_FIELD,\n  SCHEMA_NUMBER_FIELD_INPUT,\n  SCHEMA_NUMBER_FIELD,\n  SCHEMA_BOOLEAN_FIELD_INPUT,\n  SCHEMA_BOOLEAN_FIELD,\n  SCHEMA_ARRAY_FIELD_INPUT,\n  SCHEMA_ARRAY_FIELD,\n  SCHEMA_OBJECT_FIELD_INPUT,\n  SCHEMA_OBJECT_FIELD,\n  SCHEMA_DATE_FIELD_INPUT,\n  SCHEMA_DATE_FIELD,\n  SCHEMA_FILE_FIELD_INPUT,\n  SCHEMA_FILE_FIELD,\n  SCHEMA_GEO_POINT_FIELD_INPUT,\n  SCHEMA_GEO_POINT_FIELD,\n  SCHEMA_POLYGON_FIELD_INPUT,\n  SCHEMA_POLYGON_FIELD,\n  SCHEMA_BYTES_FIELD_INPUT,\n  SCHEMA_BYTES_FIELD,\n  TARGET_CLASS_ATT,\n  SCHEMA_POINTER_FIELD_INPUT,\n  SCHEMA_POINTER_FIELD,\n  SCHEMA_RELATION_FIELD_INPUT,\n  SCHEMA_RELATION_FIELD,\n  SCHEMA_ACL_FIELD,\n  SCHEMA_FIELDS_INPUT,\n  CLASS_NAME_ATT,\n  CLASS,\n  load,\n};\n"],"file":"schemaTypes.js"}