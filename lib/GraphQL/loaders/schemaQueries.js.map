{"version":3,"sources":["../../../src/GraphQL/loaders/schemaQueries.js"],"names":["getClass","name","schema","getOneSchema","e","undefined","Parse","Error","INVALID_CLASS_NAME","INTERNAL_SERVER_ERROR","load","parseGraphQLSchema","addGraphQLQuery","description","args","schemaTypes","CLASS_NAME_ATT","type","GraphQLNonNull","CLASS","resolve","_source","context","config","auth","database","loadSchema","clearCache","parseClass","className","schemaFields","fields","handleError","GraphQLList","_args","getAllClasses","map"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\nimport { GraphQLNonNull, GraphQLList } from 'graphql';\nimport { transformToGraphQL } from '../transformers/schemaFields';\nimport * as schemaTypes from './schemaTypes';\nimport { enforceMasterKeyAccess } from '../parseGraphQLUtils';\n\nconst getClass = async (name, schema) => {\n  try {\n    return await schema.getOneSchema(name, true);\n  } catch (e) {\n    if (e === undefined) {\n      throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME, `Class ${name} does not exist.`);\n    } else {\n      throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Database adapter error.');\n    }\n  }\n};\n\nconst load = parseGraphQLSchema => {\n  parseGraphQLSchema.addGraphQLQuery(\n    'class',\n    {\n      description: 'The class query can be used to retrieve an existing object class.',\n      args: {\n        name: schemaTypes.CLASS_NAME_ATT,\n      },\n      type: new GraphQLNonNull(schemaTypes.CLASS),\n      resolve: async (_source, args, context) => {\n        try {\n          const { name } = args;\n          const { config, auth } = context;\n\n          enforceMasterKeyAccess(auth);\n\n          const schema = await config.database.loadSchema({ clearCache: true });\n          const parseClass = await getClass(name, schema);\n          return {\n            name: parseClass.className,\n            schemaFields: transformToGraphQL(parseClass.fields),\n          };\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    },\n    true,\n    true\n  );\n\n  parseGraphQLSchema.addGraphQLQuery(\n    'classes',\n    {\n      description: 'The classes query can be used to retrieve the existing object classes.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(schemaTypes.CLASS))),\n      resolve: async (_source, _args, context) => {\n        try {\n          const { config, auth } = context;\n\n          enforceMasterKeyAccess(auth);\n\n          const schema = await config.database.loadSchema({ clearCache: true });\n          return (await schema.getAllClasses(true)).map(parseClass => ({\n            name: parseClass.className,\n            schemaFields: transformToGraphQL(parseClass.fields),\n          }));\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    },\n    true,\n    true\n  );\n};\n\nexport { getClass, load };\n"],"file":"schemaQueries.js"}