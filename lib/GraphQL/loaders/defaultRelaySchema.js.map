{"version":3,"sources":["../../../src/GraphQL/loaders/defaultRelaySchema.js"],"names":["GLOBAL_ID_ATT","description","type","defaultGraphQLTypes","OBJECT_ID","load","parseGraphQLSchema","nodeInterface","nodeField","globalId","context","queryInfo","id","config","auth","info","selectedFields","keys","include","className","objectsQueries","getObject","undefined","parseClasses","e","handleError","obj","parseClassTypes","classGraphQLOutputType","addGraphQLType","relayNodeInterface","addGraphQLQuery"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,wBADO;AAEpBC,EAAAA,IAAI,EAAEC,mBAAmB,CAACC;AAFN,CAAtB;;;AAKA,MAAMC,IAAI,GAAGC,kBAAkB,IAAI;AACjC,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA+B,mCACnC,OAAOC,QAAP,EAAiBC,OAAjB,EAA0BC,SAA1B,KAAwC;AACtC,QAAI;AACF,YAAM;AAAET,QAAAA,IAAF;AAAQU,QAAAA;AAAR,UAAe,gCAAaH,QAAb,CAArB;AACA,YAAM;AAAEI,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,UAAyBL,OAA/B;AACA,YAAMM,cAAc,GAAG,gCAAcL,SAAd,CAAvB;AAEA,YAAM;AAAEM,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoB,4CAAsBF,cAAtB,CAA1B;AAEA;AACEG,QAAAA,SAAS,EAAEjB;AADb,SAEM,MAAMkB,cAAc,CAACC,SAAf,CACRnB,IADQ,EAERU,EAFQ,EAGRK,IAHQ,EAIRC,OAJQ,EAKRI,SALQ,EAMRA,SANQ,EAORT,MAPQ,EAQRC,IARQ,EASRC,IATQ,EAURT,kBAAkB,CAACiB,YAVX,CAFZ;AAeD,KAtBD,CAsBE,OAAOC,CAAP,EAAU;AACVlB,MAAAA,kBAAkB,CAACmB,WAAnB,CAA+BD,CAA/B;AACD;AACF,GA3BkC,EA4BnCE,GAAG,IAAI;AACL,WAAOpB,kBAAkB,CAACqB,eAAnB,CAAmCD,GAAG,CAACP,SAAvC,EAAkDS,sBAAzD;AACD,GA9BkC,CAArC;AAiCAtB,EAAAA,kBAAkB,CAACuB,cAAnB,CAAkCtB,aAAlC,EAAiD,IAAjD;AACAD,EAAAA,kBAAkB,CAACwB,kBAAnB,GAAwCvB,aAAxC;AACAD,EAAAA,kBAAkB,CAACyB,eAAnB,CAAmC,MAAnC,EAA2CvB,SAA3C,EAAsD,IAAtD;AACD,CArCD","sourcesContent":["import { nodeDefinitions, fromGlobalId } from 'graphql-relay';\nimport getFieldNames from 'graphql-list-fields';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\nimport * as objectsQueries from '../helpers/objectsQueries';\nimport { extractKeysAndInclude } from './parseClassTypes';\n\nconst GLOBAL_ID_ATT = {\n  description: 'This is the global id.',\n  type: defaultGraphQLTypes.OBJECT_ID,\n};\n\nconst load = parseGraphQLSchema => {\n  const { nodeInterface, nodeField } = nodeDefinitions(\n    async (globalId, context, queryInfo) => {\n      try {\n        const { type, id } = fromGlobalId(globalId);\n        const { config, auth, info } = context;\n        const selectedFields = getFieldNames(queryInfo);\n\n        const { keys, include } = extractKeysAndInclude(selectedFields);\n\n        return {\n          className: type,\n          ...(await objectsQueries.getObject(\n            type,\n            id,\n            keys,\n            include,\n            undefined,\n            undefined,\n            config,\n            auth,\n            info,\n            parseGraphQLSchema.parseClasses\n          )),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n    obj => {\n      return parseGraphQLSchema.parseClassTypes[obj.className].classGraphQLOutputType;\n    }\n  );\n\n  parseGraphQLSchema.addGraphQLType(nodeInterface, true);\n  parseGraphQLSchema.relayNodeInterface = nodeInterface;\n  parseGraphQLSchema.addGraphQLQuery('node', nodeField, true);\n};\n\nexport { GLOBAL_ID_ATT, load };\n"],"file":"defaultRelaySchema.js"}