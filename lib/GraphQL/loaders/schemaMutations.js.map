{"version":3,"sources":["../../../src/GraphQL/loaders/schemaMutations.js"],"names":["load","parseGraphQLSchema","createClassMutation","name","description","inputFields","schemaTypes","CLASS_NAME_ATT","schemaFields","type","SCHEMA_FIELDS_INPUT","outputFields","class","GraphQLNonNull","CLASS","mutateAndGetPayload","args","context","config","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","schema","database","loadSchema","clearCache","parseClass","addClassIfNotExists","className","fields","e","handleError","addGraphQLType","input","ofType","addGraphQLMutation","updateClassMutation","existingParseClass","updateClass","undefined","deleteClassMutation","deleteSchema"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\nimport { GraphQLNonNull } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\nimport * as schemaTypes from './schemaTypes';\nimport { transformToParse, transformToGraphQL } from '../transformers/schemaFields';\nimport { enforceMasterKeyAccess } from '../parseGraphQLUtils';\nimport { getClass } from './schemaQueries';\n\nconst load = parseGraphQLSchema => {\n  const createClassMutation = mutationWithClientMutationId({\n    name: 'CreateClass',\n    description:\n      'The createClass mutation can be used to create the schema for a new object class.',\n    inputFields: {\n      name: schemaTypes.CLASS_NAME_ATT,\n      schemaFields: {\n        description: \"These are the schema's fields of the object class.\",\n        type: schemaTypes.SCHEMA_FIELDS_INPUT,\n      },\n    },\n    outputFields: {\n      class: {\n        description: 'This is the created class.',\n        type: new GraphQLNonNull(schemaTypes.CLASS),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { name, schemaFields } = args;\n        const { config, auth } = context;\n\n        enforceMasterKeyAccess(auth);\n\n        if (auth.isReadOnly) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            \"read-only masterKey isn't allowed to create a schema.\"\n          );\n        }\n\n        const schema = await config.database.loadSchema({ clearCache: true });\n        const parseClass = await schema.addClassIfNotExists(name, transformToParse(schemaFields));\n        return {\n          class: {\n            name: parseClass.className,\n            schemaFields: transformToGraphQL(parseClass.fields),\n          },\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(createClassMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(createClassMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('createClass', createClassMutation, true, true);\n\n  const updateClassMutation = mutationWithClientMutationId({\n    name: 'UpdateClass',\n    description:\n      'The updateClass mutation can be used to update the schema for an existing object class.',\n    inputFields: {\n      name: schemaTypes.CLASS_NAME_ATT,\n      schemaFields: {\n        description: \"These are the schema's fields of the object class.\",\n        type: schemaTypes.SCHEMA_FIELDS_INPUT,\n      },\n    },\n    outputFields: {\n      class: {\n        description: 'This is the updated class.',\n        type: new GraphQLNonNull(schemaTypes.CLASS),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { name, schemaFields } = args;\n        const { config, auth } = context;\n\n        enforceMasterKeyAccess(auth);\n\n        if (auth.isReadOnly) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            \"read-only masterKey isn't allowed to update a schema.\"\n          );\n        }\n\n        const schema = await config.database.loadSchema({ clearCache: true });\n        const existingParseClass = await getClass(name, schema);\n        const parseClass = await schema.updateClass(\n          name,\n          transformToParse(schemaFields, existingParseClass.fields),\n          undefined,\n          undefined,\n          config.database\n        );\n        return {\n          class: {\n            name: parseClass.className,\n            schemaFields: transformToGraphQL(parseClass.fields),\n          },\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(updateClassMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(updateClassMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('updateClass', updateClassMutation, true, true);\n\n  const deleteClassMutation = mutationWithClientMutationId({\n    name: 'DeleteClass',\n    description: 'The deleteClass mutation can be used to delete an existing object class.',\n    inputFields: {\n      name: schemaTypes.CLASS_NAME_ATT,\n    },\n    outputFields: {\n      class: {\n        description: 'This is the deleted class.',\n        type: new GraphQLNonNull(schemaTypes.CLASS),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { name } = args;\n        const { config, auth } = context;\n\n        enforceMasterKeyAccess(auth);\n\n        if (auth.isReadOnly) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            \"read-only masterKey isn't allowed to delete a schema.\"\n          );\n        }\n\n        const schema = await config.database.loadSchema({ clearCache: true });\n        const existingParseClass = await getClass(name, schema);\n        await config.database.deleteSchema(name);\n        return {\n          class: {\n            name: existingParseClass.className,\n            schemaFields: transformToGraphQL(existingParseClass.fields),\n          },\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(deleteClassMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(deleteClassMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('deleteClass', deleteClassMutation, true, true);\n};\n\nexport { load };\n"],"file":"schemaMutations.js"}