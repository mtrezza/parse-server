{"version":3,"sources":["../../../src/GraphQL/loaders/parseClassMutations.js"],"names":["getOnlyRequiredFields","updatedFields","selectedFieldsString","includedFieldsString","nativeObjectFields","includedFields","split","selectedFields","missingFields","filter","field","includes","join","length","needGet","keys","load","parseGraphQLSchema","parseClass","parseClassConfig","className","graphQLClassName","getGraphQLQueryName","charAt","toLowerCase","slice","create","isCreateEnabled","update","isUpdateEnabled","destroy","isDestroyEnabled","createAlias","updateAlias","destroyAlias","classGraphQLCreateType","classGraphQLUpdateType","classGraphQLOutputType","parseClassTypes","createGraphQLMutationName","createGraphQLMutation","name","description","inputFields","fields","type","defaultGraphQLTypes","OBJECT","outputFields","GraphQLNonNull","mutateAndGetPayload","args","context","mutationInfo","config","auth","info","parseFields","req","createdObject","objectsMutations","createObject","startsWith","map","replace","include","requiredKeys","needToGetAllKeys","objectsQueries","parseClasses","optimizedObject","getObject","objectId","undefined","updatedAt","createdAt","e","handleError","addGraphQLType","input","ofType","addGraphQLMutation","updateGraphQLMutationName","updateGraphQLMutation","id","GLOBAL_OR_OBJECT_ID_ATT","globalIdObject","updatedObject","updateObject","deleteGraphQLMutationName","deleteGraphQLMutation","key","deleteObject"],"mappings":"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","sourcesContent":["import { GraphQLNonNull } from 'graphql';\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay';\nimport getFieldNames from 'graphql-list-fields';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\nimport { extractKeysAndInclude, getParseClassMutationConfig } from '../parseGraphQLUtils';\nimport * as objectsMutations from '../helpers/objectsMutations';\nimport * as objectsQueries from '../helpers/objectsQueries';\nimport { ParseGraphQLClassConfig } from '../../Controllers/ParseGraphQLController';\nimport { transformClassNameToGraphQL } from '../transformers/className';\nimport { transformTypes } from '../transformers/mutation';\n\nconst getOnlyRequiredFields = (\n  updatedFields,\n  selectedFieldsString,\n  includedFieldsString,\n  nativeObjectFields\n) => {\n  const includedFields = includedFieldsString ? includedFieldsString.split(',') : [];\n  const selectedFields = selectedFieldsString ? selectedFieldsString.split(',') : [];\n  const missingFields = selectedFields\n    .filter(field => !nativeObjectFields.includes(field) || includedFields.includes(field))\n    .join(',');\n  if (!missingFields.length) {\n    return { needGet: false, keys: '' };\n  } else {\n    return { needGet: true, keys: missingFields };\n  }\n};\n\nconst load = function (parseGraphQLSchema, parseClass, parseClassConfig: ?ParseGraphQLClassConfig) {\n  const className = parseClass.className;\n  const graphQLClassName = transformClassNameToGraphQL(className);\n  const getGraphQLQueryName = graphQLClassName.charAt(0).toLowerCase() + graphQLClassName.slice(1);\n\n  const {\n    create: isCreateEnabled = true,\n    update: isUpdateEnabled = true,\n    destroy: isDestroyEnabled = true,\n    createAlias: createAlias = '',\n    updateAlias: updateAlias = '',\n    destroyAlias: destroyAlias = '',\n  } = getParseClassMutationConfig(parseClassConfig);\n\n  const {\n    classGraphQLCreateType,\n    classGraphQLUpdateType,\n    classGraphQLOutputType,\n  } = parseGraphQLSchema.parseClassTypes[className];\n\n  if (isCreateEnabled) {\n    const createGraphQLMutationName = createAlias || `create${graphQLClassName}`;\n    const createGraphQLMutation = mutationWithClientMutationId({\n      name: `Create${graphQLClassName}`,\n      description: `The ${createGraphQLMutationName} mutation can be used to create a new object of the ${graphQLClassName} class.`,\n      inputFields: {\n        fields: {\n          description: 'These are the fields that will be used to create the new object.',\n          type: classGraphQLCreateType || defaultGraphQLTypes.OBJECT,\n        },\n      },\n      outputFields: {\n        [getGraphQLQueryName]: {\n          description: 'This is the created object.',\n          type: new GraphQLNonNull(classGraphQLOutputType || defaultGraphQLTypes.OBJECT),\n        },\n      },\n      mutateAndGetPayload: async (args, context, mutationInfo) => {\n        try {\n          let { fields } = args;\n          if (!fields) fields = {};\n          const { config, auth, info } = context;\n\n          const parseFields = await transformTypes('create', fields, {\n            className,\n            parseGraphQLSchema,\n            req: { config, auth, info },\n          });\n\n          const createdObject = await objectsMutations.createObject(\n            className,\n            parseFields,\n            config,\n            auth,\n            info\n          );\n          const selectedFields = getFieldNames(mutationInfo)\n            .filter(field => field.startsWith(`${getGraphQLQueryName}.`))\n            .map(field => field.replace(`${getGraphQLQueryName}.`, ''));\n          const { keys, include } = extractKeysAndInclude(selectedFields);\n          const { keys: requiredKeys, needGet } = getOnlyRequiredFields(fields, keys, include, [\n            'id',\n            'objectId',\n            'createdAt',\n            'updatedAt',\n          ]);\n          const needToGetAllKeys = objectsQueries.needToGetAllKeys(\n            parseClass.fields,\n            keys,\n            parseGraphQLSchema.parseClasses\n          );\n          let optimizedObject = {};\n          if (needGet && !needToGetAllKeys) {\n            optimizedObject = await objectsQueries.getObject(\n              className,\n              createdObject.objectId,\n              requiredKeys,\n              include,\n              undefined,\n              undefined,\n              config,\n              auth,\n              info,\n              parseGraphQLSchema.parseClasses\n            );\n          } else if (needToGetAllKeys) {\n            optimizedObject = await objectsQueries.getObject(\n              className,\n              createdObject.objectId,\n              undefined,\n              include,\n              undefined,\n              undefined,\n              config,\n              auth,\n              info,\n              parseGraphQLSchema.parseClasses\n            );\n          }\n          return {\n            [getGraphQLQueryName]: {\n              ...createdObject,\n              updatedAt: createdObject.createdAt,\n              ...parseFields,\n              ...optimizedObject,\n            },\n          };\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    });\n\n    if (\n      parseGraphQLSchema.addGraphQLType(createGraphQLMutation.args.input.type.ofType) &&\n      parseGraphQLSchema.addGraphQLType(createGraphQLMutation.type)\n    ) {\n      parseGraphQLSchema.addGraphQLMutation(createGraphQLMutationName, createGraphQLMutation);\n    }\n  }\n\n  if (isUpdateEnabled) {\n    const updateGraphQLMutationName = updateAlias || `update${graphQLClassName}`;\n    const updateGraphQLMutation = mutationWithClientMutationId({\n      name: `Update${graphQLClassName}`,\n      description: `The ${updateGraphQLMutationName} mutation can be used to update an object of the ${graphQLClassName} class.`,\n      inputFields: {\n        id: defaultGraphQLTypes.GLOBAL_OR_OBJECT_ID_ATT,\n        fields: {\n          description: 'These are the fields that will be used to update the object.',\n          type: classGraphQLUpdateType || defaultGraphQLTypes.OBJECT,\n        },\n      },\n      outputFields: {\n        [getGraphQLQueryName]: {\n          description: 'This is the updated object.',\n          type: new GraphQLNonNull(classGraphQLOutputType || defaultGraphQLTypes.OBJECT),\n        },\n      },\n      mutateAndGetPayload: async (args, context, mutationInfo) => {\n        try {\n          let { id, fields } = args;\n          if (!fields) fields = {};\n          const { config, auth, info } = context;\n\n          const globalIdObject = fromGlobalId(id);\n\n          if (globalIdObject.type === className) {\n            id = globalIdObject.id;\n          }\n\n          const parseFields = await transformTypes('update', fields, {\n            className,\n            parseGraphQLSchema,\n            req: { config, auth, info },\n          });\n\n          const updatedObject = await objectsMutations.updateObject(\n            className,\n            id,\n            parseFields,\n            config,\n            auth,\n            info\n          );\n\n          const selectedFields = getFieldNames(mutationInfo)\n            .filter(field => field.startsWith(`${getGraphQLQueryName}.`))\n            .map(field => field.replace(`${getGraphQLQueryName}.`, ''));\n          const { keys, include } = extractKeysAndInclude(selectedFields);\n          const { keys: requiredKeys, needGet } = getOnlyRequiredFields(fields, keys, include, [\n            'id',\n            'objectId',\n            'updatedAt',\n          ]);\n          const needToGetAllKeys = objectsQueries.needToGetAllKeys(\n            parseClass.fields,\n            keys,\n            parseGraphQLSchema.parseClasses\n          );\n          let optimizedObject = {};\n          if (needGet && !needToGetAllKeys) {\n            optimizedObject = await objectsQueries.getObject(\n              className,\n              id,\n              requiredKeys,\n              include,\n              undefined,\n              undefined,\n              config,\n              auth,\n              info,\n              parseGraphQLSchema.parseClasses\n            );\n          } else if (needToGetAllKeys) {\n            optimizedObject = await objectsQueries.getObject(\n              className,\n              id,\n              undefined,\n              include,\n              undefined,\n              undefined,\n              config,\n              auth,\n              info,\n              parseGraphQLSchema.parseClasses\n            );\n          }\n          return {\n            [getGraphQLQueryName]: {\n              objectId: id,\n              ...updatedObject,\n              ...parseFields,\n              ...optimizedObject,\n            },\n          };\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    });\n\n    if (\n      parseGraphQLSchema.addGraphQLType(updateGraphQLMutation.args.input.type.ofType) &&\n      parseGraphQLSchema.addGraphQLType(updateGraphQLMutation.type)\n    ) {\n      parseGraphQLSchema.addGraphQLMutation(updateGraphQLMutationName, updateGraphQLMutation);\n    }\n  }\n\n  if (isDestroyEnabled) {\n    const deleteGraphQLMutationName = destroyAlias || `delete${graphQLClassName}`;\n    const deleteGraphQLMutation = mutationWithClientMutationId({\n      name: `Delete${graphQLClassName}`,\n      description: `The ${deleteGraphQLMutationName} mutation can be used to delete an object of the ${graphQLClassName} class.`,\n      inputFields: {\n        id: defaultGraphQLTypes.GLOBAL_OR_OBJECT_ID_ATT,\n      },\n      outputFields: {\n        [getGraphQLQueryName]: {\n          description: 'This is the deleted object.',\n          type: new GraphQLNonNull(classGraphQLOutputType || defaultGraphQLTypes.OBJECT),\n        },\n      },\n      mutateAndGetPayload: async (args, context, mutationInfo) => {\n        try {\n          let { id } = args;\n          const { config, auth, info } = context;\n\n          const globalIdObject = fromGlobalId(id);\n\n          if (globalIdObject.type === className) {\n            id = globalIdObject.id;\n          }\n\n          const selectedFields = getFieldNames(mutationInfo)\n            .filter(field => field.startsWith(`${getGraphQLQueryName}.`))\n            .map(field => field.replace(`${getGraphQLQueryName}.`, ''));\n          const { keys, include } = extractKeysAndInclude(selectedFields);\n          let optimizedObject = {};\n          if (keys && keys.split(',').filter(key => !['id', 'objectId'].includes(key)).length > 0) {\n            optimizedObject = await objectsQueries.getObject(\n              className,\n              id,\n              keys,\n              include,\n              undefined,\n              undefined,\n              config,\n              auth,\n              info,\n              parseGraphQLSchema.parseClasses\n            );\n          }\n          await objectsMutations.deleteObject(className, id, config, auth, info);\n          return {\n            [getGraphQLQueryName]: {\n              objectId: id,\n              ...optimizedObject,\n            },\n          };\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    });\n\n    if (\n      parseGraphQLSchema.addGraphQLType(deleteGraphQLMutation.args.input.type.ofType) &&\n      parseGraphQLSchema.addGraphQLType(deleteGraphQLMutation.type)\n    ) {\n      parseGraphQLSchema.addGraphQLMutation(deleteGraphQLMutationName, deleteGraphQLMutation);\n    }\n  }\n};\n\nexport { load };\n"],"file":"parseClassMutations.js"}