{"version":3,"sources":["../../../src/GraphQL/loaders/parseClassQueries.js"],"names":["getParseClassQueryConfig","parseClassConfig","query","getQuery","parseClass","_source","args","context","queryInfo","parseClasses","id","options","readPreference","includeReadPreference","config","auth","info","selectedFields","globalIdObject","type","className","keys","include","objectsQueries","getObject","load","parseGraphQLSchema","graphQLClassName","get","isGetEnabled","find","isFindEnabled","getAlias","findAlias","classGraphQLOutputType","classGraphQLFindArgs","classGraphQLFindResultType","parseClassTypes","lowerCaseClassName","charAt","toLowerCase","slice","getGraphQLQueryName","addGraphQLQuery","description","defaultGraphQLTypes","GLOBAL_OR_OBJECT_ID_ATT","READ_OPTIONS_ATT","GraphQLNonNull","OBJECT","resolve","e","handleError","findGraphQLQueryName","where","order","skip","first","after","last","before","subqueryReadPreference","filter","field","startsWith","map","replace","parseOrder","join","findObjects"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,UAAUC,gBAAV,EAAsD;AACrF,SAAQA,gBAAgB,IAAIA,gBAAgB,CAACC,KAAtC,IAAgD,EAAvD;AACD,CAFD;;AAIA,MAAMC,QAAQ,GAAG,OAAOC,UAAP,EAAmBC,OAAnB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsDC,YAAtD,KAAuE;AACtF,MAAI;AAAEC,IAAAA;AAAF,MAASJ,IAAb;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAcL,IAApB;AACA,QAAM;AAAEM,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAA4CF,OAAO,IAAI,EAA7D;AACA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAAyBT,OAA/B;AACA,QAAMU,cAAc,GAAG,gCAAcT,SAAd,CAAvB;AAEA,QAAMU,cAAc,GAAG,gCAAaR,EAAb,CAAvB;;AAEA,MAAIQ,cAAc,CAACC,IAAf,KAAwBf,UAAU,CAACgB,SAAvC,EAAkD;AAChDV,IAAAA,EAAE,GAAGQ,cAAc,CAACR,EAApB;AACD;;AAED,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoB,8CAAsBL,cAAtB,CAA1B;AAEA,SAAO,MAAMM,cAAc,CAACC,SAAf,CACXpB,UAAU,CAACgB,SADA,EAEXV,EAFW,EAGXW,IAHW,EAIXC,OAJW,EAKXV,cALW,EAMXC,qBANW,EAOXC,MAPW,EAQXC,IARW,EASXC,IATW,EAUXP,YAVW,CAAb;AAYD,CA3BD;;AA6BA,MAAMgB,IAAI,GAAG,UAAUC,kBAAV,EAA8BtB,UAA9B,EAA0CH,gBAA1C,EAAsF;AACjG,QAAMmB,SAAS,GAAGhB,UAAU,CAACgB,SAA7B;AACA,QAAMO,gBAAgB,GAAG,4CAA4BP,SAA5B,CAAzB;AACA,QAAM;AACJQ,IAAAA,GAAG,EAAEC,YAAY,GAAG,IADhB;AAEJC,IAAAA,IAAI,EAAEC,aAAa,GAAG,IAFlB;AAGMC,IAAAA,QAAQ,GAAG,EAHjB;AAIOC,IAAAA,SAAS,GAAG;AAJnB,MAKFjC,wBAAwB,CAACC,gBAAD,CAL5B;AAOA,QAAM;AACJiC,IAAAA,sBADI;AAEJC,IAAAA,oBAFI;AAGJC,IAAAA;AAHI,MAIFV,kBAAkB,CAACW,eAAnB,CAAmCjB,SAAnC,CAJJ;;AAMA,MAAIS,YAAJ,EAAkB;AAChB,UAAMS,kBAAkB,GAAGX,gBAAgB,CAACY,MAAjB,CAAwB,CAAxB,EAA2BC,WAA3B,KAA2Cb,gBAAgB,CAACc,KAAjB,CAAuB,CAAvB,CAAtE;AAEA,UAAMC,mBAAmB,GAAGV,QAAQ,IAAIM,kBAAxC;AAEAZ,IAAAA,kBAAkB,CAACiB,eAAnB,CAAmCD,mBAAnC,EAAwD;AACtDE,MAAAA,WAAW,EAAG,OAAMF,mBAAoB,8CAA6Cf,gBAAiB,mBADhD;AAEtDrB,MAAAA,IAAI,EAAE;AACJI,QAAAA,EAAE,EAAEmC,mBAAmB,CAACC,uBADpB;AAEJnC,QAAAA,OAAO,EAAEkC,mBAAmB,CAACE;AAFzB,OAFgD;AAMtD5B,MAAAA,IAAI,EAAE,IAAI6B,uBAAJ,CAAmBd,sBAAsB,IAAIW,mBAAmB,CAACI,MAAjE,CANgD;;AAOtD,YAAMC,OAAN,CAAc7C,OAAd,EAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AAC/C,YAAI;AACF,iBAAO,MAAML,QAAQ,CACnBC,UADmB,EAEnBC,OAFmB,EAGnBC,IAHmB,EAInBC,OAJmB,EAKnBC,SALmB,EAMnBkB,kBAAkB,CAACjB,YANA,CAArB;AAQD,SATD,CASE,OAAO0C,CAAP,EAAU;AACVzB,UAAAA,kBAAkB,CAAC0B,WAAnB,CAA+BD,CAA/B;AACD;AACF;;AApBqD,KAAxD;AAsBD;;AAED,MAAIpB,aAAJ,EAAmB;AACjB,UAAMO,kBAAkB,GAAGX,gBAAgB,CAACY,MAAjB,CAAwB,CAAxB,EAA2BC,WAA3B,KAA2Cb,gBAAgB,CAACc,KAAjB,CAAuB,CAAvB,CAAtE;AAEA,UAAMY,oBAAoB,GAAGpB,SAAS,IAAI,wBAAUK,kBAAV,CAA1C;AAEAZ,IAAAA,kBAAkB,CAACiB,eAAnB,CAAmCU,oBAAnC,EAAyD;AACvDT,MAAAA,WAAW,EAAG,OAAMS,oBAAqB,6CAA4C1B,gBAAiB,SAD/C;AAEvDrB,MAAAA,IAAI,EAAE6B,oBAFiD;AAGvDhB,MAAAA,IAAI,EAAE,IAAI6B,uBAAJ,CAAmBZ,0BAA0B,IAAIS,mBAAmB,CAACI,MAArE,CAHiD;;AAIvD,YAAMC,OAAN,CAAc7C,OAAd,EAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;AAC/C,YAAI;AACF,gBAAM;AAAE8C,YAAAA,KAAF;AAASC,YAAAA,KAAT;AAAgBC,YAAAA,IAAhB;AAAsBC,YAAAA,KAAtB;AAA6BC,YAAAA,KAA7B;AAAoCC,YAAAA,IAApC;AAA0CC,YAAAA,MAA1C;AAAkDjD,YAAAA;AAAlD,cAA8DL,IAApE;AACA,gBAAM;AAAEM,YAAAA,cAAF;AAAkBC,YAAAA,qBAAlB;AAAyCgD,YAAAA;AAAzC,cAAoElD,OAAO,IAAI,EAArF;AACA,gBAAM;AAAEG,YAAAA,MAAF;AAAUC,YAAAA,IAAV;AAAgBC,YAAAA;AAAhB,cAAyBT,OAA/B;AACA,gBAAMU,cAAc,GAAG,gCAAcT,SAAd,CAAvB;AAEA,gBAAM;AAAEa,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAAoB,8CACxBL,cAAc,CACX6C,MADH,CACUC,KAAK,IAAIA,KAAK,CAACC,UAAN,CAAiB,aAAjB,CADnB,EAEGC,GAFH,CAEOF,KAAK,IAAIA,KAAK,CAACG,OAAN,CAAc,aAAd,EAA6B,EAA7B,CAFhB,CADwB,CAA1B;AAKA,gBAAMC,UAAU,GAAGZ,KAAK,IAAIA,KAAK,CAACa,IAAN,CAAW,GAAX,CAA5B;AAEA,iBAAO,MAAM7C,cAAc,CAAC8C,WAAf,CACXjD,SADW,EAEXkC,KAFW,EAGXa,UAHW,EAIXX,IAJW,EAKXC,KALW,EAMXC,KANW,EAOXC,IAPW,EAQXC,MARW,EASXvC,IATW,EAUXC,OAVW,EAWX,KAXW,EAYXV,cAZW,EAaXC,qBAbW,EAcXgD,sBAdW,EAeX/C,MAfW,EAgBXC,IAhBW,EAiBXC,IAjBW,EAkBXC,cAlBW,EAmBXS,kBAAkB,CAACjB,YAnBR,CAAb;AAqBD,SAlCD,CAkCE,OAAO0C,CAAP,EAAU;AACVzB,UAAAA,kBAAkB,CAAC0B,WAAnB,CAA+BD,CAA/B;AACD;AACF;;AA1CsD,KAAzD;AA4CD;AACF,CA/FD","sourcesContent":["import { GraphQLNonNull } from 'graphql';\nimport { fromGlobalId } from 'graphql-relay';\nimport getFieldNames from 'graphql-list-fields';\nimport pluralize from 'pluralize';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\nimport * as objectsQueries from '../helpers/objectsQueries';\nimport { ParseGraphQLClassConfig } from '../../Controllers/ParseGraphQLController';\nimport { transformClassNameToGraphQL } from '../transformers/className';\nimport { extractKeysAndInclude } from '../parseGraphQLUtils';\n\nconst getParseClassQueryConfig = function (parseClassConfig: ?ParseGraphQLClassConfig) {\n  return (parseClassConfig && parseClassConfig.query) || {};\n};\n\nconst getQuery = async (parseClass, _source, args, context, queryInfo, parseClasses) => {\n  let { id } = args;\n  const { options } = args;\n  const { readPreference, includeReadPreference } = options || {};\n  const { config, auth, info } = context;\n  const selectedFields = getFieldNames(queryInfo);\n\n  const globalIdObject = fromGlobalId(id);\n\n  if (globalIdObject.type === parseClass.className) {\n    id = globalIdObject.id;\n  }\n\n  const { keys, include } = extractKeysAndInclude(selectedFields);\n\n  return await objectsQueries.getObject(\n    parseClass.className,\n    id,\n    keys,\n    include,\n    readPreference,\n    includeReadPreference,\n    config,\n    auth,\n    info,\n    parseClasses\n  );\n};\n\nconst load = function (parseGraphQLSchema, parseClass, parseClassConfig: ?ParseGraphQLClassConfig) {\n  const className = parseClass.className;\n  const graphQLClassName = transformClassNameToGraphQL(className);\n  const {\n    get: isGetEnabled = true,\n    find: isFindEnabled = true,\n    getAlias: getAlias = '',\n    findAlias: findAlias = '',\n  } = getParseClassQueryConfig(parseClassConfig);\n\n  const {\n    classGraphQLOutputType,\n    classGraphQLFindArgs,\n    classGraphQLFindResultType,\n  } = parseGraphQLSchema.parseClassTypes[className];\n\n  if (isGetEnabled) {\n    const lowerCaseClassName = graphQLClassName.charAt(0).toLowerCase() + graphQLClassName.slice(1);\n\n    const getGraphQLQueryName = getAlias || lowerCaseClassName;\n\n    parseGraphQLSchema.addGraphQLQuery(getGraphQLQueryName, {\n      description: `The ${getGraphQLQueryName} query can be used to get an object of the ${graphQLClassName} class by its id.`,\n      args: {\n        id: defaultGraphQLTypes.GLOBAL_OR_OBJECT_ID_ATT,\n        options: defaultGraphQLTypes.READ_OPTIONS_ATT,\n      },\n      type: new GraphQLNonNull(classGraphQLOutputType || defaultGraphQLTypes.OBJECT),\n      async resolve(_source, args, context, queryInfo) {\n        try {\n          return await getQuery(\n            parseClass,\n            _source,\n            args,\n            context,\n            queryInfo,\n            parseGraphQLSchema.parseClasses\n          );\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    });\n  }\n\n  if (isFindEnabled) {\n    const lowerCaseClassName = graphQLClassName.charAt(0).toLowerCase() + graphQLClassName.slice(1);\n\n    const findGraphQLQueryName = findAlias || pluralize(lowerCaseClassName);\n\n    parseGraphQLSchema.addGraphQLQuery(findGraphQLQueryName, {\n      description: `The ${findGraphQLQueryName} query can be used to find objects of the ${graphQLClassName} class.`,\n      args: classGraphQLFindArgs,\n      type: new GraphQLNonNull(classGraphQLFindResultType || defaultGraphQLTypes.OBJECT),\n      async resolve(_source, args, context, queryInfo) {\n        try {\n          const { where, order, skip, first, after, last, before, options } = args;\n          const { readPreference, includeReadPreference, subqueryReadPreference } = options || {};\n          const { config, auth, info } = context;\n          const selectedFields = getFieldNames(queryInfo);\n\n          const { keys, include } = extractKeysAndInclude(\n            selectedFields\n              .filter(field => field.startsWith('edges.node.'))\n              .map(field => field.replace('edges.node.', ''))\n          );\n          const parseOrder = order && order.join(',');\n\n          return await objectsQueries.findObjects(\n            className,\n            where,\n            parseOrder,\n            skip,\n            first,\n            after,\n            last,\n            before,\n            keys,\n            include,\n            false,\n            readPreference,\n            includeReadPreference,\n            subqueryReadPreference,\n            config,\n            auth,\n            info,\n            selectedFields,\n            parseGraphQLSchema.parseClasses\n          );\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    });\n  }\n};\n\nexport { load };\n"],"file":"parseClassQueries.js"}