{"version":3,"sources":["../../../src/GraphQL/loaders/functionsMutations.js"],"names":["load","parseGraphQLSchema","functionNames","length","cloudCodeFunctionEnum","addGraphQLType","GraphQLEnumType","name","description","values","reduce","functionName","value","callCloudCodeMutation","inputFields","type","GraphQLNonNull","params","defaultGraphQLTypes","OBJECT","outputFields","result","ANY","mutateAndGetPayload","args","context","config","auth","info","FunctionsRouter","handleCloudFunction","body","response","e","handleError","input","ofType","addGraphQLMutation"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,MAAMA,IAAI,GAAGC,kBAAkB,IAAI;AACjC,MAAIA,kBAAkB,CAACC,aAAnB,CAAiCC,MAAjC,GAA0C,CAA9C,EAAiD;AAC/C,UAAMC,qBAAqB,GAAGH,kBAAkB,CAACI,cAAnB,CAC5B,IAAIC,wBAAJ,CAAoB;AAClBC,MAAAA,IAAI,EAAE,mBADY;AAElBC,MAAAA,WAAW,EACT,wFAHgB;AAIlBC,MAAAA,MAAM,EAAER,kBAAkB,CAACC,aAAnB,CAAiCQ,MAAjC,CACN,CAACD,MAAD,EAASE,YAAT,qCACKF,MADL;AAEE,SAACE,YAAD,GAAgB;AAAEC,UAAAA,KAAK,EAAED;AAAT;AAFlB,QADM,EAKN,EALM;AAJU,KAApB,CAD4B,EAa5B,IAb4B,EAc5B,IAd4B,CAA9B;AAiBA,UAAME,qBAAqB,GAAG,gDAA6B;AACzDN,MAAAA,IAAI,EAAE,eADmD;AAEzDC,MAAAA,WAAW,EAAE,yEAF4C;AAGzDM,MAAAA,WAAW,EAAE;AACXH,QAAAA,YAAY,EAAE;AACZH,UAAAA,WAAW,EAAE,oCADD;AAEZO,UAAAA,IAAI,EAAE,IAAIC,uBAAJ,CAAmBZ,qBAAnB;AAFM,SADH;AAKXa,QAAAA,MAAM,EAAE;AACNT,UAAAA,WAAW,EAAE,oDADP;AAENO,UAAAA,IAAI,EAAEG,mBAAmB,CAACC;AAFpB;AALG,OAH4C;AAazDC,MAAAA,YAAY,EAAE;AACZC,QAAAA,MAAM,EAAE;AACNb,UAAAA,WAAW,EAAE,gEADP;AAENO,UAAAA,IAAI,EAAEG,mBAAmB,CAACI;AAFpB;AADI,OAb2C;AAmBzDC,MAAAA,mBAAmB,EAAE,OAAOC,IAAP,EAAaC,OAAb,KAAyB;AAC5C,YAAI;AACF,gBAAM;AAAEd,YAAAA,YAAF;AAAgBM,YAAAA;AAAhB,cAA2BO,IAAjC;AACA,gBAAM;AAAEE,YAAAA,MAAF;AAAUC,YAAAA,IAAV;AAAgBC,YAAAA;AAAhB,cAAyBH,OAA/B;AAEA,iBAAO;AACLJ,YAAAA,MAAM,EAAE,CACN,MAAMQ,iCAAgBC,mBAAhB,CAAoC;AACxCb,cAAAA,MAAM,EAAE;AACNN,gBAAAA;AADM,eADgC;AAIxCe,cAAAA,MAJwC;AAKxCC,cAAAA,IALwC;AAMxCC,cAAAA,IANwC;AAOxCG,cAAAA,IAAI,EAAEd;AAPkC,aAApC,CADA,EAUNe,QAVM,CAUGX;AAXN,WAAP;AAaD,SAjBD,CAiBE,OAAOY,CAAP,EAAU;AACVhC,UAAAA,kBAAkB,CAACiC,WAAnB,CAA+BD,CAA/B;AACD;AACF;AAxCwD,KAA7B,CAA9B;AA2CAhC,IAAAA,kBAAkB,CAACI,cAAnB,CAAkCQ,qBAAqB,CAACW,IAAtB,CAA2BW,KAA3B,CAAiCpB,IAAjC,CAAsCqB,MAAxE,EAAgF,IAAhF,EAAsF,IAAtF;AACAnC,IAAAA,kBAAkB,CAACI,cAAnB,CAAkCQ,qBAAqB,CAACE,IAAxD,EAA8D,IAA9D,EAAoE,IAApE;AACAd,IAAAA,kBAAkB,CAACoC,kBAAnB,CAAsC,eAAtC,EAAuDxB,qBAAvD,EAA8E,IAA9E,EAAoF,IAApF;AACD;AACF,CAlED","sourcesContent":["import { GraphQLNonNull, GraphQLEnumType } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\nimport { FunctionsRouter } from '../../Routers/FunctionsRouter';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\n\nconst load = parseGraphQLSchema => {\n  if (parseGraphQLSchema.functionNames.length > 0) {\n    const cloudCodeFunctionEnum = parseGraphQLSchema.addGraphQLType(\n      new GraphQLEnumType({\n        name: 'CloudCodeFunction',\n        description:\n          'The CloudCodeFunction enum type contains a list of all available cloud code functions.',\n        values: parseGraphQLSchema.functionNames.reduce(\n          (values, functionName) => ({\n            ...values,\n            [functionName]: { value: functionName },\n          }),\n          {}\n        ),\n      }),\n      true,\n      true\n    );\n\n    const callCloudCodeMutation = mutationWithClientMutationId({\n      name: 'CallCloudCode',\n      description: 'The callCloudCode mutation can be used to invoke a cloud code function.',\n      inputFields: {\n        functionName: {\n          description: 'This is the function to be called.',\n          type: new GraphQLNonNull(cloudCodeFunctionEnum),\n        },\n        params: {\n          description: 'These are the params to be passed to the function.',\n          type: defaultGraphQLTypes.OBJECT,\n        },\n      },\n      outputFields: {\n        result: {\n          description: 'This is the result value of the cloud code function execution.',\n          type: defaultGraphQLTypes.ANY,\n        },\n      },\n      mutateAndGetPayload: async (args, context) => {\n        try {\n          const { functionName, params } = args;\n          const { config, auth, info } = context;\n\n          return {\n            result: (\n              await FunctionsRouter.handleCloudFunction({\n                params: {\n                  functionName,\n                },\n                config,\n                auth,\n                info,\n                body: params,\n              })\n            ).response.result,\n          };\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    });\n\n    parseGraphQLSchema.addGraphQLType(callCloudCodeMutation.args.input.type.ofType, true, true);\n    parseGraphQLSchema.addGraphQLType(callCloudCodeMutation.type, true, true);\n    parseGraphQLSchema.addGraphQLMutation('callCloudCode', callCloudCodeMutation, true, true);\n  }\n};\n\nexport { load };\n"],"file":"functionsMutations.js"}