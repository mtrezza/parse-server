{"version":3,"sources":["../../src/GraphQL/parseGraphQLUtils.js"],"names":["enforceMasterKeyAccess","auth","isMaster","Parse","Error","OPERATION_FORBIDDEN","toGraphQLError","error","code","message","INTERNAL_SERVER_ERROR","ApolloError","extractKeysAndInclude","selectedFields","filter","field","includes","map","endsWith","substring","lastIndexOf","keys","undefined","include","length","Set","join","indexOf","getParseClassMutationConfig","parseClassConfig","mutation"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAEO,SAASA,sBAAT,CAAgCC,IAAhC,EAAsC;AAC3C,MAAI,CAACA,IAAI,CAACC,QAAV,EAAoB;AAClB,UAAM,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,mBAA5B,EAAiD,sCAAjD,CAAN;AACD;AACF;;AAEM,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,MAAIC,IAAJ,EAAUC,OAAV;;AACA,MAAIF,KAAK,YAAYJ,cAAMC,KAA3B,EAAkC;AAChCI,IAAAA,IAAI,GAAGD,KAAK,CAACC,IAAb;AACAC,IAAAA,OAAO,GAAGF,KAAK,CAACE,OAAhB;AACD,GAHD,MAGO;AACLD,IAAAA,IAAI,GAAGL,cAAMC,KAAN,CAAYM,qBAAnB;AACAD,IAAAA,OAAO,GAAG,uBAAV;AACD;;AACD,SAAO,IAAIE,6BAAJ,CAAgBF,OAAhB,EAAyBD,IAAzB,CAAP;AACD;;AAEM,MAAMI,qBAAqB,GAAGC,cAAc,IAAI;AACrDA,EAAAA,cAAc,GAAGA,cAAc,CAACC,MAAf,CAAsBC,KAAK,IAAI,CAACA,KAAK,CAACC,QAAN,CAAe,YAAf,CAAhC,CAAjB,CADqD,CAErD;;AACAH,EAAAA,cAAc,GAAGA,cAAc,CAACI,GAAf,CAAmBF,KAAK,IAAI;AAC3C,QAAIA,KAAK,KAAK,IAAd,EAAoB,OAAO,UAAP;AACpB,WAAOA,KAAK,CAACG,QAAN,CAAe,KAAf,IACF,GAAEH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBJ,KAAK,CAACK,WAAN,CAAkB,KAAlB,CAAnB,CAA6C,WAD7C,GAEHL,KAFJ;AAGD,GALgB,CAAjB;AAMA,MAAIM,IAAI,GAAGC,SAAX;AACA,MAAIC,OAAO,GAAGD,SAAd;;AAEA,MAAIT,cAAc,CAACW,MAAf,GAAwB,CAA5B,EAA+B;AAC7BH,IAAAA,IAAI,GAAG,CAAC,GAAG,IAAII,GAAJ,CAAQZ,cAAR,CAAJ,EAA6Ba,IAA7B,CAAkC,GAAlC,CAAP,CAD6B,CAE7B;AACA;;AACAH,IAAAA,OAAO,GAAGF,IAAV;AACD;;AAED,SAAO;AACL;AACA;AACA;AACAA,IAAAA,IAAI,EAAEA,IAAI,IAAIA,IAAI,CAACM,OAAL,CAAa,UAAb,MAA6B,CAAC,CAAtC,GAA0CN,IAA1C,GAAiDC,SAJlD;AAKLC,IAAAA;AALK,GAAP;AAOD,CA1BM;;;;AA4BA,MAAMK,2BAA2B,GAAG,UAAUC,gBAAV,EAA4B;AACrE,SAAQA,gBAAgB,IAAIA,gBAAgB,CAACC,QAAtC,IAAmD,EAA1D;AACD,CAFM","sourcesContent":["import Parse from 'parse/node';\nimport { ApolloError } from 'apollo-server-core';\n\nexport function enforceMasterKeyAccess(auth) {\n  if (!auth.isMaster) {\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'unauthorized: master key is required');\n  }\n}\n\nexport function toGraphQLError(error) {\n  let code, message;\n  if (error instanceof Parse.Error) {\n    code = error.code;\n    message = error.message;\n  } else {\n    code = Parse.Error.INTERNAL_SERVER_ERROR;\n    message = 'Internal server error';\n  }\n  return new ApolloError(message, code);\n}\n\nexport const extractKeysAndInclude = selectedFields => {\n  selectedFields = selectedFields.filter(field => !field.includes('__typename'));\n  // Handles \"id\" field for both current and included objects\n  selectedFields = selectedFields.map(field => {\n    if (field === 'id') return 'objectId';\n    return field.endsWith('.id')\n      ? `${field.substring(0, field.lastIndexOf('.id'))}.objectId`\n      : field;\n  });\n  let keys = undefined;\n  let include = undefined;\n\n  if (selectedFields.length > 0) {\n    keys = [...new Set(selectedFields)].join(',');\n    // We can use this shortcut since optimization is handled\n    // later on RestQuery, avoid overhead here.\n    include = keys;\n  }\n\n  return {\n    // If authData is detected keys will not work properly\n    // since authData has a special storage behavior\n    // so we need to skip keys currently\n    keys: keys && keys.indexOf('authData') === -1 ? keys : undefined,\n    include,\n  };\n};\n\nexport const getParseClassMutationConfig = function (parseClassConfig) {\n  return (parseClassConfig && parseClassConfig.mutation) || {};\n};\n"],"file":"parseGraphQLUtils.js"}