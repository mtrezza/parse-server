{"version":3,"sources":["../../src/GraphQL/ParseGraphQLServer.js"],"names":["ParseGraphQLServer","constructor","parseServer","config","graphQLPath","parseGraphQLController","log","loggerController","defaultLogger","parseGraphQLSchema","ParseGraphQLSchema","databaseController","graphQLCustomTypeDefs","appId","_getGraphQLOptions","req","schema","load","context","info","auth","formatError","error","e","stack","toString","_transformMaxUploadSizeToBytes","maxUploadSize","unitMap","kb","mb","gb","Number","slice","Math","pow","toLowerCase","applyGraphQL","app","use","maxFileSize","bodyParser","json","handleParseHeaders","handleParseErrors","applyPlayground","get","playgroundPath","_req","res","setHeader","write","endpoint","version","subscriptionEndpoint","subscriptionsPath","headers","masterKey","end","createSubscriptions","server","SubscriptionServer","create","execute","subscribe","onOperation","_message","params","webSocket","Object","assign","upgradeReq","path","setGraphQLConfig","graphQLConfig","updateGraphQLConfig"],"mappings":"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","sourcesContent":["import corsMiddleware from 'cors';\nimport bodyParser from 'body-parser';\nimport { graphqlUploadExpress } from 'graphql-upload';\nimport { graphqlExpress } from 'apollo-server-express/dist/expressApollo';\nimport { renderPlaygroundPage } from '@apollographql/graphql-playground-html';\nimport { execute, subscribe } from 'graphql';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { handleParseErrors, handleParseHeaders } from '../middlewares';\nimport requiredParameter from '../requiredParameter';\nimport defaultLogger from '../logger';\nimport { ParseGraphQLSchema } from './ParseGraphQLSchema';\nimport ParseGraphQLController, { ParseGraphQLConfig } from '../Controllers/ParseGraphQLController';\n\nclass ParseGraphQLServer {\n  parseGraphQLController: ParseGraphQLController;\n\n  constructor(parseServer, config) {\n    this.parseServer = parseServer || requiredParameter('You must provide a parseServer instance!');\n    if (!config || !config.graphQLPath) {\n      requiredParameter('You must provide a config.graphQLPath!');\n    }\n    this.config = config;\n    this.parseGraphQLController = this.parseServer.config.parseGraphQLController;\n    this.log =\n      (this.parseServer.config && this.parseServer.config.loggerController) || defaultLogger;\n    this.parseGraphQLSchema = new ParseGraphQLSchema({\n      parseGraphQLController: this.parseGraphQLController,\n      databaseController: this.parseServer.config.databaseController,\n      log: this.log,\n      graphQLCustomTypeDefs: this.config.graphQLCustomTypeDefs,\n      appId: this.parseServer.config.appId,\n    });\n  }\n\n  async _getGraphQLOptions(req) {\n    try {\n      return {\n        schema: await this.parseGraphQLSchema.load(),\n        context: {\n          info: req.info,\n          config: req.config,\n          auth: req.auth,\n        },\n        formatError: error => {\n          // Allow to console.log here to debug\n          return error;\n        },\n      };\n    } catch (e) {\n      this.log.error(e.stack || (typeof e.toString === 'function' && e.toString()) || e);\n      throw e;\n    }\n  }\n\n  _transformMaxUploadSizeToBytes(maxUploadSize) {\n    const unitMap = {\n      kb: 1,\n      mb: 2,\n      gb: 3,\n    };\n\n    return (\n      Number(maxUploadSize.slice(0, -2)) *\n      Math.pow(1024, unitMap[maxUploadSize.slice(-2).toLowerCase()])\n    );\n  }\n\n  applyGraphQL(app) {\n    if (!app || !app.use) {\n      requiredParameter('You must provide an Express.js app instance!');\n    }\n\n    app.use(\n      this.config.graphQLPath,\n      graphqlUploadExpress({\n        maxFileSize: this._transformMaxUploadSizeToBytes(\n          this.parseServer.config.maxUploadSize || '20mb'\n        ),\n      })\n    );\n    app.use(this.config.graphQLPath, corsMiddleware());\n    app.use(this.config.graphQLPath, bodyParser.json());\n    app.use(this.config.graphQLPath, handleParseHeaders);\n    app.use(this.config.graphQLPath, handleParseErrors);\n    app.use(\n      this.config.graphQLPath,\n      graphqlExpress(async req => await this._getGraphQLOptions(req))\n    );\n  }\n\n  applyPlayground(app) {\n    if (!app || !app.get) {\n      requiredParameter('You must provide an Express.js app instance!');\n    }\n    app.get(\n      this.config.playgroundPath ||\n        requiredParameter('You must provide a config.playgroundPath to applyPlayground!'),\n      (_req, res) => {\n        res.setHeader('Content-Type', 'text/html');\n        res.write(\n          renderPlaygroundPage({\n            endpoint: this.config.graphQLPath,\n            version: '1.7.25',\n            subscriptionEndpoint: this.config.subscriptionsPath,\n            headers: {\n              'X-Parse-Application-Id': this.parseServer.config.appId,\n              'X-Parse-Master-Key': this.parseServer.config.masterKey,\n            },\n          })\n        );\n        res.end();\n      }\n    );\n  }\n\n  createSubscriptions(server) {\n    SubscriptionServer.create(\n      {\n        execute,\n        subscribe,\n        onOperation: async (_message, params, webSocket) =>\n          Object.assign({}, params, await this._getGraphQLOptions(webSocket.upgradeReq)),\n      },\n      {\n        server,\n        path:\n          this.config.subscriptionsPath ||\n          requiredParameter('You must provide a config.subscriptionsPath to createSubscriptions!'),\n      }\n    );\n  }\n\n  setGraphQLConfig(graphQLConfig: ParseGraphQLConfig): Promise {\n    return this.parseGraphQLController.updateGraphQLConfig(graphQLConfig);\n  }\n}\n\nexport { ParseGraphQLServer };\n"],"file":"ParseGraphQLServer.js"}