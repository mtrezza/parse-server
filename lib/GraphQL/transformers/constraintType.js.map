{"version":3,"sources":["../../../src/GraphQL/transformers/constraintType.js"],"names":["transformConstraintTypeToGraphQL","parseType","targetClass","parseClassTypes","fieldName","defaultGraphQLTypes","ID_WHERE_INPUT","STRING_WHERE_INPUT","NUMBER_WHERE_INPUT","BOOLEAN_WHERE_INPUT","ARRAY_WHERE_INPUT","OBJECT_WHERE_INPUT","DATE_WHERE_INPUT","classGraphQLRelationConstraintsType","OBJECT","FILE_WHERE_INPUT","GEO_POINT_WHERE_INPUT","POLYGON_WHERE_INPUT","BYTES_WHERE_INPUT","undefined"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,gCAAgC,GAAG,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,eAAzB,EAA0CC,SAA1C,KAAwD;AAC/F,MAAIA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,UAAxC,EAAoD;AAClD,WAAOC,mBAAmB,CAACC,cAA3B;AACD;;AAED,UAAQL,SAAR;AACE,SAAK,QAAL;AACE,aAAOI,mBAAmB,CAACE,kBAA3B;;AACF,SAAK,QAAL;AACE,aAAOF,mBAAmB,CAACG,kBAA3B;;AACF,SAAK,SAAL;AACE,aAAOH,mBAAmB,CAACI,mBAA3B;;AACF,SAAK,OAAL;AACE,aAAOJ,mBAAmB,CAACK,iBAA3B;;AACF,SAAK,QAAL;AACE,aAAOL,mBAAmB,CAACM,kBAA3B;;AACF,SAAK,MAAL;AACE,aAAON,mBAAmB,CAACO,gBAA3B;;AACF,SAAK,SAAL;AACE,UACET,eAAe,CAACD,WAAD,CAAf,IACAC,eAAe,CAACD,WAAD,CAAf,CAA6BW,mCAF/B,EAGE;AACA,eAAOV,eAAe,CAACD,WAAD,CAAf,CAA6BW,mCAApC;AACD,OALD,MAKO;AACL,eAAOR,mBAAmB,CAACS,MAA3B;AACD;;AACH,SAAK,MAAL;AACE,aAAOT,mBAAmB,CAACU,gBAA3B;;AACF,SAAK,UAAL;AACE,aAAOV,mBAAmB,CAACW,qBAA3B;;AACF,SAAK,SAAL;AACE,aAAOX,mBAAmB,CAACY,mBAA3B;;AACF,SAAK,OAAL;AACE,aAAOZ,mBAAmB,CAACa,iBAA3B;;AACF,SAAK,KAAL;AACE,aAAOb,mBAAmB,CAACM,kBAA3B;;AACF,SAAK,UAAL;AACE,UACER,eAAe,CAACD,WAAD,CAAf,IACAC,eAAe,CAACD,WAAD,CAAf,CAA6BW,mCAF/B,EAGE;AACA,eAAOV,eAAe,CAACD,WAAD,CAAf,CAA6BW,mCAApC;AACD,OALD,MAKO;AACL,eAAOR,mBAAmB,CAACS,MAA3B;AACD;;AACH;AACE,aAAOK,SAAP;AA1CJ;AA4CD,CAjDD","sourcesContent":["import * as defaultGraphQLTypes from '../loaders/defaultGraphQLTypes';\n\nconst transformConstraintTypeToGraphQL = (parseType, targetClass, parseClassTypes, fieldName) => {\n  if (fieldName === 'id' || fieldName === 'objectId') {\n    return defaultGraphQLTypes.ID_WHERE_INPUT;\n  }\n\n  switch (parseType) {\n    case 'String':\n      return defaultGraphQLTypes.STRING_WHERE_INPUT;\n    case 'Number':\n      return defaultGraphQLTypes.NUMBER_WHERE_INPUT;\n    case 'Boolean':\n      return defaultGraphQLTypes.BOOLEAN_WHERE_INPUT;\n    case 'Array':\n      return defaultGraphQLTypes.ARRAY_WHERE_INPUT;\n    case 'Object':\n      return defaultGraphQLTypes.OBJECT_WHERE_INPUT;\n    case 'Date':\n      return defaultGraphQLTypes.DATE_WHERE_INPUT;\n    case 'Pointer':\n      if (\n        parseClassTypes[targetClass] &&\n        parseClassTypes[targetClass].classGraphQLRelationConstraintsType\n      ) {\n        return parseClassTypes[targetClass].classGraphQLRelationConstraintsType;\n      } else {\n        return defaultGraphQLTypes.OBJECT;\n      }\n    case 'File':\n      return defaultGraphQLTypes.FILE_WHERE_INPUT;\n    case 'GeoPoint':\n      return defaultGraphQLTypes.GEO_POINT_WHERE_INPUT;\n    case 'Polygon':\n      return defaultGraphQLTypes.POLYGON_WHERE_INPUT;\n    case 'Bytes':\n      return defaultGraphQLTypes.BYTES_WHERE_INPUT;\n    case 'ACL':\n      return defaultGraphQLTypes.OBJECT_WHERE_INPUT;\n    case 'Relation':\n      if (\n        parseClassTypes[targetClass] &&\n        parseClassTypes[targetClass].classGraphQLRelationConstraintsType\n      ) {\n        return parseClassTypes[targetClass].classGraphQLRelationConstraintsType;\n      } else {\n        return defaultGraphQLTypes.OBJECT;\n      }\n    default:\n      return undefined;\n  }\n};\n\nexport { transformConstraintTypeToGraphQL };\n"],"file":"constraintType.js"}