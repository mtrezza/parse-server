{"version":3,"sources":["../../../src/GraphQL/transformers/outputType.js"],"names":["transformOutputTypeToGraphQL","parseType","targetClass","parseClassTypes","GraphQLString","GraphQLFloat","GraphQLBoolean","GraphQLList","defaultGraphQLTypes","ARRAY_RESULT","OBJECT","DATE","classGraphQLOutputType","classGraphQLFindResultType","GraphQLNonNull","FILE_INFO","GEO_POINT","POLYGON","BYTES","ACL","undefined"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,4BAA4B,GAAG,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,eAAzB,KAA6C;AAChF,UAAQF,SAAR;AACE,SAAK,QAAL;AACE,aAAOG,sBAAP;;AACF,SAAK,QAAL;AACE,aAAOC,qBAAP;;AACF,SAAK,SAAL;AACE,aAAOC,uBAAP;;AACF,SAAK,OAAL;AACE,aAAO,IAAIC,oBAAJ,CAAgBC,mBAAmB,CAACC,YAApC,CAAP;;AACF,SAAK,QAAL;AACE,aAAOD,mBAAmB,CAACE,MAA3B;;AACF,SAAK,MAAL;AACE,aAAOF,mBAAmB,CAACG,IAA3B;;AACF,SAAK,SAAL;AACE,UACER,eAAe,IACfA,eAAe,CAACD,WAAD,CADf,IAEAC,eAAe,CAACD,WAAD,CAAf,CAA6BU,sBAH/B,EAIE;AACA,eAAOT,eAAe,CAACD,WAAD,CAAf,CAA6BU,sBAApC;AACD,OAND,MAMO;AACL,eAAOJ,mBAAmB,CAACE,MAA3B;AACD;;AACH,SAAK,UAAL;AACE,UACEP,eAAe,IACfA,eAAe,CAACD,WAAD,CADf,IAEAC,eAAe,CAACD,WAAD,CAAf,CAA6BW,0BAH/B,EAIE;AACA,eAAO,IAAIC,uBAAJ,CAAmBX,eAAe,CAACD,WAAD,CAAf,CAA6BW,0BAAhD,CAAP;AACD,OAND,MAMO;AACL,eAAO,IAAIC,uBAAJ,CAAmBN,mBAAmB,CAACE,MAAvC,CAAP;AACD;;AACH,SAAK,MAAL;AACE,aAAOF,mBAAmB,CAACO,SAA3B;;AACF,SAAK,UAAL;AACE,aAAOP,mBAAmB,CAACQ,SAA3B;;AACF,SAAK,SAAL;AACE,aAAOR,mBAAmB,CAACS,OAA3B;;AACF,SAAK,OAAL;AACE,aAAOT,mBAAmB,CAACU,KAA3B;;AACF,SAAK,KAAL;AACE,aAAO,IAAIJ,uBAAJ,CAAmBN,mBAAmB,CAACW,GAAvC,CAAP;;AACF;AACE,aAAOC,SAAP;AA5CJ;AA8CD,CA/CD","sourcesContent":["import * as defaultGraphQLTypes from '../loaders/defaultGraphQLTypes';\nimport { GraphQLString, GraphQLFloat, GraphQLBoolean, GraphQLList, GraphQLNonNull } from 'graphql';\n\nconst transformOutputTypeToGraphQL = (parseType, targetClass, parseClassTypes) => {\n  switch (parseType) {\n    case 'String':\n      return GraphQLString;\n    case 'Number':\n      return GraphQLFloat;\n    case 'Boolean':\n      return GraphQLBoolean;\n    case 'Array':\n      return new GraphQLList(defaultGraphQLTypes.ARRAY_RESULT);\n    case 'Object':\n      return defaultGraphQLTypes.OBJECT;\n    case 'Date':\n      return defaultGraphQLTypes.DATE;\n    case 'Pointer':\n      if (\n        parseClassTypes &&\n        parseClassTypes[targetClass] &&\n        parseClassTypes[targetClass].classGraphQLOutputType\n      ) {\n        return parseClassTypes[targetClass].classGraphQLOutputType;\n      } else {\n        return defaultGraphQLTypes.OBJECT;\n      }\n    case 'Relation':\n      if (\n        parseClassTypes &&\n        parseClassTypes[targetClass] &&\n        parseClassTypes[targetClass].classGraphQLFindResultType\n      ) {\n        return new GraphQLNonNull(parseClassTypes[targetClass].classGraphQLFindResultType);\n      } else {\n        return new GraphQLNonNull(defaultGraphQLTypes.OBJECT);\n      }\n    case 'File':\n      return defaultGraphQLTypes.FILE_INFO;\n    case 'GeoPoint':\n      return defaultGraphQLTypes.GEO_POINT;\n    case 'Polygon':\n      return defaultGraphQLTypes.POLYGON;\n    case 'Bytes':\n      return defaultGraphQLTypes.BYTES;\n    case 'ACL':\n      return new GraphQLNonNull(defaultGraphQLTypes.ACL);\n    default:\n      return undefined;\n  }\n};\n\nexport { transformOutputTypeToGraphQL };\n"],"file":"outputType.js"}