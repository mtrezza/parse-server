{"version":3,"sources":["../../../src/GraphQL/transformers/schemaFields.js"],"names":["transformToParse","graphQLSchemaFields","existingFields","parseSchemaFields","reducerGenerator","type","field","name","__op","remove","find","removeField","Parse","Error","INVALID_KEY_NAME","targetClass","targetClassName","addStrings","reduce","addNumbers","addBooleans","addArrays","addObjects","addDates","addFiles","addGeoPoint","addPolygons","addBytes","addPointers","addRelations","transformToGraphQL","Object","keys","map"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\n\nconst transformToParse = (graphQLSchemaFields, existingFields) => {\n  if (!graphQLSchemaFields) {\n    return {};\n  }\n\n  let parseSchemaFields = {};\n\n  const reducerGenerator = type => (parseSchemaFields, field) => {\n    if (type === 'Remove') {\n      if (existingFields[field.name]) {\n        return {\n          ...parseSchemaFields,\n          [field.name]: {\n            __op: 'Delete',\n          },\n        };\n      } else {\n        return parseSchemaFields;\n      }\n    }\n    if (\n      graphQLSchemaFields.remove &&\n      graphQLSchemaFields.remove.find(removeField => removeField.name === field.name)\n    ) {\n      return parseSchemaFields;\n    }\n    if (parseSchemaFields[field.name] || (existingFields && existingFields[field.name])) {\n      throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Duplicated field name: ${field.name}`);\n    }\n    if (type === 'Relation' || type === 'Pointer') {\n      return {\n        ...parseSchemaFields,\n        [field.name]: {\n          type,\n          targetClass: field.targetClassName,\n        },\n      };\n    }\n    return {\n      ...parseSchemaFields,\n      [field.name]: {\n        type,\n      },\n    };\n  };\n\n  if (graphQLSchemaFields.addStrings) {\n    parseSchemaFields = graphQLSchemaFields.addStrings.reduce(\n      reducerGenerator('String'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addNumbers) {\n    parseSchemaFields = graphQLSchemaFields.addNumbers.reduce(\n      reducerGenerator('Number'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addBooleans) {\n    parseSchemaFields = graphQLSchemaFields.addBooleans.reduce(\n      reducerGenerator('Boolean'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addArrays) {\n    parseSchemaFields = graphQLSchemaFields.addArrays.reduce(\n      reducerGenerator('Array'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addObjects) {\n    parseSchemaFields = graphQLSchemaFields.addObjects.reduce(\n      reducerGenerator('Object'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addDates) {\n    parseSchemaFields = graphQLSchemaFields.addDates.reduce(\n      reducerGenerator('Date'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addFiles) {\n    parseSchemaFields = graphQLSchemaFields.addFiles.reduce(\n      reducerGenerator('File'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addGeoPoint) {\n    parseSchemaFields = [graphQLSchemaFields.addGeoPoint].reduce(\n      reducerGenerator('GeoPoint'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addPolygons) {\n    parseSchemaFields = graphQLSchemaFields.addPolygons.reduce(\n      reducerGenerator('Polygon'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addBytes) {\n    parseSchemaFields = graphQLSchemaFields.addBytes.reduce(\n      reducerGenerator('Bytes'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addPointers) {\n    parseSchemaFields = graphQLSchemaFields.addPointers.reduce(\n      reducerGenerator('Pointer'),\n      parseSchemaFields\n    );\n  }\n  if (graphQLSchemaFields.addRelations) {\n    parseSchemaFields = graphQLSchemaFields.addRelations.reduce(\n      reducerGenerator('Relation'),\n      parseSchemaFields\n    );\n  }\n  if (existingFields && graphQLSchemaFields.remove) {\n    parseSchemaFields = graphQLSchemaFields.remove.reduce(\n      reducerGenerator('Remove'),\n      parseSchemaFields\n    );\n  }\n\n  return parseSchemaFields;\n};\n\nconst transformToGraphQL = parseSchemaFields => {\n  return Object.keys(parseSchemaFields).map(name => ({\n    name,\n    type: parseSchemaFields[name].type,\n    targetClassName: parseSchemaFields[name].targetClass,\n  }));\n};\n\nexport { transformToParse, transformToGraphQL };\n"],"file":"schemaFields.js"}