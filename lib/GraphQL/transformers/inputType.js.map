{"version":3,"sources":["../../../src/GraphQL/transformers/inputType.js"],"names":["transformInputTypeToGraphQL","parseType","targetClass","parseClassTypes","GraphQLString","GraphQLFloat","GraphQLBoolean","GraphQLList","defaultGraphQLTypes","ANY","OBJECT","DATE","classGraphQLPointerType","classGraphQLRelationType","FILE_INPUT","GEO_POINT_INPUT","POLYGON_INPUT","BYTES","ACL_INPUT","undefined"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,2BAA2B,GAAG,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,eAAzB,KAA6C;AAC/E,UAAQF,SAAR;AACE,SAAK,QAAL;AACE,aAAOG,sBAAP;;AACF,SAAK,QAAL;AACE,aAAOC,qBAAP;;AACF,SAAK,SAAL;AACE,aAAOC,uBAAP;;AACF,SAAK,OAAL;AACE,aAAO,IAAIC,oBAAJ,CAAgBC,mBAAmB,CAACC,GAApC,CAAP;;AACF,SAAK,QAAL;AACE,aAAOD,mBAAmB,CAACE,MAA3B;;AACF,SAAK,MAAL;AACE,aAAOF,mBAAmB,CAACG,IAA3B;;AACF,SAAK,SAAL;AACE,UACER,eAAe,IACfA,eAAe,CAACD,WAAD,CADf,IAEAC,eAAe,CAACD,WAAD,CAAf,CAA6BU,uBAH/B,EAIE;AACA,eAAOT,eAAe,CAACD,WAAD,CAAf,CAA6BU,uBAApC;AACD,OAND,MAMO;AACL,eAAOJ,mBAAmB,CAACE,MAA3B;AACD;;AACH,SAAK,UAAL;AACE,UACEP,eAAe,IACfA,eAAe,CAACD,WAAD,CADf,IAEAC,eAAe,CAACD,WAAD,CAAf,CAA6BW,wBAH/B,EAIE;AACA,eAAOV,eAAe,CAACD,WAAD,CAAf,CAA6BW,wBAApC;AACD,OAND,MAMO;AACL,eAAOL,mBAAmB,CAACE,MAA3B;AACD;;AACH,SAAK,MAAL;AACE,aAAOF,mBAAmB,CAACM,UAA3B;;AACF,SAAK,UAAL;AACE,aAAON,mBAAmB,CAACO,eAA3B;;AACF,SAAK,SAAL;AACE,aAAOP,mBAAmB,CAACQ,aAA3B;;AACF,SAAK,OAAL;AACE,aAAOR,mBAAmB,CAACS,KAA3B;;AACF,SAAK,KAAL;AACE,aAAOT,mBAAmB,CAACU,SAA3B;;AACF;AACE,aAAOC,SAAP;AA5CJ;AA8CD,CA/CD","sourcesContent":["import { GraphQLString, GraphQLFloat, GraphQLBoolean, GraphQLList } from 'graphql';\nimport * as defaultGraphQLTypes from '../loaders/defaultGraphQLTypes';\n\nconst transformInputTypeToGraphQL = (parseType, targetClass, parseClassTypes) => {\n  switch (parseType) {\n    case 'String':\n      return GraphQLString;\n    case 'Number':\n      return GraphQLFloat;\n    case 'Boolean':\n      return GraphQLBoolean;\n    case 'Array':\n      return new GraphQLList(defaultGraphQLTypes.ANY);\n    case 'Object':\n      return defaultGraphQLTypes.OBJECT;\n    case 'Date':\n      return defaultGraphQLTypes.DATE;\n    case 'Pointer':\n      if (\n        parseClassTypes &&\n        parseClassTypes[targetClass] &&\n        parseClassTypes[targetClass].classGraphQLPointerType\n      ) {\n        return parseClassTypes[targetClass].classGraphQLPointerType;\n      } else {\n        return defaultGraphQLTypes.OBJECT;\n      }\n    case 'Relation':\n      if (\n        parseClassTypes &&\n        parseClassTypes[targetClass] &&\n        parseClassTypes[targetClass].classGraphQLRelationType\n      ) {\n        return parseClassTypes[targetClass].classGraphQLRelationType;\n      } else {\n        return defaultGraphQLTypes.OBJECT;\n      }\n    case 'File':\n      return defaultGraphQLTypes.FILE_INPUT;\n    case 'GeoPoint':\n      return defaultGraphQLTypes.GEO_POINT_INPUT;\n    case 'Polygon':\n      return defaultGraphQLTypes.POLYGON_INPUT;\n    case 'Bytes':\n      return defaultGraphQLTypes.BYTES;\n    case 'ACL':\n      return defaultGraphQLTypes.ACL_INPUT;\n    default:\n      return undefined;\n  }\n};\n\nexport { transformInputTypeToGraphQL };\n"],"file":"inputType.js"}