{"version":3,"sources":["../../src/Routers/FilesRouter.js"],"names":["triggers","require","http","downloadFileFromURI","uri","Promise","res","rej","get","response","setDefaultEncoding","body","headers","on","data","e","message","addFileDataIfNeeded","file","_source","format","base64","_previousSave","_data","_requestTask","FilesRouter","expressRouter","maxUploadSize","router","express","Router","getHandler","metadataHandler","post","req","next","Parse","Error","INVALID_FILE_NAME","BodyParser","raw","type","limit","Middlewares","handleParseHeaders","createHandler","delete","enforceMasterKeyAccess","deleteHandler","config","Config","params","appId","filesController","filename","contentType","mime","getType","isFileStreamable","handleFileStream","catch","status","set","end","getFileData","then","length","user","auth","isMaster","isLinked","AnonymousUtils","fileUpload","enableForAnonymousUser","FILE_SAVE_ERROR","enableForAuthenticatedUser","enableForPublic","error","validateFilename","toString","File","metadata","tags","fileData","setTags","setMetadata","fileSize","Buffer","byteLength","fileObject","triggerResult","maybeRunFileTrigger","Types","beforeSaveFile","saveResult","url","name","_name","bufferData","from","createFileResult","createFile","_tags","_metadata","_url","resolve","afterSaveFile","json","logger","resolveError","code","adapter","getFileLocation","beforeDeleteFile","deleteFile","afterDeleteFile","FILE_DELETE_ERROR","getMetadata"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,mBAAmB,GAAGC,GAAG,IAAI;AACjC,SAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BL,IAAAA,IAAI,CACDM,GADH,CACOJ,GADP,EACYK,QAAQ,IAAI;AACpBA,MAAAA,QAAQ,CAACC,kBAAT,CAA4B,QAA5B;AACA,UAAIC,IAAI,GAAI,QAAOF,QAAQ,CAACG,OAAT,CAAiB,cAAjB,CAAiC,UAApD;AACAH,MAAAA,QAAQ,CAACI,EAAT,CAAY,MAAZ,EAAoBC,IAAI,IAAKH,IAAI,IAAIG,IAArC;AACAL,MAAAA,QAAQ,CAACI,EAAT,CAAY,KAAZ,EAAmB,MAAMP,GAAG,CAACK,IAAD,CAA5B;AACD,KANH,EAOGE,EAPH,CAOM,OAPN,EAOeE,CAAC,IAAI;AAChBR,MAAAA,GAAG,CAAE,+BAA8BH,GAAI,KAAIW,CAAC,CAACC,OAAQ,EAAlD,CAAH;AACD,KATH;AAUD,GAXM,CAAP;AAYD,CAbD;;AAeA,MAAMC,mBAAmB,GAAG,MAAMC,IAAN,IAAc;AACxC,MAAIA,IAAI,CAACC,OAAL,CAAaC,MAAb,KAAwB,KAA5B,EAAmC;AACjC,UAAMC,MAAM,GAAG,MAAMlB,mBAAmB,CAACe,IAAI,CAACC,OAAL,CAAaf,GAAd,CAAxC;AACAc,IAAAA,IAAI,CAACI,aAAL,GAAqBJ,IAArB;AACAA,IAAAA,IAAI,CAACK,KAAL,GAAaF,MAAb;AACAH,IAAAA,IAAI,CAACM,YAAL,GAAoB,IAApB;AACD;;AACD,SAAON,IAAP;AACD,CARD;;AAUO,MAAMO,WAAN,CAAkB;AACvBC,EAAAA,aAAa,CAAC;AAAEC,IAAAA,aAAa,GAAG;AAAlB,MAA6B,EAA9B,EAAkC;AAC7C,QAAIC,MAAM,GAAGC,iBAAQC,MAAR,EAAb;;AACAF,IAAAA,MAAM,CAACpB,GAAP,CAAW,yBAAX,EAAsC,KAAKuB,UAA3C;AACAH,IAAAA,MAAM,CAACpB,GAAP,CAAW,kCAAX,EAA+C,KAAKwB,eAApD;AAEAJ,IAAAA,MAAM,CAACK,IAAP,CAAY,QAAZ,EAAsB,UAAUC,GAAV,EAAe5B,GAAf,EAAoB6B,IAApB,EAA0B;AAC9CA,MAAAA,IAAI,CAAC,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,iBAA5B,EAA+C,wBAA/C,CAAD,CAAJ;AACD,KAFD;AAIAV,IAAAA,MAAM,CAACK,IAAP,CACE,kBADF,EAEEM,oBAAWC,GAAX,CAAe;AACbC,MAAAA,IAAI,EAAE,MAAM;AACV,eAAO,IAAP;AACD,OAHY;AAIbC,MAAAA,KAAK,EAAEf;AAJM,KAAf,CAFF,EAOM;AACJgB,IAAAA,WAAW,CAACC,kBARd,EASE,KAAKC,aATP;AAYAjB,IAAAA,MAAM,CAACkB,MAAP,CACE,kBADF,EAEEH,WAAW,CAACC,kBAFd,EAGED,WAAW,CAACI,sBAHd,EAIE,KAAKC,aAJP;AAMA,WAAOpB,MAAP;AACD;;AAEDG,EAAAA,UAAU,CAACG,GAAD,EAAM5B,GAAN,EAAW;AACnB,UAAM2C,MAAM,GAAGC,gBAAO1C,GAAP,CAAW0B,GAAG,CAACiB,MAAJ,CAAWC,KAAtB,CAAf;;AACA,UAAMC,eAAe,GAAGJ,MAAM,CAACI,eAA/B;AACA,UAAMC,QAAQ,GAAGpB,GAAG,CAACiB,MAAJ,CAAWG,QAA5B;;AACA,UAAMC,WAAW,GAAGC,cAAKC,OAAL,CAAaH,QAAb,CAApB;;AACA,QAAII,gBAAgB,CAACxB,GAAD,EAAMmB,eAAN,CAApB,EAA4C;AAC1CA,MAAAA,eAAe,CAACM,gBAAhB,CAAiCV,MAAjC,EAAyCK,QAAzC,EAAmDpB,GAAnD,EAAwD5B,GAAxD,EAA6DiD,WAA7D,EAA0EK,KAA1E,CAAgF,MAAM;AACpFtD,QAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX;AACAvD,QAAAA,GAAG,CAACwD,GAAJ,CAAQ,cAAR,EAAwB,YAAxB;AACAxD,QAAAA,GAAG,CAACyD,GAAJ,CAAQ,iBAAR;AACD,OAJD;AAKD,KAND,MAMO;AACLV,MAAAA,eAAe,CACZW,WADH,CACef,MADf,EACuBK,QADvB,EAEGW,IAFH,CAEQnD,IAAI,IAAI;AACZR,QAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX;AACAvD,QAAAA,GAAG,CAACwD,GAAJ,CAAQ,cAAR,EAAwBP,WAAxB;AACAjD,QAAAA,GAAG,CAACwD,GAAJ,CAAQ,gBAAR,EAA0BhD,IAAI,CAACoD,MAA/B;AACA5D,QAAAA,GAAG,CAACyD,GAAJ,CAAQjD,IAAR;AACD,OAPH,EAQG8C,KARH,CAQS,MAAM;AACXtD,QAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX;AACAvD,QAAAA,GAAG,CAACwD,GAAJ,CAAQ,cAAR,EAAwB,YAAxB;AACAxD,QAAAA,GAAG,CAACyD,GAAJ,CAAQ,iBAAR;AACD,OAZH;AAaD;AACF;;AAED,QAAMlB,aAAN,CAAoBX,GAApB,EAAyB5B,GAAzB,EAA8B6B,IAA9B,EAAoC;AAClC,UAAMc,MAAM,GAAGf,GAAG,CAACe,MAAnB;AACA,UAAMkB,IAAI,GAAGjC,GAAG,CAACkC,IAAJ,CAASD,IAAtB;AACA,UAAME,QAAQ,GAAGnC,GAAG,CAACkC,IAAJ,CAASC,QAA1B;;AACA,UAAMC,QAAQ,GAAGH,IAAI,IAAI/B,cAAMmC,cAAN,CAAqBD,QAArB,CAA8BH,IAA9B,CAAzB;;AACA,QAAI,CAACE,QAAD,IAAa,CAACpB,MAAM,CAACuB,UAAP,CAAkBC,sBAAhC,IAA0DH,QAA9D,EAAwE;AACtEnC,MAAAA,IAAI,CAAC,IAAIC,cAAMC,KAAV,CACHD,cAAMC,KAAN,CAAYqC,eADT,EAEH,4CAFG,CAAD,CAAJ;AAIA;AACD;;AACD,QAAI,CAACL,QAAD,IAAa,CAACpB,MAAM,CAACuB,UAAP,CAAkBG,0BAAhC,IAA8D,CAACL,QAA/D,IAA2EH,IAA/E,EAAqF;AACnFhC,MAAAA,IAAI,CAAC,IAAIC,cAAMC,KAAV,CACHD,cAAMC,KAAN,CAAYqC,eADT,EAEH,gDAFG,CAAD,CAAJ;AAIA;AACD;;AACD,QAAI,CAACL,QAAD,IAAa,CAACpB,MAAM,CAACuB,UAAP,CAAkBI,eAAhC,IAAmD,CAACT,IAAxD,EAA8D;AAC5DhC,MAAAA,IAAI,CAAC,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYqC,eAA5B,EAA6C,oCAA7C,CAAD,CAAJ;AACA;AACD;;AACD,UAAMrB,eAAe,GAAGJ,MAAM,CAACI,eAA/B;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAepB,GAAG,CAACiB,MAAzB;AACA,UAAMI,WAAW,GAAGrB,GAAG,CAAC1B,GAAJ,CAAQ,cAAR,CAApB;;AAEA,QAAI,CAAC0B,GAAG,CAACvB,IAAL,IAAa,CAACuB,GAAG,CAACvB,IAAJ,CAASuD,MAA3B,EAAmC;AACjC/B,MAAAA,IAAI,CAAC,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYqC,eAA5B,EAA6C,sBAA7C,CAAD,CAAJ;AACA;AACD;;AAED,UAAMG,KAAK,GAAGxB,eAAe,CAACyB,gBAAhB,CAAiCxB,QAAjC,CAAd;;AACA,QAAIuB,KAAJ,EAAW;AACT1C,MAAAA,IAAI,CAAC0C,KAAD,CAAJ;AACA;AACD;;AAED,UAAMxD,MAAM,GAAGa,GAAG,CAACvB,IAAJ,CAASoE,QAAT,CAAkB,QAAlB,CAAf;AACA,UAAM7D,IAAI,GAAG,IAAIkB,cAAM4C,IAAV,CAAe1B,QAAf,EAAyB;AAAEjC,MAAAA;AAAF,KAAzB,EAAqCkC,WAArC,CAAb;AACA,UAAM;AAAE0B,MAAAA,QAAQ,GAAG,EAAb;AAAiBC,MAAAA,IAAI,GAAG;AAAxB,QAA+BhD,GAAG,CAACiD,QAAJ,IAAgB,EAArD;AACAjE,IAAAA,IAAI,CAACkE,OAAL,CAAaF,IAAb;AACAhE,IAAAA,IAAI,CAACmE,WAAL,CAAiBJ,QAAjB;AACA,UAAMK,QAAQ,GAAGC,MAAM,CAACC,UAAP,CAAkBtD,GAAG,CAACvB,IAAtB,CAAjB;AACA,UAAM8E,UAAU,GAAG;AAAEvE,MAAAA,IAAF;AAAQoE,MAAAA;AAAR,KAAnB;;AACA,QAAI;AACF;AACA,YAAMI,aAAa,GAAG,MAAM1F,QAAQ,CAAC2F,mBAAT,CAC1B3F,QAAQ,CAAC4F,KAAT,CAAeC,cADW,EAE1BJ,UAF0B,EAG1BxC,MAH0B,EAI1Bf,GAAG,CAACkC,IAJsB,CAA5B;AAMA,UAAI0B,UAAJ,CARE,CASF;;AACA,UAAIJ,aAAa,YAAYtD,cAAM4C,IAAnC,EAAyC;AACvCS,QAAAA,UAAU,CAACvE,IAAX,GAAkBwE,aAAlB;;AACA,YAAIA,aAAa,CAACK,GAAd,EAAJ,EAAyB;AACvB;AACAN,UAAAA,UAAU,CAACH,QAAX,GAAsB,IAAtB;AACAQ,UAAAA,UAAU,GAAG;AACXC,YAAAA,GAAG,EAAEL,aAAa,CAACK,GAAd,EADM;AAEXC,YAAAA,IAAI,EAAEN,aAAa,CAACO;AAFT,WAAb;AAID;AACF,OApBC,CAqBF;;;AACA,UAAI,CAACH,UAAL,EAAiB;AACf;AACA,cAAM7E,mBAAmB,CAACwE,UAAU,CAACvE,IAAZ,CAAzB,CAFe,CAGf;;AACA,cAAMgF,UAAU,GAAGX,MAAM,CAACY,IAAP,CAAYV,UAAU,CAACvE,IAAX,CAAgBK,KAA5B,EAAmC,QAAnC,CAAnB;AACAkE,QAAAA,UAAU,CAACH,QAAX,GAAsBC,MAAM,CAACC,UAAP,CAAkBU,UAAlB,CAAtB,CALe,CAMf;;AACA,cAAME,gBAAgB,GAAG,MAAM/C,eAAe,CAACgD,UAAhB,CAC7BpD,MAD6B,EAE7BwC,UAAU,CAACvE,IAAX,CAAgB+E,KAFa,EAG7BC,UAH6B,EAI7BT,UAAU,CAACvE,IAAX,CAAgBC,OAAhB,CAAwBsB,IAJK,EAK7B;AACEyC,UAAAA,IAAI,EAAEO,UAAU,CAACvE,IAAX,CAAgBoF,KADxB;AAEErB,UAAAA,QAAQ,EAAEQ,UAAU,CAACvE,IAAX,CAAgBqF;AAF5B,SAL6B,CAA/B,CAPe,CAiBf;;AACAd,QAAAA,UAAU,CAACvE,IAAX,CAAgB+E,KAAhB,GAAwBG,gBAAgB,CAACJ,IAAzC;AACAP,QAAAA,UAAU,CAACvE,IAAX,CAAgBsF,IAAhB,GAAuBJ,gBAAgB,CAACL,GAAxC;AACAN,QAAAA,UAAU,CAACvE,IAAX,CAAgBM,YAAhB,GAA+B,IAA/B;AACAiE,QAAAA,UAAU,CAACvE,IAAX,CAAgBI,aAAhB,GAAgCjB,OAAO,CAACoG,OAAR,CAAgBhB,UAAU,CAACvE,IAA3B,CAAhC;AACA4E,QAAAA,UAAU,GAAG;AACXC,UAAAA,GAAG,EAAEK,gBAAgB,CAACL,GADX;AAEXC,UAAAA,IAAI,EAAEI,gBAAgB,CAACJ;AAFZ,SAAb;AAID,OAhDC,CAiDF;;;AACA,YAAMhG,QAAQ,CAAC2F,mBAAT,CACJ3F,QAAQ,CAAC4F,KAAT,CAAec,aADX,EAEJjB,UAFI,EAGJxC,MAHI,EAIJf,GAAG,CAACkC,IAJA,CAAN;AAMA9D,MAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX;AACAvD,MAAAA,GAAG,CAACwD,GAAJ,CAAQ,UAAR,EAAoBgC,UAAU,CAACC,GAA/B;AACAzF,MAAAA,GAAG,CAACqG,IAAJ,CAASb,UAAT;AACD,KA3DD,CA2DE,OAAO/E,CAAP,EAAU;AACV6F,sBAAO/B,KAAP,CAAa,yBAAb,EAAwC9D,CAAxC;;AACA,YAAM8D,KAAK,GAAG7E,QAAQ,CAAC6G,YAAT,CAAsB9F,CAAtB,EAAyB;AACrC+F,QAAAA,IAAI,EAAE1E,cAAMC,KAAN,CAAYqC,eADmB;AAErC1D,QAAAA,OAAO,EAAG,yBAAwByE,UAAU,CAACvE,IAAX,CAAgB+E,KAAM;AAFnB,OAAzB,CAAd;AAIA9D,MAAAA,IAAI,CAAC0C,KAAD,CAAJ;AACD;AACF;;AAED,QAAM7B,aAAN,CAAoBd,GAApB,EAAyB5B,GAAzB,EAA8B6B,IAA9B,EAAoC;AAClC,QAAI;AACF,YAAM;AAAEkB,QAAAA;AAAF,UAAsBnB,GAAG,CAACe,MAAhC;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAepB,GAAG,CAACiB,MAAzB,CAFE,CAGF;;AACA,YAAMjC,IAAI,GAAG,IAAIkB,cAAM4C,IAAV,CAAe1B,QAAf,CAAb;AACApC,MAAAA,IAAI,CAACsF,IAAL,GAAYnD,eAAe,CAAC0D,OAAhB,CAAwBC,eAAxB,CAAwC9E,GAAG,CAACe,MAA5C,EAAoDK,QAApD,CAAZ;AACA,YAAMmC,UAAU,GAAG;AAAEvE,QAAAA,IAAF;AAAQoE,QAAAA,QAAQ,EAAE;AAAlB,OAAnB;AACA,YAAMtF,QAAQ,CAAC2F,mBAAT,CACJ3F,QAAQ,CAAC4F,KAAT,CAAeqB,gBADX,EAEJxB,UAFI,EAGJvD,GAAG,CAACe,MAHA,EAIJf,GAAG,CAACkC,IAJA,CAAN,CAPE,CAaF;;AACA,YAAMf,eAAe,CAAC6D,UAAhB,CAA2BhF,GAAG,CAACe,MAA/B,EAAuCK,QAAvC,CAAN,CAdE,CAeF;;AACA,YAAMtD,QAAQ,CAAC2F,mBAAT,CACJ3F,QAAQ,CAAC4F,KAAT,CAAeuB,eADX,EAEJ1B,UAFI,EAGJvD,GAAG,CAACe,MAHA,EAIJf,GAAG,CAACkC,IAJA,CAAN;AAMA9D,MAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX,EAtBE,CAuBF;;AACAvD,MAAAA,GAAG,CAACyD,GAAJ;AACD,KAzBD,CAyBE,OAAOhD,CAAP,EAAU;AACV6F,sBAAO/B,KAAP,CAAa,yBAAb,EAAwC9D,CAAxC;;AACA,YAAM8D,KAAK,GAAG7E,QAAQ,CAAC6G,YAAT,CAAsB9F,CAAtB,EAAyB;AACrC+F,QAAAA,IAAI,EAAE1E,cAAMC,KAAN,CAAY+E,iBADmB;AAErCpG,QAAAA,OAAO,EAAE;AAF4B,OAAzB,CAAd;AAIAmB,MAAAA,IAAI,CAAC0C,KAAD,CAAJ;AACD;AACF;;AAED,QAAM7C,eAAN,CAAsBE,GAAtB,EAA2B5B,GAA3B,EAAgC;AAC9B,UAAM2C,MAAM,GAAGC,gBAAO1C,GAAP,CAAW0B,GAAG,CAACiB,MAAJ,CAAWC,KAAtB,CAAf;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAsBJ,MAA5B;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAepB,GAAG,CAACiB,MAAzB;;AACA,QAAI;AACF,YAAMrC,IAAI,GAAG,MAAMuC,eAAe,CAACgE,WAAhB,CAA4B/D,QAA5B,CAAnB;AACAhD,MAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX;AACAvD,MAAAA,GAAG,CAACqG,IAAJ,CAAS7F,IAAT;AACD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACVT,MAAAA,GAAG,CAACuD,MAAJ,CAAW,GAAX;AACAvD,MAAAA,GAAG,CAACqG,IAAJ,CAAS,EAAT;AACD;AACF;;AA7NsB;;;;AAgOzB,SAASjD,gBAAT,CAA0BxB,GAA1B,EAA+BmB,eAA/B,EAAgD;AAC9C,SAAOnB,GAAG,CAAC1B,GAAJ,CAAQ,OAAR,KAAoB,OAAO6C,eAAe,CAAC0D,OAAhB,CAAwBpD,gBAA/B,KAAoD,UAA/E;AACD","sourcesContent":["import express from 'express';\nimport BodyParser from 'body-parser';\nimport * as Middlewares from '../middlewares';\nimport Parse from 'parse/node';\nimport Config from '../Config';\nimport mime from 'mime';\nimport logger from '../logger';\nconst triggers = require('../triggers');\nconst http = require('http');\n\nconst downloadFileFromURI = uri => {\n  return new Promise((res, rej) => {\n    http\n      .get(uri, response => {\n        response.setDefaultEncoding('base64');\n        let body = `data:${response.headers['content-type']};base64,`;\n        response.on('data', data => (body += data));\n        response.on('end', () => res(body));\n      })\n      .on('error', e => {\n        rej(`Error downloading file from ${uri}: ${e.message}`);\n      });\n  });\n};\n\nconst addFileDataIfNeeded = async file => {\n  if (file._source.format === 'uri') {\n    const base64 = await downloadFileFromURI(file._source.uri);\n    file._previousSave = file;\n    file._data = base64;\n    file._requestTask = null;\n  }\n  return file;\n};\n\nexport class FilesRouter {\n  expressRouter({ maxUploadSize = '20Mb' } = {}) {\n    var router = express.Router();\n    router.get('/files/:appId/:filename', this.getHandler);\n    router.get('/files/:appId/metadata/:filename', this.metadataHandler);\n\n    router.post('/files', function (req, res, next) {\n      next(new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename not provided.'));\n    });\n\n    router.post(\n      '/files/:filename',\n      BodyParser.raw({\n        type: () => {\n          return true;\n        },\n        limit: maxUploadSize,\n      }), // Allow uploads without Content-Type, or with any Content-Type.\n      Middlewares.handleParseHeaders,\n      this.createHandler\n    );\n\n    router.delete(\n      '/files/:filename',\n      Middlewares.handleParseHeaders,\n      Middlewares.enforceMasterKeyAccess,\n      this.deleteHandler\n    );\n    return router;\n  }\n\n  getHandler(req, res) {\n    const config = Config.get(req.params.appId);\n    const filesController = config.filesController;\n    const filename = req.params.filename;\n    const contentType = mime.getType(filename);\n    if (isFileStreamable(req, filesController)) {\n      filesController.handleFileStream(config, filename, req, res, contentType).catch(() => {\n        res.status(404);\n        res.set('Content-Type', 'text/plain');\n        res.end('File not found.');\n      });\n    } else {\n      filesController\n        .getFileData(config, filename)\n        .then(data => {\n          res.status(200);\n          res.set('Content-Type', contentType);\n          res.set('Content-Length', data.length);\n          res.end(data);\n        })\n        .catch(() => {\n          res.status(404);\n          res.set('Content-Type', 'text/plain');\n          res.end('File not found.');\n        });\n    }\n  }\n\n  async createHandler(req, res, next) {\n    const config = req.config;\n    const user = req.auth.user;\n    const isMaster = req.auth.isMaster;\n    const isLinked = user && Parse.AnonymousUtils.isLinked(user);\n    if (!isMaster && !config.fileUpload.enableForAnonymousUser && isLinked) {\n      next(new Parse.Error(\n        Parse.Error.FILE_SAVE_ERROR,\n        'File upload by anonymous user is disabled.'\n      ));\n      return;\n    }\n    if (!isMaster && !config.fileUpload.enableForAuthenticatedUser && !isLinked && user) {\n      next(new Parse.Error(\n        Parse.Error.FILE_SAVE_ERROR,\n        'File upload by authenticated user is disabled.'\n      ));\n      return;\n    }\n    if (!isMaster && !config.fileUpload.enableForPublic && !user) {\n      next(new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'File upload by public is disabled.'));\n      return;\n    }\n    const filesController = config.filesController;\n    const { filename } = req.params;\n    const contentType = req.get('Content-type');\n\n    if (!req.body || !req.body.length) {\n      next(new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'Invalid file upload.'));\n      return;\n    }\n\n    const error = filesController.validateFilename(filename);\n    if (error) {\n      next(error);\n      return;\n    }\n\n    const base64 = req.body.toString('base64');\n    const file = new Parse.File(filename, { base64 }, contentType);\n    const { metadata = {}, tags = {} } = req.fileData || {};\n    file.setTags(tags);\n    file.setMetadata(metadata);\n    const fileSize = Buffer.byteLength(req.body);\n    const fileObject = { file, fileSize };\n    try {\n      // run beforeSaveFile trigger\n      const triggerResult = await triggers.maybeRunFileTrigger(\n        triggers.Types.beforeSaveFile,\n        fileObject,\n        config,\n        req.auth\n      );\n      let saveResult;\n      // if a new ParseFile is returned check if it's an already saved file\n      if (triggerResult instanceof Parse.File) {\n        fileObject.file = triggerResult;\n        if (triggerResult.url()) {\n          // set fileSize to null because we wont know how big it is here\n          fileObject.fileSize = null;\n          saveResult = {\n            url: triggerResult.url(),\n            name: triggerResult._name,\n          };\n        }\n      }\n      // if the file returned by the trigger has already been saved skip saving anything\n      if (!saveResult) {\n        // if the ParseFile returned is type uri, download the file before saving it\n        await addFileDataIfNeeded(fileObject.file);\n        // update fileSize\n        const bufferData = Buffer.from(fileObject.file._data, 'base64');\n        fileObject.fileSize = Buffer.byteLength(bufferData);\n        // save file\n        const createFileResult = await filesController.createFile(\n          config,\n          fileObject.file._name,\n          bufferData,\n          fileObject.file._source.type,\n          {\n            tags: fileObject.file._tags,\n            metadata: fileObject.file._metadata,\n          }\n        );\n        // update file with new data\n        fileObject.file._name = createFileResult.name;\n        fileObject.file._url = createFileResult.url;\n        fileObject.file._requestTask = null;\n        fileObject.file._previousSave = Promise.resolve(fileObject.file);\n        saveResult = {\n          url: createFileResult.url,\n          name: createFileResult.name,\n        };\n      }\n      // run afterSaveFile trigger\n      await triggers.maybeRunFileTrigger(\n        triggers.Types.afterSaveFile,\n        fileObject,\n        config,\n        req.auth\n      );\n      res.status(201);\n      res.set('Location', saveResult.url);\n      res.json(saveResult);\n    } catch (e) {\n      logger.error('Error creating a file: ', e);\n      const error = triggers.resolveError(e, {\n        code: Parse.Error.FILE_SAVE_ERROR,\n        message: `Could not store file: ${fileObject.file._name}.`,\n      });\n      next(error);\n    }\n  }\n\n  async deleteHandler(req, res, next) {\n    try {\n      const { filesController } = req.config;\n      const { filename } = req.params;\n      // run beforeDeleteFile trigger\n      const file = new Parse.File(filename);\n      file._url = filesController.adapter.getFileLocation(req.config, filename);\n      const fileObject = { file, fileSize: null };\n      await triggers.maybeRunFileTrigger(\n        triggers.Types.beforeDeleteFile,\n        fileObject,\n        req.config,\n        req.auth\n      );\n      // delete file\n      await filesController.deleteFile(req.config, filename);\n      // run afterDeleteFile trigger\n      await triggers.maybeRunFileTrigger(\n        triggers.Types.afterDeleteFile,\n        fileObject,\n        req.config,\n        req.auth\n      );\n      res.status(200);\n      // TODO: return useful JSON here?\n      res.end();\n    } catch (e) {\n      logger.error('Error deleting a file: ', e);\n      const error = triggers.resolveError(e, {\n        code: Parse.Error.FILE_DELETE_ERROR,\n        message: 'Could not delete file.',\n      });\n      next(error);\n    }\n  }\n\n  async metadataHandler(req, res) {\n    const config = Config.get(req.params.appId);\n    const { filesController } = config;\n    const { filename } = req.params;\n    try {\n      const data = await filesController.getMetadata(filename);\n      res.status(200);\n      res.json(data);\n    } catch (e) {\n      res.status(200);\n      res.json({});\n    }\n  }\n}\n\nfunction isFileStreamable(req, filesController) {\n  return req.get('Range') && typeof filesController.adapter.handleFileStream === 'function';\n}\n"],"file":"FilesRouter.js"}