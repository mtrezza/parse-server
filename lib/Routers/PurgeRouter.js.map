{"version":3,"sources":["../../src/Routers/PurgeRouter.js"],"names":["PurgeRouter","PromiseRouter","handlePurge","req","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","config","database","purgeCollection","params","className","then","cacheAdapter","cacheController","user","clear","role","response","catch","error","code","OBJECT_NOT_FOUND","mountRoutes","route","middleware","promiseEnforceMasterKeyAccess"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,WAAN,SAA0BC,sBAA1B,CAAwC;AAC7CC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,QAAIA,GAAG,CAACC,IAAJ,CAASC,UAAb,EAAyB;AACvB,YAAM,IAAIC,cAAMC,KAAV,CACJD,cAAMC,KAAN,CAAYC,mBADR,EAEJ,sDAFI,CAAN;AAID;;AACD,WAAOL,GAAG,CAACM,MAAJ,CAAWC,QAAX,CACJC,eADI,CACYR,GAAG,CAACS,MAAJ,CAAWC,SADvB,EAEJC,IAFI,CAEC,MAAM;AACV,UAAIC,YAAY,GAAGZ,GAAG,CAACM,MAAJ,CAAWO,eAA9B;;AACA,UAAIb,GAAG,CAACS,MAAJ,CAAWC,SAAX,IAAwB,UAA5B,EAAwC;AACtCE,QAAAA,YAAY,CAACE,IAAb,CAAkBC,KAAlB;AACD,OAFD,MAEO,IAAIf,GAAG,CAACS,MAAJ,CAAWC,SAAX,IAAwB,OAA5B,EAAqC;AAC1CE,QAAAA,YAAY,CAACI,IAAb,CAAkBD,KAAlB;AACD;;AACD,aAAO;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAAP;AACD,KAVI,EAWJC,KAXI,CAWEC,KAAK,IAAI;AACd,UAAI,CAACA,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAejB,cAAMC,KAAN,CAAYiB,gBAAnD,EAAsE;AACpE,eAAO;AAAEJ,UAAAA,QAAQ,EAAE;AAAZ,SAAP;AACD;;AACD,YAAME,KAAN;AACD,KAhBI,CAAP;AAiBD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,CAAW,QAAX,EAAqB,mBAArB,EAA0CC,UAAU,CAACC,6BAArD,EAAoFzB,GAAG,IAAI;AACzF,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KAFD;AAGD;;AA/B4C;;;eAkChCH,W","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nimport * as middleware from '../middlewares';\nimport Parse from 'parse/node';\n\nexport class PurgeRouter extends PromiseRouter {\n  handlePurge(req) {\n    if (req.auth.isReadOnly) {\n      throw new Parse.Error(\n        Parse.Error.OPERATION_FORBIDDEN,\n        \"read-only masterKey isn't allowed to purge a schema.\"\n      );\n    }\n    return req.config.database\n      .purgeCollection(req.params.className)\n      .then(() => {\n        var cacheAdapter = req.config.cacheController;\n        if (req.params.className == '_Session') {\n          cacheAdapter.user.clear();\n        } else if (req.params.className == '_Role') {\n          cacheAdapter.role.clear();\n        }\n        return { response: {} };\n      })\n      .catch(error => {\n        if (!error || (error && error.code === Parse.Error.OBJECT_NOT_FOUND)) {\n          return { response: {} };\n        }\n        throw error;\n      });\n  }\n\n  mountRoutes() {\n    this.route('DELETE', '/purge/:className', middleware.promiseEnforceMasterKeyAccess, req => {\n      return this.handlePurge(req);\n    });\n  }\n}\n\nexport default PurgeRouter;\n"],"file":"PurgeRouter.js"}