{"version":3,"sources":["../../src/Routers/UsersRouter.js"],"names":["UsersRouter","ClassesRouter","className","removeHiddenProperties","obj","key","Object","prototype","hasOwnProperty","call","test","_authenticateUserFromRequest","req","Promise","resolve","reject","payload","body","username","query","email","password","Parse","Error","USERNAME_MISSING","PASSWORD_MISSING","OBJECT_NOT_FOUND","user","isValidPassword","$or","config","database","find","then","results","length","loggerController","warn","filter","passwordCrypto","compare","correct","accountLockoutPolicy","AccountLockout","handleLoginAttempt","auth","isMaster","ACL","keys","verifyUserEmails","preventLoginWithUnverifiedEmail","emailVerified","EMAIL_NOT_FOUND","authData","forEach","provider","catch","error","handleMe","info","sessionToken","INVALID_SESSION_TOKEN","rest","Auth","master","include","clientSDK","context","response","handleLogIn","passwordPolicy","maxPasswordAge","changedAt","_password_changed_at","Date","update","_encode","__type","iso","expiresAt","getTime","filesController","expandFilesInObject","TriggerTypes","beforeLogin","User","fromJSON","assign","sessionData","createSession","userId","objectId","createdWith","action","authProvider","installationId","afterLoginUser","afterLogin","handleVerifyPassword","handleLogOut","success","undefined","records","del","_runAfterLogoutTrigger","session","afterLogout","Session","_throwOnBadEmailConfig","Config","validateEmailConfiguration","emailAdapter","userController","adapter","appName","publicServerURL","emailVerifyTokenValidityDuration","emailVerifyTokenReuseIfValid","e","INTERNAL_SERVER_ERROR","handleResetRequest","EMAIL_MISSING","INVALID_EMAIL_ADDRESS","sendPasswordResetEmail","err","code","handleVerificationEmailRequest","OTHER_CAUSE","regenerateEmailVerifyToken","sendVerificationEmail","mountRoutes","route","handleFind","promiseEnsureIdempotency","handleCreate","handleGet","handleUpdate","handleDelete"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,MAAMA,WAAN,SAA0BC,sBAA1B,CAAwC;AAC7CC,EAAAA,SAAS,GAAG;AACV,WAAO,OAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,SAAOC,sBAAP,CAA8BC,GAA9B,EAAmC;AACjC,SAAK,IAAIC,GAAT,IAAgBD,GAAhB,EAAqB;AACnB,UAAIE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,GAA1C,CAAJ,EAAoD;AAClD;AACA,YAAIA,GAAG,KAAK,QAAR,IAAoB,CAAC,0BAA0BK,IAA1B,CAA+BL,GAA/B,CAAzB,EAA8D;AAC5D,iBAAOD,GAAG,CAACC,GAAD,CAAV;AACD;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,4BAA4B,CAACC,GAAD,EAAM;AAChC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAIC,OAAO,GAAGJ,GAAG,CAACK,IAAlB;;AACA,UACG,CAACD,OAAO,CAACE,QAAT,IAAqBN,GAAG,CAACO,KAAzB,IAAkCP,GAAG,CAACO,KAAJ,CAAUD,QAA7C,IACC,CAACF,OAAO,CAACI,KAAT,IAAkBR,GAAG,CAACO,KAAtB,IAA+BP,GAAG,CAACO,KAAJ,CAAUC,KAF5C,EAGE;AACAJ,QAAAA,OAAO,GAAGJ,GAAG,CAACO,KAAd;AACD;;AACD,YAAM;AAAED,QAAAA,QAAF;AAAYE,QAAAA,KAAZ;AAAmBC,QAAAA;AAAnB,UAAgCL,OAAtC,CATsC,CAWtC;;AACA,UAAI,CAACE,QAAD,IAAa,CAACE,KAAlB,EAAyB;AACvB,cAAM,IAAIE,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,gBAA5B,EAA8C,6BAA9C,CAAN;AACD;;AACD,UAAI,CAACH,QAAL,EAAe;AACb,cAAM,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYE,gBAA5B,EAA8C,uBAA9C,CAAN;AACD;;AACD,UACE,OAAOJ,QAAP,KAAoB,QAApB,IACCD,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAD3B,IAECF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAHnC,EAIE;AACA,cAAM,IAAII,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYG,gBAA5B,EAA8C,4BAA9C,CAAN;AACD;;AAED,UAAIC,IAAJ;AACA,UAAIC,eAAe,GAAG,KAAtB;AACA,UAAIT,KAAJ;;AACA,UAAIC,KAAK,IAAIF,QAAb,EAAuB;AACrBC,QAAAA,KAAK,GAAG;AAAEC,UAAAA,KAAF;AAASF,UAAAA;AAAT,SAAR;AACD,OAFD,MAEO,IAAIE,KAAJ,EAAW;AAChBD,QAAAA,KAAK,GAAG;AAAEC,UAAAA;AAAF,SAAR;AACD,OAFM,MAEA;AACLD,QAAAA,KAAK,GAAG;AAAEU,UAAAA,GAAG,EAAE,CAAC;AAAEX,YAAAA;AAAF,WAAD,EAAe;AAAEE,YAAAA,KAAK,EAAEF;AAAT,WAAf;AAAP,SAAR;AACD;;AACD,aAAON,GAAG,CAACkB,MAAJ,CAAWC,QAAX,CACJC,IADI,CACC,OADD,EACUb,KADV,EAEJc,IAFI,CAECC,OAAO,IAAI;AACf,YAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;AACnB,gBAAM,IAAIb,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYG,gBAA5B,EAA8C,4BAA9C,CAAN;AACD;;AAED,YAAIQ,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACAvB,UAAAA,GAAG,CAACkB,MAAJ,CAAWM,gBAAX,CAA4BC,IAA5B,CACE,kGADF;AAGAV,UAAAA,IAAI,GAAGO,OAAO,CAACI,MAAR,CAAeX,IAAI,IAAIA,IAAI,CAACT,QAAL,KAAkBA,QAAzC,EAAmD,CAAnD,CAAP;AACD,SAND,MAMO;AACLS,UAAAA,IAAI,GAAGO,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,eAAOK,kBAAeC,OAAf,CAAuBnB,QAAvB,EAAiCM,IAAI,CAACN,QAAtC,CAAP;AACD,OAlBI,EAmBJY,IAnBI,CAmBCQ,OAAO,IAAI;AACfb,QAAAA,eAAe,GAAGa,OAAlB;AACA,cAAMC,oBAAoB,GAAG,IAAIC,uBAAJ,CAAmBhB,IAAnB,EAAyBf,GAAG,CAACkB,MAA7B,CAA7B;AACA,eAAOY,oBAAoB,CAACE,kBAArB,CAAwChB,eAAxC,CAAP;AACD,OAvBI,EAwBJK,IAxBI,CAwBC,MAAM;AACV,YAAI,CAACL,eAAL,EAAsB;AACpB,gBAAM,IAAIN,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYG,gBAA5B,EAA8C,4BAA9C,CAAN;AACD,SAHS,CAIV;AACA;AACA;AACA;;;AACA,YAAI,CAACd,GAAG,CAACiC,IAAJ,CAASC,QAAV,IAAsBnB,IAAI,CAACoB,GAA3B,IAAkCzC,MAAM,CAAC0C,IAAP,CAAYrB,IAAI,CAACoB,GAAjB,EAAsBZ,MAAtB,IAAgC,CAAtE,EAAyE;AACvE,gBAAM,IAAIb,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYG,gBAA5B,EAA8C,4BAA9C,CAAN;AACD;;AACD,YACEd,GAAG,CAACkB,MAAJ,CAAWmB,gBAAX,IACArC,GAAG,CAACkB,MAAJ,CAAWoB,+BADX,IAEA,CAACvB,IAAI,CAACwB,aAHR,EAIE;AACA,gBAAM,IAAI7B,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAY6B,eAA5B,EAA6C,6BAA7C,CAAN;AACD;;AAED,eAAOzB,IAAI,CAACN,QAAZ,CAnBU,CAqBV;AACA;;AACA,YAAIM,IAAI,CAAC0B,QAAT,EAAmB;AACjB/C,UAAAA,MAAM,CAAC0C,IAAP,CAAYrB,IAAI,CAAC0B,QAAjB,EAA2BC,OAA3B,CAAmCC,QAAQ,IAAI;AAC7C,gBAAI5B,IAAI,CAAC0B,QAAL,CAAcE,QAAd,MAA4B,IAAhC,EAAsC;AACpC,qBAAO5B,IAAI,CAAC0B,QAAL,CAAcE,QAAd,CAAP;AACD;AACF,WAJD;;AAKA,cAAIjD,MAAM,CAAC0C,IAAP,CAAYrB,IAAI,CAAC0B,QAAjB,EAA2BlB,MAA3B,IAAqC,CAAzC,EAA4C;AAC1C,mBAAOR,IAAI,CAAC0B,QAAZ;AACD;AACF;;AAED,eAAOvC,OAAO,CAACa,IAAD,CAAd;AACD,OA3DI,EA4DJ6B,KA5DI,CA4DEC,KAAK,IAAI;AACd,eAAO1C,MAAM,CAAC0C,KAAD,CAAb;AACD,OA9DI,CAAP;AA+DD,KAnGM,CAAP;AAoGD;;AAEDC,EAAAA,QAAQ,CAAC9C,GAAD,EAAM;AACZ,QAAI,CAACA,GAAG,CAAC+C,IAAL,IAAa,CAAC/C,GAAG,CAAC+C,IAAJ,CAASC,YAA3B,EAAyC;AACvC,YAAM,IAAItC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYsC,qBAA5B,EAAmD,uBAAnD,CAAN;AACD;;AACD,UAAMD,YAAY,GAAGhD,GAAG,CAAC+C,IAAJ,CAASC,YAA9B;AACA,WAAOE,cACJ9B,IADI,CAEHpB,GAAG,CAACkB,MAFD,EAGHiC,cAAKC,MAAL,CAAYpD,GAAG,CAACkB,MAAhB,CAHG,EAIH,UAJG,EAKH;AAAE8B,MAAAA;AAAF,KALG,EAMH;AAAEK,MAAAA,OAAO,EAAE;AAAX,KANG,EAOHrD,GAAG,CAAC+C,IAAJ,CAASO,SAPN,EAQHtD,GAAG,CAAC+C,IAAJ,CAASQ,OARN,EAUJlC,IAVI,CAUCmC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAAClC,OAAV,IAAqBkC,QAAQ,CAAClC,OAAT,CAAiBC,MAAjB,IAA2B,CAAhD,IAAqD,CAACiC,QAAQ,CAAClC,OAAT,CAAiB,CAAjB,EAAoBP,IAA9E,EAAoF;AAClF,cAAM,IAAIL,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYsC,qBAA5B,EAAmD,uBAAnD,CAAN;AACD,OAFD,MAEO;AACL,cAAMlC,IAAI,GAAGyC,QAAQ,CAAClC,OAAT,CAAiB,CAAjB,EAAoBP,IAAjC,CADK,CAEL;;AACAA,QAAAA,IAAI,CAACiC,YAAL,GAAoBA,YAApB,CAHK,CAKL;;AACA5D,QAAAA,WAAW,CAACG,sBAAZ,CAAmCwB,IAAnC;AAEA,eAAO;AAAEyC,UAAAA,QAAQ,EAAEzC;AAAZ,SAAP;AACD;AACF,KAvBI,CAAP;AAwBD;;AAED,QAAM0C,WAAN,CAAkBzD,GAAlB,EAAuB;AACrB,UAAMe,IAAI,GAAG,MAAM,KAAKhB,4BAAL,CAAkCC,GAAlC,CAAnB,CADqB,CAGrB;;AACA,QAAIA,GAAG,CAACkB,MAAJ,CAAWwC,cAAX,IAA6B1D,GAAG,CAACkB,MAAJ,CAAWwC,cAAX,CAA0BC,cAA3D,EAA2E;AACzE,UAAIC,SAAS,GAAG7C,IAAI,CAAC8C,oBAArB;;AAEA,UAAI,CAACD,SAAL,EAAgB;AACd;AACA;AACAA,QAAAA,SAAS,GAAG,IAAIE,IAAJ,EAAZ;AACA9D,QAAAA,GAAG,CAACkB,MAAJ,CAAWC,QAAX,CAAoB4C,MAApB,CACE,OADF,EAEE;AAAEzD,UAAAA,QAAQ,EAAES,IAAI,CAACT;AAAjB,SAFF,EAGE;AAAEuD,UAAAA,oBAAoB,EAAEnD,cAAMsD,OAAN,CAAcJ,SAAd;AAAxB,SAHF;AAKD,OATD,MASO;AACL;AACA,YAAIA,SAAS,CAACK,MAAV,IAAoB,MAAxB,EAAgC;AAC9BL,UAAAA,SAAS,GAAG,IAAIE,IAAJ,CAASF,SAAS,CAACM,GAAnB,CAAZ;AACD,SAJI,CAKL;;;AACA,cAAMC,SAAS,GAAG,IAAIL,IAAJ,CAChBF,SAAS,CAACQ,OAAV,KAAsB,WAAWpE,GAAG,CAACkB,MAAJ,CAAWwC,cAAX,CAA0BC,cAD3C,CAAlB;AAGA,YAAIQ,SAAS,GAAG,IAAIL,IAAJ,EAAhB,EACE;AACA,gBAAM,IAAIpD,cAAMC,KAAV,CACJD,cAAMC,KAAN,CAAYG,gBADR,EAEJ,wDAFI,CAAN;AAIH;AACF,KAhCoB,CAkCrB;;;AACA1B,IAAAA,WAAW,CAACG,sBAAZ,CAAmCwB,IAAnC;AAEAf,IAAAA,GAAG,CAACkB,MAAJ,CAAWmD,eAAX,CAA2BC,mBAA3B,CAA+CtE,GAAG,CAACkB,MAAnD,EAA2DH,IAA3D,EArCqB,CAuCrB;;AACA,UAAM,+BACJwD,gBAAaC,WADT,EAEJxE,GAAG,CAACiC,IAFA,EAGJvB,cAAM+D,IAAN,CAAWC,QAAX,CAAoBhF,MAAM,CAACiF,MAAP,CAAc;AAAErF,MAAAA,SAAS,EAAE;AAAb,KAAd,EAAsCyB,IAAtC,CAApB,CAHI,EAIJ,IAJI,EAKJf,GAAG,CAACkB,MALA,CAAN;;AAQA,UAAM;AAAE0D,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAiC1B,cAAK0B,aAAL,CAAmB7E,GAAG,CAACkB,MAAvB,EAA+B;AACpE4D,MAAAA,MAAM,EAAE/D,IAAI,CAACgE,QADuD;AAEpEC,MAAAA,WAAW,EAAE;AACXC,QAAAA,MAAM,EAAE,OADG;AAEXC,QAAAA,YAAY,EAAE;AAFH,OAFuD;AAMpEC,MAAAA,cAAc,EAAEnF,GAAG,CAAC+C,IAAJ,CAASoC;AAN2C,KAA/B,CAAvC;;AASApE,IAAAA,IAAI,CAACiC,YAAL,GAAoB4B,WAAW,CAAC5B,YAAhC;AAEA,UAAM6B,aAAa,EAAnB;;AAEA,UAAMO,cAAc,GAAG1E,cAAM+D,IAAN,CAAWC,QAAX,CAAoBhF,MAAM,CAACiF,MAAP,CAAc;AAAErF,MAAAA,SAAS,EAAE;AAAb,KAAd,EAAsCyB,IAAtC,CAApB,CAAvB;;AACA,mCACEwD,gBAAac,UADf,kCAEOrF,GAAG,CAACiC,IAFX;AAEiBlB,MAAAA,IAAI,EAAEqE;AAFvB,QAGEA,cAHF,EAIE,IAJF,EAKEpF,GAAG,CAACkB,MALN;AAQA,WAAO;AAAEsC,MAAAA,QAAQ,EAAEzC;AAAZ,KAAP;AACD;;AAEDuE,EAAAA,oBAAoB,CAACtF,GAAD,EAAM;AACxB,WAAO,KAAKD,4BAAL,CAAkCC,GAAlC,EACJqB,IADI,CACCN,IAAI,IAAI;AACZ;AACA3B,MAAAA,WAAW,CAACG,sBAAZ,CAAmCwB,IAAnC;AAEA,aAAO;AAAEyC,QAAAA,QAAQ,EAAEzC;AAAZ,OAAP;AACD,KANI,EAOJ6B,KAPI,CAOEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KATI,CAAP;AAUD;;AAED0C,EAAAA,YAAY,CAACvF,GAAD,EAAM;AAChB,UAAMwF,OAAO,GAAG;AAAEhC,MAAAA,QAAQ,EAAE;AAAZ,KAAhB;;AACA,QAAIxD,GAAG,CAAC+C,IAAJ,IAAY/C,GAAG,CAAC+C,IAAJ,CAASC,YAAzB,EAAuC;AACrC,aAAOE,cACJ9B,IADI,CAEHpB,GAAG,CAACkB,MAFD,EAGHiC,cAAKC,MAAL,CAAYpD,GAAG,CAACkB,MAAhB,CAHG,EAIH,UAJG,EAKH;AAAE8B,QAAAA,YAAY,EAAEhD,GAAG,CAAC+C,IAAJ,CAASC;AAAzB,OALG,EAMHyC,SANG,EAOHzF,GAAG,CAAC+C,IAAJ,CAASO,SAPN,EAQHtD,GAAG,CAAC+C,IAAJ,CAASQ,OARN,EAUJlC,IAVI,CAUCqE,OAAO,IAAI;AACf,YAAIA,OAAO,CAACpE,OAAR,IAAmBoE,OAAO,CAACpE,OAAR,CAAgBC,MAAvC,EAA+C;AAC7C,iBAAO2B,cACJyC,GADI,CAEH3F,GAAG,CAACkB,MAFD,EAGHiC,cAAKC,MAAL,CAAYpD,GAAG,CAACkB,MAAhB,CAHG,EAIH,UAJG,EAKHwE,OAAO,CAACpE,OAAR,CAAgB,CAAhB,EAAmByD,QALhB,EAMH/E,GAAG,CAAC+C,IAAJ,CAASQ,OANN,EAQJlC,IARI,CAQC,MAAM;AACV,iBAAKuE,sBAAL,CAA4B5F,GAA5B,EAAiC0F,OAAO,CAACpE,OAAR,CAAgB,CAAhB,CAAjC;;AACA,mBAAOrB,OAAO,CAACC,OAAR,CAAgBsF,OAAhB,CAAP;AACD,WAXI,CAAP;AAYD;;AACD,eAAOvF,OAAO,CAACC,OAAR,CAAgBsF,OAAhB,CAAP;AACD,OA1BI,CAAP;AA2BD;;AACD,WAAOvF,OAAO,CAACC,OAAR,CAAgBsF,OAAhB,CAAP;AACD;;AAEDI,EAAAA,sBAAsB,CAAC5F,GAAD,EAAM6F,OAAN,EAAe;AACnC;AACA,mCACEtB,gBAAauB,WADf,EAEE9F,GAAG,CAACiC,IAFN,EAGEvB,cAAMqF,OAAN,CAAcrB,QAAd,CAAuBhF,MAAM,CAACiF,MAAP,CAAc;AAAErF,MAAAA,SAAS,EAAE;AAAb,KAAd,EAAyCuG,OAAzC,CAAvB,CAHF,EAIE,IAJF,EAKE7F,GAAG,CAACkB,MALN;AAOD;;AAED8E,EAAAA,sBAAsB,CAAChG,GAAD,EAAM;AAC1B,QAAI;AACFiG,sBAAOC,0BAAP,CAAkC;AAChCC,QAAAA,YAAY,EAAEnG,GAAG,CAACkB,MAAJ,CAAWkF,cAAX,CAA0BC,OADR;AAEhCC,QAAAA,OAAO,EAAEtG,GAAG,CAACkB,MAAJ,CAAWoF,OAFY;AAGhCC,QAAAA,eAAe,EAAEvG,GAAG,CAACkB,MAAJ,CAAWqF,eAHI;AAIhCC,QAAAA,gCAAgC,EAAExG,GAAG,CAACkB,MAAJ,CAAWsF,gCAJb;AAKhCC,QAAAA,4BAA4B,EAAEzG,GAAG,CAACkB,MAAJ,CAAWuF;AALT,OAAlC;AAOD,KARD,CAQE,OAAOC,CAAP,EAAU;AACV,UAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB;AACA,cAAM,IAAIhG,cAAMC,KAAV,CACJD,cAAMC,KAAN,CAAYgG,qBADR,EAEJ,qHAFI,CAAN;AAID,OAND,MAMO;AACL,cAAMD,CAAN;AACD;AACF;AACF;;AAEDE,EAAAA,kBAAkB,CAAC5G,GAAD,EAAM;AACtB,SAAKgG,sBAAL,CAA4BhG,GAA5B;;AAEA,UAAM;AAAEQ,MAAAA;AAAF,QAAYR,GAAG,CAACK,IAAtB;;AACA,QAAI,CAACG,KAAL,EAAY;AACV,YAAM,IAAIE,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYkG,aAA5B,EAA2C,2BAA3C,CAAN;AACD;;AACD,QAAI,OAAOrG,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIE,cAAMC,KAAV,CACJD,cAAMC,KAAN,CAAYmG,qBADR,EAEJ,uCAFI,CAAN;AAID;;AACD,UAAMV,cAAc,GAAGpG,GAAG,CAACkB,MAAJ,CAAWkF,cAAlC;AACA,WAAOA,cAAc,CAACW,sBAAf,CAAsCvG,KAAtC,EAA6Ca,IAA7C,CACL,MAAM;AACJ,aAAOpB,OAAO,CAACC,OAAR,CAAgB;AACrBsD,QAAAA,QAAQ,EAAE;AADW,OAAhB,CAAP;AAGD,KALI,EAMLwD,GAAG,IAAI;AACL,UAAIA,GAAG,CAACC,IAAJ,KAAavG,cAAMC,KAAN,CAAYG,gBAA7B,EAA+C;AAC7C;AACA;AACA,eAAOb,OAAO,CAACC,OAAR,CAAgB;AACrBsD,UAAAA,QAAQ,EAAE;AADW,SAAhB,CAAP;AAGD,OAND,MAMO;AACL,cAAMwD,GAAN;AACD;AACF,KAhBI,CAAP;AAkBD;;AAEDE,EAAAA,8BAA8B,CAAClH,GAAD,EAAM;AAClC,SAAKgG,sBAAL,CAA4BhG,GAA5B;;AAEA,UAAM;AAAEQ,MAAAA;AAAF,QAAYR,GAAG,CAACK,IAAtB;;AACA,QAAI,CAACG,KAAL,EAAY;AACV,YAAM,IAAIE,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYkG,aAA5B,EAA2C,2BAA3C,CAAN;AACD;;AACD,QAAI,OAAOrG,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIE,cAAMC,KAAV,CACJD,cAAMC,KAAN,CAAYmG,qBADR,EAEJ,uCAFI,CAAN;AAID;;AAED,WAAO9G,GAAG,CAACkB,MAAJ,CAAWC,QAAX,CAAoBC,IAApB,CAAyB,OAAzB,EAAkC;AAAEZ,MAAAA,KAAK,EAAEA;AAAT,KAAlC,EAAoDa,IAApD,CAAyDC,OAAO,IAAI;AACzE,UAAI,CAACA,OAAO,CAACC,MAAT,IAAmBD,OAAO,CAACC,MAAR,GAAiB,CAAxC,EAA2C;AACzC,cAAM,IAAIb,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAY6B,eAA5B,EAA8C,4BAA2BhC,KAAM,EAA/E,CAAN;AACD;;AACD,YAAMO,IAAI,GAAGO,OAAO,CAAC,CAAD,CAApB,CAJyE,CAMzE;;AACA,aAAOP,IAAI,CAACN,QAAZ;;AAEA,UAAIM,IAAI,CAACwB,aAAT,EAAwB;AACtB,cAAM,IAAI7B,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYwG,WAA5B,EAA0C,SAAQ3G,KAAM,uBAAxD,CAAN;AACD;;AAED,YAAM4F,cAAc,GAAGpG,GAAG,CAACkB,MAAJ,CAAWkF,cAAlC;AACA,aAAOA,cAAc,CAACgB,0BAAf,CAA0CrG,IAA1C,EAAgDM,IAAhD,CAAqD,MAAM;AAChE+E,QAAAA,cAAc,CAACiB,qBAAf,CAAqCtG,IAArC;AACA,eAAO;AAAEyC,UAAAA,QAAQ,EAAE;AAAZ,SAAP;AACD,OAHM,CAAP;AAID,KAlBM,CAAP;AAmBD;;AAED8D,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,CAAW,KAAX,EAAkB,QAAlB,EAA4BvH,GAAG,IAAI;AACjC,aAAO,KAAKwH,UAAL,CAAgBxH,GAAhB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,MAAX,EAAmB,QAAnB,EAA6BE,qCAA7B,EAAuDzH,GAAG,IAAI;AAC5D,aAAO,KAAK0H,YAAL,CAAkB1H,GAAlB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,KAAX,EAAkB,WAAlB,EAA+BvH,GAAG,IAAI;AACpC,aAAO,KAAK8C,QAAL,CAAc9C,GAAd,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,KAAX,EAAkB,kBAAlB,EAAsCvH,GAAG,IAAI;AAC3C,aAAO,KAAK2H,SAAL,CAAe3H,GAAf,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,KAAX,EAAkB,kBAAlB,EAAsCE,qCAAtC,EAAgEzH,GAAG,IAAI;AACrE,aAAO,KAAK4H,YAAL,CAAkB5H,GAAlB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,QAAX,EAAqB,kBAArB,EAAyCvH,GAAG,IAAI;AAC9C,aAAO,KAAK6H,YAAL,CAAkB7H,GAAlB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,KAAX,EAAkB,QAAlB,EAA4BvH,GAAG,IAAI;AACjC,aAAO,KAAKyD,WAAL,CAAiBzD,GAAjB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,MAAX,EAAmB,QAAnB,EAA6BvH,GAAG,IAAI;AAClC,aAAO,KAAKyD,WAAL,CAAiBzD,GAAjB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,MAAX,EAAmB,SAAnB,EAA8BvH,GAAG,IAAI;AACnC,aAAO,KAAKuF,YAAL,CAAkBvF,GAAlB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,MAAX,EAAmB,uBAAnB,EAA4CvH,GAAG,IAAI;AACjD,aAAO,KAAK4G,kBAAL,CAAwB5G,GAAxB,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,MAAX,EAAmB,2BAAnB,EAAgDvH,GAAG,IAAI;AACrD,aAAO,KAAKkH,8BAAL,CAAoClH,GAApC,CAAP;AACD,KAFD;AAGA,SAAKuH,KAAL,CAAW,KAAX,EAAkB,iBAAlB,EAAqCvH,GAAG,IAAI;AAC1C,aAAO,KAAKsF,oBAAL,CAA0BtF,GAA1B,CAAP;AACD,KAFD;AAGD;;AAna4C;;;eAsahCZ,W","sourcesContent":["// These methods handle the User-related routes.\n\nimport Parse from 'parse/node';\nimport Config from '../Config';\nimport AccountLockout from '../AccountLockout';\nimport ClassesRouter from './ClassesRouter';\nimport rest from '../rest';\nimport Auth from '../Auth';\nimport passwordCrypto from '../password';\nimport { maybeRunTrigger, Types as TriggerTypes } from '../triggers';\nimport { promiseEnsureIdempotency } from '../middlewares';\n\nexport class UsersRouter extends ClassesRouter {\n  className() {\n    return '_User';\n  }\n\n  /**\n   * Removes all \"_\" prefixed properties from an object, except \"__type\"\n   * @param {Object} obj An object.\n   */\n  static removeHiddenProperties(obj) {\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        // Regexp comes from Parse.Object.prototype.validate\n        if (key !== '__type' && !/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {\n          delete obj[key];\n        }\n      }\n    }\n  }\n\n  /**\n   * Validates a password request in login and verifyPassword\n   * @param {Object} req The request\n   * @returns {Object} User object\n   * @private\n   */\n  _authenticateUserFromRequest(req) {\n    return new Promise((resolve, reject) => {\n      // Use query parameters instead if provided in url\n      let payload = req.body;\n      if (\n        (!payload.username && req.query && req.query.username) ||\n        (!payload.email && req.query && req.query.email)\n      ) {\n        payload = req.query;\n      }\n      const { username, email, password } = payload;\n\n      // TODO: use the right error codes / descriptions.\n      if (!username && !email) {\n        throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'username/email is required.');\n      }\n      if (!password) {\n        throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'password is required.');\n      }\n      if (\n        typeof password !== 'string' ||\n        (email && typeof email !== 'string') ||\n        (username && typeof username !== 'string')\n      ) {\n        throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n      }\n\n      let user;\n      let isValidPassword = false;\n      let query;\n      if (email && username) {\n        query = { email, username };\n      } else if (email) {\n        query = { email };\n      } else {\n        query = { $or: [{ username }, { email: username }] };\n      }\n      return req.config.database\n        .find('_User', query)\n        .then(results => {\n          if (!results.length) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n\n          if (results.length > 1) {\n            // corner case where user1 has username == user2 email\n            req.config.loggerController.warn(\n              \"There is a user which email is the same as another user's username, logging in based on username\"\n            );\n            user = results.filter(user => user.username === username)[0];\n          } else {\n            user = results[0];\n          }\n\n          return passwordCrypto.compare(password, user.password);\n        })\n        .then(correct => {\n          isValidPassword = correct;\n          const accountLockoutPolicy = new AccountLockout(user, req.config);\n          return accountLockoutPolicy.handleLoginAttempt(isValidPassword);\n        })\n        .then(() => {\n          if (!isValidPassword) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n          // Ensure the user isn't locked out\n          // A locked out user won't be able to login\n          // To lock a user out, just set the ACL to `masterKey` only  ({}).\n          // Empty ACL is OK\n          if (!req.auth.isMaster && user.ACL && Object.keys(user.ACL).length == 0) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n          if (\n            req.config.verifyUserEmails &&\n            req.config.preventLoginWithUnverifiedEmail &&\n            !user.emailVerified\n          ) {\n            throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, 'User email is not verified.');\n          }\n\n          delete user.password;\n\n          // Sometimes the authData still has null on that keys\n          // https://github.com/parse-community/parse-server/issues/935\n          if (user.authData) {\n            Object.keys(user.authData).forEach(provider => {\n              if (user.authData[provider] === null) {\n                delete user.authData[provider];\n              }\n            });\n            if (Object.keys(user.authData).length == 0) {\n              delete user.authData;\n            }\n          }\n\n          return resolve(user);\n        })\n        .catch(error => {\n          return reject(error);\n        });\n    });\n  }\n\n  handleMe(req) {\n    if (!req.info || !req.info.sessionToken) {\n      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n    }\n    const sessionToken = req.info.sessionToken;\n    return rest\n      .find(\n        req.config,\n        Auth.master(req.config),\n        '_Session',\n        { sessionToken },\n        { include: 'user' },\n        req.info.clientSDK,\n        req.info.context\n      )\n      .then(response => {\n        if (!response.results || response.results.length == 0 || !response.results[0].user) {\n          throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n        } else {\n          const user = response.results[0].user;\n          // Send token back on the login, because SDKs expect that.\n          user.sessionToken = sessionToken;\n\n          // Remove hidden properties.\n          UsersRouter.removeHiddenProperties(user);\n\n          return { response: user };\n        }\n      });\n  }\n\n  async handleLogIn(req) {\n    const user = await this._authenticateUserFromRequest(req);\n\n    // handle password expiry policy\n    if (req.config.passwordPolicy && req.config.passwordPolicy.maxPasswordAge) {\n      let changedAt = user._password_changed_at;\n\n      if (!changedAt) {\n        // password was created before expiry policy was enabled.\n        // simply update _User object so that it will start enforcing from now\n        changedAt = new Date();\n        req.config.database.update(\n          '_User',\n          { username: user.username },\n          { _password_changed_at: Parse._encode(changedAt) }\n        );\n      } else {\n        // check whether the password has expired\n        if (changedAt.__type == 'Date') {\n          changedAt = new Date(changedAt.iso);\n        }\n        // Calculate the expiry time.\n        const expiresAt = new Date(\n          changedAt.getTime() + 86400000 * req.config.passwordPolicy.maxPasswordAge\n        );\n        if (expiresAt < new Date())\n          // fail of current time is past password expiry time\n          throw new Parse.Error(\n            Parse.Error.OBJECT_NOT_FOUND,\n            'Your password has expired. Please reset your password.'\n          );\n      }\n    }\n\n    // Remove hidden properties.\n    UsersRouter.removeHiddenProperties(user);\n\n    req.config.filesController.expandFilesInObject(req.config, user);\n\n    // Before login trigger; throws if failure\n    await maybeRunTrigger(\n      TriggerTypes.beforeLogin,\n      req.auth,\n      Parse.User.fromJSON(Object.assign({ className: '_User' }, user)),\n      null,\n      req.config\n    );\n\n    const { sessionData, createSession } = Auth.createSession(req.config, {\n      userId: user.objectId,\n      createdWith: {\n        action: 'login',\n        authProvider: 'password',\n      },\n      installationId: req.info.installationId,\n    });\n\n    user.sessionToken = sessionData.sessionToken;\n\n    await createSession();\n\n    const afterLoginUser = Parse.User.fromJSON(Object.assign({ className: '_User' }, user));\n    maybeRunTrigger(\n      TriggerTypes.afterLogin,\n      { ...req.auth, user: afterLoginUser },\n      afterLoginUser,\n      null,\n      req.config\n    );\n\n    return { response: user };\n  }\n\n  handleVerifyPassword(req) {\n    return this._authenticateUserFromRequest(req)\n      .then(user => {\n        // Remove hidden properties.\n        UsersRouter.removeHiddenProperties(user);\n\n        return { response: user };\n      })\n      .catch(error => {\n        throw error;\n      });\n  }\n\n  handleLogOut(req) {\n    const success = { response: {} };\n    if (req.info && req.info.sessionToken) {\n      return rest\n        .find(\n          req.config,\n          Auth.master(req.config),\n          '_Session',\n          { sessionToken: req.info.sessionToken },\n          undefined,\n          req.info.clientSDK,\n          req.info.context\n        )\n        .then(records => {\n          if (records.results && records.results.length) {\n            return rest\n              .del(\n                req.config,\n                Auth.master(req.config),\n                '_Session',\n                records.results[0].objectId,\n                req.info.context\n              )\n              .then(() => {\n                this._runAfterLogoutTrigger(req, records.results[0]);\n                return Promise.resolve(success);\n              });\n          }\n          return Promise.resolve(success);\n        });\n    }\n    return Promise.resolve(success);\n  }\n\n  _runAfterLogoutTrigger(req, session) {\n    // After logout trigger\n    maybeRunTrigger(\n      TriggerTypes.afterLogout,\n      req.auth,\n      Parse.Session.fromJSON(Object.assign({ className: '_Session' }, session)),\n      null,\n      req.config\n    );\n  }\n\n  _throwOnBadEmailConfig(req) {\n    try {\n      Config.validateEmailConfiguration({\n        emailAdapter: req.config.userController.adapter,\n        appName: req.config.appName,\n        publicServerURL: req.config.publicServerURL,\n        emailVerifyTokenValidityDuration: req.config.emailVerifyTokenValidityDuration,\n        emailVerifyTokenReuseIfValid: req.config.emailVerifyTokenReuseIfValid,\n      });\n    } catch (e) {\n      if (typeof e === 'string') {\n        // Maybe we need a Bad Configuration error, but the SDKs won't understand it. For now, Internal Server Error.\n        throw new Parse.Error(\n          Parse.Error.INTERNAL_SERVER_ERROR,\n          'An appName, publicServerURL, and emailAdapter are required for password reset and email verification functionality.'\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  handleResetRequest(req) {\n    this._throwOnBadEmailConfig(req);\n\n    const { email } = req.body;\n    if (!email) {\n      throw new Parse.Error(Parse.Error.EMAIL_MISSING, 'you must provide an email');\n    }\n    if (typeof email !== 'string') {\n      throw new Parse.Error(\n        Parse.Error.INVALID_EMAIL_ADDRESS,\n        'you must provide a valid email string'\n      );\n    }\n    const userController = req.config.userController;\n    return userController.sendPasswordResetEmail(email).then(\n      () => {\n        return Promise.resolve({\n          response: {},\n        });\n      },\n      err => {\n        if (err.code === Parse.Error.OBJECT_NOT_FOUND) {\n          // Return success so that this endpoint can't\n          // be used to enumerate valid emails\n          return Promise.resolve({\n            response: {},\n          });\n        } else {\n          throw err;\n        }\n      }\n    );\n  }\n\n  handleVerificationEmailRequest(req) {\n    this._throwOnBadEmailConfig(req);\n\n    const { email } = req.body;\n    if (!email) {\n      throw new Parse.Error(Parse.Error.EMAIL_MISSING, 'you must provide an email');\n    }\n    if (typeof email !== 'string') {\n      throw new Parse.Error(\n        Parse.Error.INVALID_EMAIL_ADDRESS,\n        'you must provide a valid email string'\n      );\n    }\n\n    return req.config.database.find('_User', { email: email }).then(results => {\n      if (!results.length || results.length < 1) {\n        throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, `No user found with email ${email}`);\n      }\n      const user = results[0];\n\n      // remove password field, messes with saving on postgres\n      delete user.password;\n\n      if (user.emailVerified) {\n        throw new Parse.Error(Parse.Error.OTHER_CAUSE, `Email ${email} is already verified.`);\n      }\n\n      const userController = req.config.userController;\n      return userController.regenerateEmailVerifyToken(user).then(() => {\n        userController.sendVerificationEmail(user);\n        return { response: {} };\n      });\n    });\n  }\n\n  mountRoutes() {\n    this.route('GET', '/users', req => {\n      return this.handleFind(req);\n    });\n    this.route('POST', '/users', promiseEnsureIdempotency, req => {\n      return this.handleCreate(req);\n    });\n    this.route('GET', '/users/me', req => {\n      return this.handleMe(req);\n    });\n    this.route('GET', '/users/:objectId', req => {\n      return this.handleGet(req);\n    });\n    this.route('PUT', '/users/:objectId', promiseEnsureIdempotency, req => {\n      return this.handleUpdate(req);\n    });\n    this.route('DELETE', '/users/:objectId', req => {\n      return this.handleDelete(req);\n    });\n    this.route('GET', '/login', req => {\n      return this.handleLogIn(req);\n    });\n    this.route('POST', '/login', req => {\n      return this.handleLogIn(req);\n    });\n    this.route('POST', '/logout', req => {\n      return this.handleLogOut(req);\n    });\n    this.route('POST', '/requestPasswordReset', req => {\n      return this.handleResetRequest(req);\n    });\n    this.route('POST', '/verificationEmailRequest', req => {\n      return this.handleVerificationEmailRequest(req);\n    });\n    this.route('GET', '/verifyPassword', req => {\n      return this.handleVerifyPassword(req);\n    });\n  }\n}\n\nexport default UsersRouter;\n"],"file":"UsersRouter.js"}