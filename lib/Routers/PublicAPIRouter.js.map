{"version":3,"sources":["../../src/Routers/PublicAPIRouter.js"],"names":["public_html","path","resolve","__dirname","views","PublicAPIRouter","PromiseRouter","verifyEmail","req","username","token","rawToken","query","toString","appId","params","config","Config","get","invalidRequest","publicServerURL","missingPublicServerURL","invalidLink","userController","then","qs","stringify","Promise","status","location","verifyEmailSuccessURL","invalidVerificationLink","resendVerificationEmail","body","linkSendSuccessURL","linkSendFailURL","changePassword","reject","id","text","fs","readFile","err","data","replace","requestResetPassword","checkResetTokenValidity","applicationId","app","appName","choosePasswordURL","resetPassword","new_password","xhr","Parse","Error","USERNAME_MISSING","OTHER_CAUSE","PASSWORD_MISSING","updatePassword","success","result","error","response","encodedUsername","encodeURIComponent","passwordResetSuccessURL","invalidLinkURL","invalidVerificationLinkURL","message","setConfig","mountRoutes","route","expressRouter","router","express","Router","use","static"],"mappings":"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","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nimport Config from '../Config';\nimport express from 'express';\nimport path from 'path';\nimport fs from 'fs';\nimport qs from 'querystring';\nimport { Parse } from 'parse/node';\n\nconst public_html = path.resolve(__dirname, '../../public_html');\nconst views = path.resolve(__dirname, '../../views');\n\nexport class PublicAPIRouter extends PromiseRouter {\n  verifyEmail(req) {\n    const { username, token: rawToken } = req.query;\n    const token = rawToken && typeof rawToken !== 'string' ? rawToken.toString() : rawToken;\n\n    const appId = req.params.appId;\n    const config = Config.get(appId);\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    if (!token || !username) {\n      return this.invalidLink(req);\n    }\n\n    const userController = config.userController;\n    return userController.verifyEmail(username, token).then(\n      () => {\n        const params = qs.stringify({ username });\n        return Promise.resolve({\n          status: 302,\n          location: `${config.verifyEmailSuccessURL}?${params}`,\n        });\n      },\n      () => {\n        return this.invalidVerificationLink(req);\n      }\n    );\n  }\n\n  resendVerificationEmail(req) {\n    const username = req.body.username;\n    const appId = req.params.appId;\n    const config = Config.get(appId);\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    if (!username) {\n      return this.invalidLink(req);\n    }\n\n    const userController = config.userController;\n\n    return userController.resendVerificationEmail(username).then(\n      () => {\n        return Promise.resolve({\n          status: 302,\n          location: `${config.linkSendSuccessURL}`,\n        });\n      },\n      () => {\n        return Promise.resolve({\n          status: 302,\n          location: `${config.linkSendFailURL}`,\n        });\n      }\n    );\n  }\n\n  changePassword(req) {\n    return new Promise((resolve, reject) => {\n      const config = Config.get(req.query.id);\n\n      if (!config) {\n        this.invalidRequest();\n      }\n\n      if (!config.publicServerURL) {\n        return resolve({\n          status: 404,\n          text: 'Not found.',\n        });\n      }\n      // Should we keep the file in memory or leave like that?\n      fs.readFile(path.resolve(views, 'choose_password'), 'utf-8', (err, data) => {\n        if (err) {\n          return reject(err);\n        }\n        data = data.replace('PARSE_SERVER_URL', `'${config.publicServerURL}'`);\n        resolve({\n          text: data,\n        });\n      });\n    });\n  }\n\n  requestResetPassword(req) {\n    const config = req.config;\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    const { username, token: rawToken } = req.query;\n    const token = rawToken && typeof rawToken !== 'string' ? rawToken.toString() : rawToken;\n\n    if (!username || !token) {\n      return this.invalidLink(req);\n    }\n\n    return config.userController.checkResetTokenValidity(username, token).then(\n      () => {\n        const params = qs.stringify({\n          token,\n          id: config.applicationId,\n          username,\n          app: config.appName,\n        });\n        return Promise.resolve({\n          status: 302,\n          location: `${config.choosePasswordURL}?${params}`,\n        });\n      },\n      () => {\n        return this.invalidLink(req);\n      }\n    );\n  }\n\n  resetPassword(req) {\n    const config = req.config;\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    if (!config.publicServerURL) {\n      return this.missingPublicServerURL();\n    }\n\n    const { username, new_password, token: rawToken } = req.body;\n    const token = rawToken && typeof rawToken !== 'string' ? rawToken.toString() : rawToken;\n\n    if ((!username || !token || !new_password) && req.xhr === false) {\n      return this.invalidLink(req);\n    }\n\n    if (!username) {\n      throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'Missing username');\n    }\n\n    if (!token) {\n      throw new Parse.Error(Parse.Error.OTHER_CAUSE, 'Missing token');\n    }\n\n    if (!new_password) {\n      throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'Missing password');\n    }\n\n    return config.userController\n      .updatePassword(username, token, new_password)\n      .then(\n        () => {\n          return Promise.resolve({\n            success: true,\n          });\n        },\n        err => {\n          return Promise.resolve({\n            success: false,\n            err,\n          });\n        }\n      )\n      .then(result => {\n        const params = qs.stringify({\n          username: username,\n          token: token,\n          id: config.applicationId,\n          error: result.err,\n          app: config.appName,\n        });\n\n        if (req.xhr) {\n          if (result.success) {\n            return Promise.resolve({\n              status: 200,\n              response: 'Password successfully reset',\n            });\n          }\n          if (result.err) {\n            throw new Parse.Error(Parse.Error.OTHER_CAUSE, `${result.err}`);\n          }\n        }\n\n        const encodedUsername = encodeURIComponent(username);\n        const location = result.success\n          ? `${config.passwordResetSuccessURL}?username=${encodedUsername}`\n          : `${config.choosePasswordURL}?${params}`;\n\n        return Promise.resolve({\n          status: 302,\n          location,\n        });\n      });\n  }\n\n  invalidLink(req) {\n    return Promise.resolve({\n      status: 302,\n      location: req.config.invalidLinkURL,\n    });\n  }\n\n  invalidVerificationLink(req) {\n    const config = req.config;\n    if (req.query.username && req.params.appId) {\n      const params = qs.stringify({\n        username: req.query.username,\n        appId: req.params.appId,\n      });\n      return Promise.resolve({\n        status: 302,\n        location: `${config.invalidVerificationLinkURL}?${params}`,\n      });\n    } else {\n      return this.invalidLink(req);\n    }\n  }\n\n  missingPublicServerURL() {\n    return Promise.resolve({\n      text: 'Not found.',\n      status: 404,\n    });\n  }\n\n  invalidRequest() {\n    const error = new Error();\n    error.status = 403;\n    error.message = 'unauthorized';\n    throw error;\n  }\n\n  setConfig(req) {\n    req.config = Config.get(req.params.appId);\n    return Promise.resolve();\n  }\n\n  mountRoutes() {\n    this.route(\n      'GET',\n      '/apps/:appId/verify_email',\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.verifyEmail(req);\n      }\n    );\n\n    this.route(\n      'POST',\n      '/apps/:appId/resend_verification_email',\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.resendVerificationEmail(req);\n      }\n    );\n\n    this.route('GET', '/apps/choose_password', req => {\n      return this.changePassword(req);\n    });\n\n    this.route(\n      'POST',\n      '/apps/:appId/request_password_reset',\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.resetPassword(req);\n      }\n    );\n\n    this.route(\n      'GET',\n      '/apps/:appId/request_password_reset',\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.requestResetPassword(req);\n      }\n    );\n  }\n\n  expressRouter() {\n    const router = express.Router();\n    router.use('/apps', express.static(public_html));\n    router.use('/', super.expressRouter());\n    return router;\n  }\n}\n\nexport default PublicAPIRouter;\n"],"file":"PublicAPIRouter.js"}