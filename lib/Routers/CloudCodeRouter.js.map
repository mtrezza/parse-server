{"version":3,"sources":["../../src/Routers/CloudCodeRouter.js"],"names":["triggers","require","middleware","formatJobSchedule","job_schedule","startAfter","Date","toISOString","validateJobSchedule","config","jobs","getJobs","applicationId","jobName","Parse","Error","INTERNAL_SERVER_ERROR","CloudCodeRouter","PromiseRouter","mountRoutes","route","promiseEnforceMasterKeyAccess","getJobsData","createJob","editJob","deleteJob","req","rest","find","auth","then","scheduledJobs","response","results","in_use","map","job","Object","keys","body","create","client","info","context","objectId","params","update","undefined","del"],"mappings":"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","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nimport Parse from 'parse/node';\nimport rest from '../rest';\nconst triggers = require('../triggers');\nconst middleware = require('../middlewares');\n\nfunction formatJobSchedule(job_schedule) {\n  if (typeof job_schedule.startAfter === 'undefined') {\n    job_schedule.startAfter = new Date().toISOString();\n  }\n  return job_schedule;\n}\n\nfunction validateJobSchedule(config, job_schedule) {\n  const jobs = triggers.getJobs(config.applicationId) || {};\n  if (job_schedule.jobName && !jobs[job_schedule.jobName]) {\n    throw new Parse.Error(\n      Parse.Error.INTERNAL_SERVER_ERROR,\n      'Cannot Schedule a job that is not deployed'\n    );\n  }\n}\n\nexport class CloudCodeRouter extends PromiseRouter {\n  mountRoutes() {\n    this.route(\n      'GET',\n      '/cloud_code/jobs',\n      middleware.promiseEnforceMasterKeyAccess,\n      CloudCodeRouter.getJobs\n    );\n    this.route(\n      'GET',\n      '/cloud_code/jobs/data',\n      middleware.promiseEnforceMasterKeyAccess,\n      CloudCodeRouter.getJobsData\n    );\n    this.route(\n      'POST',\n      '/cloud_code/jobs',\n      middleware.promiseEnforceMasterKeyAccess,\n      CloudCodeRouter.createJob\n    );\n    this.route(\n      'PUT',\n      '/cloud_code/jobs/:objectId',\n      middleware.promiseEnforceMasterKeyAccess,\n      CloudCodeRouter.editJob\n    );\n    this.route(\n      'DELETE',\n      '/cloud_code/jobs/:objectId',\n      middleware.promiseEnforceMasterKeyAccess,\n      CloudCodeRouter.deleteJob\n    );\n  }\n\n  static getJobs(req) {\n    return rest.find(req.config, req.auth, '_JobSchedule', {}, {}).then(scheduledJobs => {\n      return {\n        response: scheduledJobs.results,\n      };\n    });\n  }\n\n  static getJobsData(req) {\n    const config = req.config;\n    const jobs = triggers.getJobs(config.applicationId) || {};\n    return rest.find(req.config, req.auth, '_JobSchedule', {}, {}).then(scheduledJobs => {\n      return {\n        response: {\n          in_use: scheduledJobs.results.map(job => job.jobName),\n          jobs: Object.keys(jobs),\n        },\n      };\n    });\n  }\n\n  static createJob(req) {\n    const { job_schedule } = req.body;\n    validateJobSchedule(req.config, job_schedule);\n    return rest.create(\n      req.config,\n      req.auth,\n      '_JobSchedule',\n      formatJobSchedule(job_schedule),\n      req.client,\n      req.info.context\n    );\n  }\n\n  static editJob(req) {\n    const { objectId } = req.params;\n    const { job_schedule } = req.body;\n    validateJobSchedule(req.config, job_schedule);\n    return rest\n      .update(\n        req.config,\n        req.auth,\n        '_JobSchedule',\n        { objectId },\n        formatJobSchedule(job_schedule),\n        undefined,\n        req.info.context\n      )\n      .then(response => {\n        return {\n          response,\n        };\n      });\n  }\n\n  static deleteJob(req) {\n    const { objectId } = req.params;\n    return rest\n      .del(req.config, req.auth, '_JobSchedule', objectId, req.info.context)\n      .then(response => {\n        return {\n          response,\n        };\n      });\n  }\n}\n"],"file":"CloudCodeRouter.js"}