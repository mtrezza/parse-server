{"version":3,"sources":["../../src/Routers/GlobalConfigRouter.js"],"names":["GlobalConfigRouter","PromiseRouter","getGlobalConfig","req","config","database","find","objectId","limit","then","results","length","response","params","globalConfig","auth","isMaster","masterKeyOnly","undefined","param","updateGlobalConfig","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","body","update","Object","keys","reduce","acc","key","upsert","result","mountRoutes","route","middleware","promiseEnforceMasterKeyAccess"],"mappings":"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","sourcesContent":["// global_config.js\nimport Parse from 'parse/node';\nimport PromiseRouter from '../PromiseRouter';\nimport * as middleware from '../middlewares';\n\nexport class GlobalConfigRouter extends PromiseRouter {\n  getGlobalConfig(req) {\n    return req.config.database\n      .find('_GlobalConfig', { objectId: '1' }, { limit: 1 })\n      .then(results => {\n        if (results.length != 1) {\n          // If there is no config in the database - return empty config.\n          return { response: { params: {} } };\n        }\n        const globalConfig = results[0];\n        if (!req.auth.isMaster && globalConfig.masterKeyOnly !== undefined) {\n          for (const param in globalConfig.params) {\n            if (globalConfig.masterKeyOnly[param]) {\n              delete globalConfig.params[param];\n              delete globalConfig.masterKeyOnly[param];\n            }\n          }\n        }\n        return {\n          response: {\n            params: globalConfig.params,\n            masterKeyOnly: globalConfig.masterKeyOnly,\n          },\n        };\n      });\n  }\n\n  updateGlobalConfig(req) {\n    if (req.auth.isReadOnly) {\n      throw new Parse.Error(\n        Parse.Error.OPERATION_FORBIDDEN,\n        \"read-only masterKey isn't allowed to update the config.\"\n      );\n    }\n    const params = req.body.params;\n    const masterKeyOnly = req.body.masterKeyOnly || {};\n    // Transform in dot notation to make sure it works\n    const update = Object.keys(params).reduce((acc, key) => {\n      acc[`params.${key}`] = params[key];\n      acc[`masterKeyOnly.${key}`] = masterKeyOnly[key] || false;\n      return acc;\n    }, {});\n    return req.config.database\n      .update('_GlobalConfig', { objectId: '1' }, update, { upsert: true })\n      .then(() => ({ response: { result: true } }));\n  }\n\n  mountRoutes() {\n    this.route('GET', '/config', req => {\n      return this.getGlobalConfig(req);\n    });\n    this.route('PUT', '/config', middleware.promiseEnforceMasterKeyAccess, req => {\n      return this.updateGlobalConfig(req);\n    });\n  }\n}\n\nexport default GlobalConfigRouter;\n"],"file":"GlobalConfigRouter.js"}