{"version":3,"sources":["../../src/Routers/LogsRouter.js"],"names":["LogsRouter","PromiseRouter","mountRoutes","route","middleware","promiseEnforceMasterKeyAccess","validateRequest","req","handleGET","config","loggerController","Parse","Error","PUSH_MISCONFIGURED","from","query","until","size","n","order","level","options","getLogs","then","result","Promise","resolve","response"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,UAAN,SAAyBC,sBAAzB,CAAuC;AAC5CC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,CACE,KADF,EAEE,YAFF,EAGEC,UAAU,CAACC,6BAHb,EAIE,KAAKC,eAJP,EAKEC,GAAG,IAAI;AACL,aAAO,KAAKC,SAAL,CAAeD,GAAf,CAAP;AACD,KAPH;AASD;;AAEDD,EAAAA,eAAe,CAACC,GAAD,EAAM;AACnB,QAAI,CAACA,GAAG,CAACE,MAAL,IAAe,CAACF,GAAG,CAACE,MAAJ,CAAWC,gBAA/B,EAAiD;AAC/C,YAAM,IAAIC,YAAMC,KAAV,CAAgBD,YAAMC,KAAN,CAAYC,kBAA5B,EAAgD,iCAAhD,CAAN;AACD;AACF,GAjB2C,CAmB5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,EAAAA,SAAS,CAACD,GAAD,EAAM;AACb,UAAMO,IAAI,GAAGP,GAAG,CAACQ,KAAJ,CAAUD,IAAvB;AACA,UAAME,KAAK,GAAGT,GAAG,CAACQ,KAAJ,CAAUC,KAAxB;AACA,QAAIC,IAAI,GAAGV,GAAG,CAACQ,KAAJ,CAAUE,IAArB;;AACA,QAAIV,GAAG,CAACQ,KAAJ,CAAUG,CAAd,EAAiB;AACfD,MAAAA,IAAI,GAAGV,GAAG,CAACQ,KAAJ,CAAUG,CAAjB;AACD;;AAED,UAAMC,KAAK,GAAGZ,GAAG,CAACQ,KAAJ,CAAUI,KAAxB;AACA,UAAMC,KAAK,GAAGb,GAAG,CAACQ,KAAJ,CAAUK,KAAxB;AACA,UAAMC,OAAO,GAAG;AACdP,MAAAA,IADc;AAEdE,MAAAA,KAFc;AAGdC,MAAAA,IAHc;AAIdE,MAAAA,KAJc;AAKdC,MAAAA;AALc,KAAhB;AAQA,WAAOb,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4BY,OAA5B,CAAoCD,OAApC,EAA6CE,IAA7C,CAAkDC,MAAM,IAAI;AACjE,aAAOC,OAAO,CAACC,OAAR,CAAgB;AACrBC,QAAAA,QAAQ,EAAEH;AADW,OAAhB,CAAP;AAGD,KAJM,CAAP;AAKD;;AAlD2C;;;eAqD/BxB,U","sourcesContent":["import { Parse } from 'parse/node';\nimport PromiseRouter from '../PromiseRouter';\nimport * as middleware from '../middlewares';\n\nexport class LogsRouter extends PromiseRouter {\n  mountRoutes() {\n    this.route(\n      'GET',\n      '/scriptlog',\n      middleware.promiseEnforceMasterKeyAccess,\n      this.validateRequest,\n      req => {\n        return this.handleGET(req);\n      }\n    );\n  }\n\n  validateRequest(req) {\n    if (!req.config || !req.config.loggerController) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED, 'Logger adapter is not available');\n    }\n  }\n\n  // Returns a promise for a {response} object.\n  // query params:\n  // level (optional) Level of logging you want to query for (info || error)\n  // from (optional) Start time for the search. Defaults to 1 week ago.\n  // until (optional) End time for the search. Defaults to current time.\n  // order (optional) Direction of results returned, either “asc” or “desc”. Defaults to “desc”.\n  // size (optional) Number of rows returned by search. Defaults to 10\n  // n same as size, overrides size if set\n  handleGET(req) {\n    const from = req.query.from;\n    const until = req.query.until;\n    let size = req.query.size;\n    if (req.query.n) {\n      size = req.query.n;\n    }\n\n    const order = req.query.order;\n    const level = req.query.level;\n    const options = {\n      from,\n      until,\n      size,\n      order,\n      level,\n    };\n\n    return req.config.loggerController.getLogs(options).then(result => {\n      return Promise.resolve({\n        response: result,\n      });\n    });\n  }\n}\n\nexport default LogsRouter;\n"],"file":"LogsRouter.js"}