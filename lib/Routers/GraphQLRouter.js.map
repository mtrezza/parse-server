{"version":3,"sources":["../../src/Routers/GraphQLRouter.js"],"names":["GraphQLConfigPath","GraphQLRouter","PromiseRouter","getGraphQLConfig","req","result","config","parseGraphQLController","response","updateGraphQLConfig","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","data","body","params","mountRoutes","route","middleware","promiseEnforceMasterKeyAccess"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,iBAAiB,GAAG,iBAA1B;;AAEO,MAAMC,aAAN,SAA4BC,sBAA5B,CAA0C;AAC/C,QAAMC,gBAAN,CAAuBC,GAAvB,EAA4B;AAC1B,UAAMC,MAAM,GAAG,MAAMD,GAAG,CAACE,MAAJ,CAAWC,sBAAX,CAAkCJ,gBAAlC,EAArB;AACA,WAAO;AACLK,MAAAA,QAAQ,EAAEH;AADL,KAAP;AAGD;;AAED,QAAMI,mBAAN,CAA0BL,GAA1B,EAA+B;AAC7B,QAAIA,GAAG,CAACM,IAAJ,CAASC,UAAb,EAAyB;AACvB,YAAM,IAAIC,cAAMC,KAAV,CACJD,cAAMC,KAAN,CAAYC,mBADR,EAEJ,iEAFI,CAAN;AAID;;AACD,UAAMC,IAAI,GAAG,MAAMX,GAAG,CAACE,MAAJ,CAAWC,sBAAX,CAAkCE,mBAAlC,CAAsDL,GAAG,CAACY,IAAJ,CAASC,MAA/D,CAAnB;AACA,WAAO;AACLT,MAAAA,QAAQ,EAAEO;AADL,KAAP;AAGD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,CAAW,KAAX,EAAkBnB,iBAAlB,EAAqCoB,UAAU,CAACC,6BAAhD,EAA+EjB,GAAG,IAAI;AACpF,aAAO,KAAKD,gBAAL,CAAsBC,GAAtB,CAAP;AACD,KAFD;AAGA,SAAKe,KAAL,CAAW,KAAX,EAAkBnB,iBAAlB,EAAqCoB,UAAU,CAACC,6BAAhD,EAA+EjB,GAAG,IAAI;AACpF,aAAO,KAAKK,mBAAL,CAAyBL,GAAzB,CAAP;AACD,KAFD;AAGD;;AA5B8C;;;eA+BlCH,a","sourcesContent":["import Parse from 'parse/node';\nimport PromiseRouter from '../PromiseRouter';\nimport * as middleware from '../middlewares';\n\nconst GraphQLConfigPath = '/graphql-config';\n\nexport class GraphQLRouter extends PromiseRouter {\n  async getGraphQLConfig(req) {\n    const result = await req.config.parseGraphQLController.getGraphQLConfig();\n    return {\n      response: result,\n    };\n  }\n\n  async updateGraphQLConfig(req) {\n    if (req.auth.isReadOnly) {\n      throw new Parse.Error(\n        Parse.Error.OPERATION_FORBIDDEN,\n        \"read-only masterKey isn't allowed to update the GraphQL config.\"\n      );\n    }\n    const data = await req.config.parseGraphQLController.updateGraphQLConfig(req.body.params);\n    return {\n      response: data,\n    };\n  }\n\n  mountRoutes() {\n    this.route('GET', GraphQLConfigPath, middleware.promiseEnforceMasterKeyAccess, req => {\n      return this.getGraphQLConfig(req);\n    });\n    this.route('PUT', GraphQLConfigPath, middleware.promiseEnforceMasterKeyAccess, req => {\n      return this.updateGraphQLConfig(req);\n    });\n  }\n}\n\nexport default GraphQLRouter;\n"],"file":"GraphQLRouter.js"}