{"version":3,"sources":["../../src/Routers/IAPValidationRouter.js"],"names":["request","require","rest","IAP_SANDBOX_URL","IAP_PRODUCTION_URL","APP_STORE_ERRORS","appStoreError","status","parseInt","errorString","error","validateWithAppStore","url","receipt","method","body","headers","then","httpResponse","data","getFileForProductIdentifier","productIdentifier","req","find","config","auth","undefined","info","clientSDK","context","result","products","results","length","Parse","Error","OBJECT_NOT_FOUND","download","Promise","resolve","response","IAPValidationRouter","PromiseRouter","handleRequest","INVALID_JSON","base64","process","env","TESTING","bypassAppStoreValidation","successCallback","errorCallback","mountRoutes","route"],"mappings":"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","sourcesContent":["import PromiseRouter from '../PromiseRouter';\nconst request = require('../request');\nconst rest = require('../rest');\nimport Parse from 'parse/node';\n\n// TODO move validation logic in IAPValidationController\nconst IAP_SANDBOX_URL = 'https://sandbox.itunes.apple.com/verifyReceipt';\nconst IAP_PRODUCTION_URL = 'https://buy.itunes.apple.com/verifyReceipt';\n\nconst APP_STORE_ERRORS = {\n  21000: 'The App Store could not read the JSON object you provided.',\n  21002: 'The data in the receipt-data property was malformed or missing.',\n  21003: 'The receipt could not be authenticated.',\n  21004: 'The shared secret you provided does not match the shared secret on file for your account.',\n  21005: 'The receipt server is not currently available.',\n  21006: 'This receipt is valid but the subscription has expired.',\n  21007: 'This receipt is from the test environment, but it was sent to the production environment for verification. Send it to the test environment instead.',\n  21008: 'This receipt is from the production environment, but it was sent to the test environment for verification. Send it to the production environment instead.',\n};\n\nfunction appStoreError(status) {\n  status = parseInt(status);\n  var errorString = APP_STORE_ERRORS[status] || 'unknown error.';\n  return { status: status, error: errorString };\n}\n\nfunction validateWithAppStore(url, receipt) {\n  return request({\n    url: url,\n    method: 'POST',\n    body: { 'receipt-data': receipt },\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }).then(httpResponse => {\n    const body = httpResponse.data;\n    if (body && body.status === 0) {\n      // No need to pass anything, status is OK\n      return;\n    }\n    // receipt is from test and should go to test\n    throw body;\n  });\n}\n\nfunction getFileForProductIdentifier(productIdentifier, req) {\n  return rest\n    .find(\n      req.config,\n      req.auth,\n      '_Product',\n      { productIdentifier: productIdentifier },\n      undefined,\n      req.info.clientSDK,\n      req.info.context\n    )\n    .then(function (result) {\n      const products = result.results;\n      if (!products || products.length != 1) {\n        // Error not found or too many\n        throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n      }\n\n      var download = products[0].download;\n      return Promise.resolve({ response: download });\n    });\n}\n\nexport class IAPValidationRouter extends PromiseRouter {\n  handleRequest(req) {\n    let receipt = req.body.receipt;\n    const productIdentifier = req.body.productIdentifier;\n\n    if (!receipt || !productIdentifier) {\n      // TODO: Error, malformed request\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'missing receipt or productIdentifier');\n    }\n\n    // Transform the object if there\n    // otherwise assume it's in Base64 already\n    if (typeof receipt == 'object') {\n      if (receipt['__type'] == 'Bytes') {\n        receipt = receipt.base64;\n      }\n    }\n\n    if (process.env.TESTING == '1' && req.body.bypassAppStoreValidation) {\n      return getFileForProductIdentifier(productIdentifier, req);\n    }\n\n    function successCallback() {\n      return getFileForProductIdentifier(productIdentifier, req);\n    }\n\n    function errorCallback(error) {\n      return Promise.resolve({ response: appStoreError(error.status) });\n    }\n\n    return validateWithAppStore(IAP_PRODUCTION_URL, receipt).then(\n      () => {\n        return successCallback();\n      },\n      error => {\n        if (error.status == 21007) {\n          return validateWithAppStore(IAP_SANDBOX_URL, receipt).then(\n            () => {\n              return successCallback();\n            },\n            error => {\n              return errorCallback(error);\n            }\n          );\n        }\n\n        return errorCallback(error);\n      }\n    );\n  }\n\n  mountRoutes() {\n    this.route('POST', '/validate_purchase', this.handleRequest);\n  }\n}\n"],"file":"IAPValidationRouter.js"}