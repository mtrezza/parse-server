{"version":3,"sources":["../src/StatusHandler.js"],"names":["PUSH_STATUS_COLLECTION","JOB_STATUS_COLLECTION","incrementOp","object","key","amount","__op","flatten","array","flattened","i","length","Array","isArray","concat","push","statusHandler","className","database","lastPromise","Promise","resolve","create","then","update","where","Object","freeze","restStatusHandler","config","auth","Auth","master","rest","response","assign","objectId","jobStatusHandler","jobStatus","objectIdSize","handler","setRunning","jobName","params","now","Date","status","source","createdAt","ACL","setMessage","message","setSucceeded","setFinalStatus","setFailed","undefined","finishedAt","Error","pushStatusHandler","existingObjectId","pushStatus","setInitial","body","options","pushTime","toISOString","prototype","hasOwnProperty","call","hasPushScheduledSupport","push_time","logger","warn","data","payloadString","JSON","stringify","pushHash","alert","query","payload","title","expiry","expiration_time","expiration_interval","numSent","result","batches","verbose","count","trackSent","results","UTCOffset","cleanupInstallations","process","env","PARSE_SERVER_CLEANUP_INVALID_INSTALLATIONS","numFailed","devicesToRemove","reduce","memo","device","deviceType","transmitted","offsetKey","error","deviceToken","token","forEach","info","$in","acl","many","res","complete","fail","err","errorMessage","rval","defineProperty","get"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,sBAAsB,GAAG,aAA/B;AACA,MAAMC,qBAAqB,GAAG,YAA9B;;AAEA,MAAMC,WAAW,GAAG,UAAUC,MAAM,GAAG,EAAnB,EAAuBC,GAAvB,EAA4BC,MAAM,GAAG,CAArC,EAAwC;AAC1D,MAAI,CAACF,MAAM,CAACC,GAAD,CAAX,EAAkB;AAChBD,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAc;AAAEE,MAAAA,IAAI,EAAE,WAAR;AAAqBD,MAAAA,MAAM,EAAEA;AAA7B,KAAd;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,CAACC,GAAD,CAAN,CAAYC,MAAZ,IAAsBA,MAAtB;AACD;;AACD,SAAOF,MAAM,CAACC,GAAD,CAAb;AACD,CAPD;;AASO,SAASG,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,KAAK,CAACC,OAAN,CAAcL,KAAK,CAACE,CAAD,CAAnB,CAAJ,EAA6B;AAC3BD,MAAAA,SAAS,GAAGA,SAAS,CAACK,MAAV,CAAiBP,OAAO,CAACC,KAAK,CAACE,CAAD,CAAN,CAAxB,CAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,SAAS,CAACM,IAAV,CAAeP,KAAK,CAACE,CAAD,CAApB;AACD;AACF;;AACD,SAAOD,SAAP;AACD;;AAED,SAASO,aAAT,CAAuBC,SAAvB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAIC,WAAW,GAAGC,OAAO,CAACC,OAAR,EAAlB;;AAEA,WAASC,MAAT,CAAgBnB,MAAhB,EAAwB;AACtBgB,IAAAA,WAAW,GAAGA,WAAW,CAACI,IAAZ,CAAiB,MAAM;AACnC,aAAOL,QAAQ,CAACI,MAAT,CAAgBL,SAAhB,EAA2Bd,MAA3B,EAAmCoB,IAAnC,CAAwC,MAAM;AACnD,eAAOH,OAAO,CAACC,OAAR,CAAgBlB,MAAhB,CAAP;AACD,OAFM,CAAP;AAGD,KAJa,CAAd;AAKA,WAAOgB,WAAP;AACD;;AAED,WAASK,MAAT,CAAgBC,KAAhB,EAAuBtB,MAAvB,EAA+B;AAC7BgB,IAAAA,WAAW,GAAGA,WAAW,CAACI,IAAZ,CAAiB,MAAM;AACnC,aAAOL,QAAQ,CAACM,MAAT,CAAgBP,SAAhB,EAA2BQ,KAA3B,EAAkCtB,MAAlC,CAAP;AACD,KAFa,CAAd;AAGA,WAAOgB,WAAP;AACD;;AAED,SAAOO,MAAM,CAACC,MAAP,CAAc;AACnBL,IAAAA,MADmB;AAEnBE,IAAAA;AAFmB,GAAd,CAAP;AAID;;AAED,SAASI,iBAAT,CAA2BX,SAA3B,EAAsCY,MAAtC,EAA8C;AAC5C,MAAIV,WAAW,GAAGC,OAAO,CAACC,OAAR,EAAlB;;AACA,QAAMS,IAAI,GAAGC,cAAKC,MAAL,CAAYH,MAAZ,CAAb;;AACA,WAASP,MAAT,CAAgBnB,MAAhB,EAAwB;AACtBgB,IAAAA,WAAW,GAAGA,WAAW,CAACI,IAAZ,CAAiB,MAAM;AACnC,aAAOU,cAAKX,MAAL,CAAYO,MAAZ,EAAoBC,IAApB,EAA0Bb,SAA1B,EAAqCd,MAArC,EAA6CoB,IAA7C,CAAkD,CAAC;AAAEW,QAAAA;AAAF,OAAD,KAAkB;AACzE;AACA,eAAOd,OAAO,CAACC,OAAR,CAAgBK,MAAM,CAACS,MAAP,CAAc,EAAd,EAAkBhC,MAAlB,EAA0B+B,QAA1B,CAAhB,CAAP;AACD,OAHM,CAAP;AAID,KALa,CAAd;AAMA,WAAOf,WAAP;AACD;;AAED,WAASK,MAAT,CAAgBC,KAAhB,EAAuBtB,MAAvB,EAA+B;AAC7B;AACAgB,IAAAA,WAAW,GAAGA,WAAW,CAACI,IAAZ,CAAiB,MAAM;AACnC,aAAOU,cACJT,MADI,CACGK,MADH,EACWC,IADX,EACiBb,SADjB,EAC4B;AAAEmB,QAAAA,QAAQ,EAAEX,KAAK,CAACW;AAAlB,OAD5B,EAC0DjC,MAD1D,EAEJoB,IAFI,CAEC,CAAC;AAAEW,QAAAA;AAAF,OAAD,KAAkB;AACtB;AACA,eAAOd,OAAO,CAACC,OAAR,CAAgBK,MAAM,CAACS,MAAP,CAAc,EAAd,EAAkBhC,MAAlB,EAA0B+B,QAA1B,CAAhB,CAAP;AACD,OALI,CAAP;AAMD,KAPa,CAAd;AAQA,WAAOf,WAAP;AACD;;AAED,SAAOO,MAAM,CAACC,MAAP,CAAc;AACnBL,IAAAA,MADmB;AAEnBE,IAAAA;AAFmB,GAAd,CAAP;AAID;;AAEM,SAASa,gBAAT,CAA0BR,MAA1B,EAAkC;AACvC,MAAIS,SAAJ;AACA,QAAMF,QAAQ,GAAG,8BAAYP,MAAM,CAACU,YAAnB,CAAjB;AACA,QAAMrB,QAAQ,GAAGW,MAAM,CAACX,QAAxB;AACA,QAAMsB,OAAO,GAAGxB,aAAa,CAACf,qBAAD,EAAwBiB,QAAxB,CAA7B;;AACA,QAAMuB,UAAU,GAAG,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACAP,IAAAA,SAAS,GAAG;AACVF,MAAAA,QADU;AAEVM,MAAAA,OAFU;AAGVC,MAAAA,MAHU;AAIVG,MAAAA,MAAM,EAAE,SAJE;AAKVC,MAAAA,MAAM,EAAE,KALE;AAMVC,MAAAA,SAAS,EAAEJ,GAND;AAOV;AACAK,MAAAA,GAAG,EAAE;AARK,KAAZ;AAWA,WAAOT,OAAO,CAAClB,MAAR,CAAegB,SAAf,CAAP;AACD,GAdD;;AAgBA,QAAMY,UAAU,GAAG,UAAUC,OAAV,EAAmB;AACpC,QAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3C,aAAO/B,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,WAAOmB,OAAO,CAAChB,MAAR,CAAe;AAAEY,MAAAA;AAAF,KAAf,EAA6B;AAAEe,MAAAA;AAAF,KAA7B,CAAP;AACD,GALD;;AAOA,QAAMC,YAAY,GAAG,UAAUD,OAAV,EAAmB;AACtC,WAAOE,cAAc,CAAC,WAAD,EAAcF,OAAd,CAArB;AACD,GAFD;;AAIA,QAAMG,SAAS,GAAG,UAAUH,OAAV,EAAmB;AACnC,WAAOE,cAAc,CAAC,QAAD,EAAWF,OAAX,CAArB;AACD,GAFD;;AAIA,QAAME,cAAc,GAAG,UAAUP,MAAV,EAAkBK,OAAO,GAAGI,SAA5B,EAAuC;AAC5D,UAAMC,UAAU,GAAG,IAAIX,IAAJ,EAAnB;AACA,UAAMrB,MAAM,GAAG;AAAEsB,MAAAA,MAAF;AAAUU,MAAAA;AAAV,KAAf;;AACA,QAAIL,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;AAC1C3B,MAAAA,MAAM,CAAC2B,OAAP,GAAiBA,OAAjB;AACD;;AACD,QAAIA,OAAO,YAAYM,KAAnB,IAA4B,OAAON,OAAO,CAACA,OAAf,KAA2B,QAA3D,EAAqE;AACnE3B,MAAAA,MAAM,CAAC2B,OAAP,GAAiBA,OAAO,CAACA,OAAzB;AACD;;AACD,WAAOX,OAAO,CAAChB,MAAR,CAAe;AAAEY,MAAAA;AAAF,KAAf,EAA6BZ,MAA7B,CAAP;AACD,GAVD;;AAYA,SAAOE,MAAM,CAACC,MAAP,CAAc;AACnBc,IAAAA,UADmB;AAEnBW,IAAAA,YAFmB;AAGnBF,IAAAA,UAHmB;AAInBI,IAAAA;AAJmB,GAAd,CAAP;AAMD;;AAEM,SAASI,iBAAT,CAA2B7B,MAA3B,EAAmC8B,gBAAnC,EAAqD;AAC1D,MAAIC,UAAJ;AACA,QAAM1C,QAAQ,GAAGW,MAAM,CAACX,QAAxB;AACA,QAAMsB,OAAO,GAAGZ,iBAAiB,CAAC5B,sBAAD,EAAyB6B,MAAzB,CAAjC;AACA,MAAIO,QAAQ,GAAGuB,gBAAf;;AACA,QAAME,UAAU,GAAG,UAAUC,IAAI,GAAG,EAAjB,EAAqBrC,KAArB,EAA4BsC,OAAO,GAAG;AAAEhB,IAAAA,MAAM,EAAE;AAAV,GAAtC,EAA0D;AAC3E,UAAMH,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAImB,QAAQ,GAAGpB,GAAG,CAACqB,WAAJ,EAAf;AACA,QAAInB,MAAM,GAAG,SAAb;;AACA,QAAIpB,MAAM,CAACwC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,IAArC,EAA2C,WAA3C,CAAJ,EAA6D;AAC3D,UAAIjC,MAAM,CAACwC,uBAAX,EAAoC;AAClCL,QAAAA,QAAQ,GAAGF,IAAI,CAACQ,SAAhB;AACAxB,QAAAA,MAAM,GAAG,WAAT;AACD,OAHD,MAGO;AACLyB,uBAAOC,IAAP,CAAY,2DAAZ;;AACAD,uBAAOC,IAAP,CAAY,+BAAZ;AACD;AACF;;AAED,UAAMC,IAAI,GAAGX,IAAI,CAACW,IAAL,IAAa,EAA1B;AACA,UAAMC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAtB;AACA,QAAII,QAAJ;;AACA,QAAI,OAAOJ,IAAI,CAACK,KAAZ,KAAsB,QAA1B,EAAoC;AAClCD,MAAAA,QAAQ,GAAG,0BAAQJ,IAAI,CAACK,KAAb,CAAX;AACD,KAFD,MAEO,IAAI,OAAOL,IAAI,CAACK,KAAZ,KAAsB,QAA1B,EAAoC;AACzCD,MAAAA,QAAQ,GAAG,0BAAQF,IAAI,CAACC,SAAL,CAAeH,IAAI,CAACK,KAApB,CAAR,CAAX;AACD,KAFM,MAEA;AACLD,MAAAA,QAAQ,GAAG,kCAAX;AACD;;AACD,UAAM1E,MAAM,GAAG;AACb6D,MAAAA,QADa;AAEbe,MAAAA,KAAK,EAAEJ,IAAI,CAACC,SAAL,CAAenD,KAAf,CAFM;AAGbuD,MAAAA,OAAO,EAAEN,aAHI;AAIb3B,MAAAA,MAAM,EAAEgB,OAAO,CAAChB,MAJH;AAKbkC,MAAAA,KAAK,EAAElB,OAAO,CAACkB,KALF;AAMbC,MAAAA,MAAM,EAAEpB,IAAI,CAACqB,eANA;AAObC,MAAAA,mBAAmB,EAAEtB,IAAI,CAACsB,mBAPb;AAQbtC,MAAAA,MAAM,EAAEA,MARK;AASbuC,MAAAA,OAAO,EAAE,CATI;AAUbR,MAAAA,QAVa;AAWb;AACA5B,MAAAA,GAAG,EAAE;AAZQ,KAAf;AAcA,WAAOT,OAAO,CAAClB,MAAR,CAAenB,MAAf,EAAuBoB,IAAvB,CAA4B+D,MAAM,IAAI;AAC3ClD,MAAAA,QAAQ,GAAGkD,MAAM,CAAClD,QAAlB;AACAwB,MAAAA,UAAU,GAAG;AACXxB,QAAAA;AADW,OAAb;AAGA,aAAOhB,OAAO,CAACC,OAAR,CAAgBuC,UAAhB,CAAP;AACD,KANM,CAAP;AAOD,GA7CD;;AA+CA,QAAMnB,UAAU,GAAG,UAAU8C,OAAV,EAAmB;AACpChB,mBAAOiB,OAAP,CACG,eAAcpD,QAAS,iDAD1B,EAEEmD,OAFF;;AAIA,WAAO/C,OAAO,CAAChB,MAAR,CACL;AACEsB,MAAAA,MAAM,EAAE,SADV;AAEEV,MAAAA,QAAQ,EAAEA;AAFZ,KADK,EAKL;AACEU,MAAAA,MAAM,EAAE,SADV;AAEE2C,MAAAA,KAAK,EAAEF;AAFT,KALK,CAAP;AAUD,GAfD;;AAiBA,QAAMG,SAAS,GAAG,UAChBC,OADgB,EAEhBC,SAFgB,EAGhBC,oBAAoB,GAAGC,OAAO,CAACC,GAAR,CAAYC,0CAHnB,EAIhB;AACA,UAAMxE,MAAM,GAAG;AACb6D,MAAAA,OAAO,EAAE,CADI;AAEbY,MAAAA,SAAS,EAAE;AAFE,KAAf;AAIA,UAAMC,eAAe,GAAG,EAAxB;;AACA,QAAItF,KAAK,CAACC,OAAN,CAAc8E,OAAd,CAAJ,EAA4B;AAC1BA,MAAAA,OAAO,GAAGpF,OAAO,CAACoF,OAAD,CAAjB;AACAA,MAAAA,OAAO,CAACQ,MAAR,CAAe,CAACC,IAAD,EAAOd,MAAP,KAAkB;AAC/B;AACA,YAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACe,MAAnB,IAA6B,CAACf,MAAM,CAACe,MAAP,CAAcC,UAAhD,EAA4D;AAC1D,iBAAOF,IAAP;AACD;;AACD,cAAME,UAAU,GAAGhB,MAAM,CAACe,MAAP,CAAcC,UAAjC;AACA,cAAMlG,GAAG,GAAGkF,MAAM,CAACiB,WAAP,GACP,eAAcD,UAAW,EADlB,GAEP,iBAAgBA,UAAW,EAFhC;AAGAF,QAAAA,IAAI,CAAChG,GAAD,CAAJ,GAAYF,WAAW,CAACkG,IAAD,EAAOhG,GAAP,CAAvB;;AACA,YAAI,OAAOwF,SAAP,KAAqB,WAAzB,EAAsC;AACpC,gBAAMY,SAAS,GAAGlB,MAAM,CAACiB,WAAP,GACb,oBAAmBX,SAAU,EADhB,GAEb,sBAAqBA,SAAU,EAFpC;AAGAQ,UAAAA,IAAI,CAACI,SAAD,CAAJ,GAAkBtG,WAAW,CAACkG,IAAD,EAAOI,SAAP,CAA7B;AACD;;AACD,YAAIlB,MAAM,CAACiB,WAAX,EAAwB;AACtBH,UAAAA,IAAI,CAACf,OAAL;AACD,SAFD,MAEO;AACL,cACEC,MAAM,IACNA,MAAM,CAACpD,QADP,IAEAoD,MAAM,CAACpD,QAAP,CAAgBuE,KAFhB,IAGAnB,MAAM,CAACe,MAHP,IAIAf,MAAM,CAACe,MAAP,CAAcK,WALhB,EAME;AACA,kBAAMC,KAAK,GAAGrB,MAAM,CAACe,MAAP,CAAcK,WAA5B;AACA,kBAAMD,KAAK,GAAGnB,MAAM,CAACpD,QAAP,CAAgBuE,KAA9B,CAFA,CAGA;;AACA,gBAAIA,KAAK,KAAK,eAAV,IAA6BA,KAAK,KAAK,qBAA3C,EAAkE;AAChEP,cAAAA,eAAe,CAACnF,IAAhB,CAAqB4F,KAArB;AACD,aAND,CAOA;;;AACA,gBAAIF,KAAK,KAAK,cAAV,IAA4BA,KAAK,KAAK,gBAA1C,EAA4D;AAC1DP,cAAAA,eAAe,CAACnF,IAAhB,CAAqB4F,KAArB;AACD;AACF;;AACDP,UAAAA,IAAI,CAACH,SAAL;AACD;;AACD,eAAOG,IAAP;AACD,OAxCD,EAwCG5E,MAxCH;AAyCD;;AAED+C,mBAAOiB,OAAP,CACG,eAAcpD,QAAS,sCAD1B,EAEEZ,MAAM,CAAC6D,OAFT,EAGE7D,MAAM,CAACyE,SAHT;;AAKA1B,mBAAOiB,OAAP,CAAgB,eAAcpD,QAAS,iBAAvC,EAAyD;AACvD8D,MAAAA;AADuD,KAAzD;;AAGA,KAAC,SAAD,EAAY,WAAZ,EAAyBU,OAAzB,CAAiCxG,GAAG,IAAI;AACtC,UAAIoB,MAAM,CAACpB,GAAD,CAAN,GAAc,CAAlB,EAAqB;AACnBoB,QAAAA,MAAM,CAACpB,GAAD,CAAN,GAAc;AACZE,UAAAA,IAAI,EAAE,WADM;AAEZD,UAAAA,MAAM,EAAEmB,MAAM,CAACpB,GAAD;AAFF,SAAd;AAID,OALD,MAKO;AACL,eAAOoB,MAAM,CAACpB,GAAD,CAAb;AACD;AACF,KATD;;AAWA,QAAI8F,eAAe,CAACvF,MAAhB,GAAyB,CAAzB,IAA8BkF,oBAAlC,EAAwD;AACtDtB,qBAAOsC,IAAP,CAAa,6BAA4BX,eAAe,CAACvF,MAAO,iBAAhE;;AACAO,MAAAA,QAAQ,CAACM,MAAT,CACE,eADF,EAEE;AAAEkF,QAAAA,WAAW,EAAE;AAAEI,UAAAA,GAAG,EAAEZ;AAAP;AAAf,OAFF,EAGE;AAAEQ,QAAAA,WAAW,EAAE;AAAEpG,UAAAA,IAAI,EAAE;AAAR;AAAf,OAHF,EAIE;AACEyG,QAAAA,GAAG,EAAExD,SADP;AAEEyD,QAAAA,IAAI,EAAE;AAFR,OAJF;AASD,KAjFD,CAmFA;;;AACA9G,IAAAA,WAAW,CAACsB,MAAD,EAAS,OAAT,EAAkB,CAAC,CAAnB,CAAX;AAEA,WAAOgB,OAAO,CAAChB,MAAR,CAAe;AAAEY,MAAAA;AAAF,KAAf,EAA6BZ,MAA7B,EAAqCD,IAArC,CAA0C0F,GAAG,IAAI;AACtD,UAAIA,GAAG,IAAIA,GAAG,CAACxB,KAAJ,KAAc,CAAzB,EAA4B;AAC1B,eAAO,KAAKyB,QAAL,EAAP;AACD;AACF,KAJM,CAAP;AAKD,GA/FD;;AAiGA,QAAMA,QAAQ,GAAG,YAAY;AAC3B,WAAO1E,OAAO,CAAChB,MAAR,CACL;AAAEY,MAAAA;AAAF,KADK,EAEL;AACEU,MAAAA,MAAM,EAAE,WADV;AAEE2C,MAAAA,KAAK,EAAE;AAAEnF,QAAAA,IAAI,EAAE;AAAR;AAFT,KAFK,CAAP;AAOD,GARD;;AAUA,QAAM6G,IAAI,GAAG,UAAUC,GAAV,EAAe;AAC1B,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,GAAG;AAAEjE,QAAAA,OAAO,EAAEiE;AAAX,OAAN;AACD;;AACD,UAAM5F,MAAM,GAAG;AACb6F,MAAAA,YAAY,EAAED,GADD;AAEbtE,MAAAA,MAAM,EAAE;AAFK,KAAf;AAIA,WAAON,OAAO,CAAChB,MAAR,CAAe;AAAEY,MAAAA;AAAF,KAAf,EAA6BZ,MAA7B,CAAP;AACD,GATD;;AAWA,QAAM8F,IAAI,GAAG;AACXzD,IAAAA,UADW;AAEXpB,IAAAA,UAFW;AAGXiD,IAAAA,SAHW;AAIXwB,IAAAA,QAJW;AAKXC,IAAAA;AALW,GAAb,CA3L0D,CAmM1D;;AACAzF,EAAAA,MAAM,CAAC6F,cAAP,CAAsBD,IAAtB,EAA4B,UAA5B,EAAwC;AACtCE,IAAAA,GAAG,EAAE,MAAMpF;AAD2B,GAAxC;AAIA,SAAOV,MAAM,CAACC,MAAP,CAAc2F,IAAd,CAAP;AACD","sourcesContent":["import { md5Hash, newObjectId } from './cryptoUtils';\nimport { logger } from './logger';\nimport rest from './rest';\nimport Auth from './Auth';\n\nconst PUSH_STATUS_COLLECTION = '_PushStatus';\nconst JOB_STATUS_COLLECTION = '_JobStatus';\n\nconst incrementOp = function (object = {}, key, amount = 1) {\n  if (!object[key]) {\n    object[key] = { __op: 'Increment', amount: amount };\n  } else {\n    object[key].amount += amount;\n  }\n  return object[key];\n};\n\nexport function flatten(array) {\n  var flattened = [];\n  for (var i = 0; i < array.length; i++) {\n    if (Array.isArray(array[i])) {\n      flattened = flattened.concat(flatten(array[i]));\n    } else {\n      flattened.push(array[i]);\n    }\n  }\n  return flattened;\n}\n\nfunction statusHandler(className, database) {\n  let lastPromise = Promise.resolve();\n\n  function create(object) {\n    lastPromise = lastPromise.then(() => {\n      return database.create(className, object).then(() => {\n        return Promise.resolve(object);\n      });\n    });\n    return lastPromise;\n  }\n\n  function update(where, object) {\n    lastPromise = lastPromise.then(() => {\n      return database.update(className, where, object);\n    });\n    return lastPromise;\n  }\n\n  return Object.freeze({\n    create,\n    update,\n  });\n}\n\nfunction restStatusHandler(className, config) {\n  let lastPromise = Promise.resolve();\n  const auth = Auth.master(config);\n  function create(object) {\n    lastPromise = lastPromise.then(() => {\n      return rest.create(config, auth, className, object).then(({ response }) => {\n        // merge the objects\n        return Promise.resolve(Object.assign({}, object, response));\n      });\n    });\n    return lastPromise;\n  }\n\n  function update(where, object) {\n    // TODO: when we have updateWhere, use that for proper interfacing\n    lastPromise = lastPromise.then(() => {\n      return rest\n        .update(config, auth, className, { objectId: where.objectId }, object)\n        .then(({ response }) => {\n          // merge the objects\n          return Promise.resolve(Object.assign({}, object, response));\n        });\n    });\n    return lastPromise;\n  }\n\n  return Object.freeze({\n    create,\n    update,\n  });\n}\n\nexport function jobStatusHandler(config) {\n  let jobStatus;\n  const objectId = newObjectId(config.objectIdSize);\n  const database = config.database;\n  const handler = statusHandler(JOB_STATUS_COLLECTION, database);\n  const setRunning = function (jobName, params) {\n    const now = new Date();\n    jobStatus = {\n      objectId,\n      jobName,\n      params,\n      status: 'running',\n      source: 'api',\n      createdAt: now,\n      // lockdown!\n      ACL: {},\n    };\n\n    return handler.create(jobStatus);\n  };\n\n  const setMessage = function (message) {\n    if (!message || typeof message !== 'string') {\n      return Promise.resolve();\n    }\n    return handler.update({ objectId }, { message });\n  };\n\n  const setSucceeded = function (message) {\n    return setFinalStatus('succeeded', message);\n  };\n\n  const setFailed = function (message) {\n    return setFinalStatus('failed', message);\n  };\n\n  const setFinalStatus = function (status, message = undefined) {\n    const finishedAt = new Date();\n    const update = { status, finishedAt };\n    if (message && typeof message === 'string') {\n      update.message = message;\n    }\n    if (message instanceof Error && typeof message.message === 'string') {\n      update.message = message.message;\n    }\n    return handler.update({ objectId }, update);\n  };\n\n  return Object.freeze({\n    setRunning,\n    setSucceeded,\n    setMessage,\n    setFailed,\n  });\n}\n\nexport function pushStatusHandler(config, existingObjectId) {\n  let pushStatus;\n  const database = config.database;\n  const handler = restStatusHandler(PUSH_STATUS_COLLECTION, config);\n  let objectId = existingObjectId;\n  const setInitial = function (body = {}, where, options = { source: 'rest' }) {\n    const now = new Date();\n    let pushTime = now.toISOString();\n    let status = 'pending';\n    if (Object.prototype.hasOwnProperty.call(body, 'push_time')) {\n      if (config.hasPushScheduledSupport) {\n        pushTime = body.push_time;\n        status = 'scheduled';\n      } else {\n        logger.warn('Trying to schedule a push while server is not configured.');\n        logger.warn('Push will be sent immediately');\n      }\n    }\n\n    const data = body.data || {};\n    const payloadString = JSON.stringify(data);\n    let pushHash;\n    if (typeof data.alert === 'string') {\n      pushHash = md5Hash(data.alert);\n    } else if (typeof data.alert === 'object') {\n      pushHash = md5Hash(JSON.stringify(data.alert));\n    } else {\n      pushHash = 'd41d8cd98f00b204e9800998ecf8427e';\n    }\n    const object = {\n      pushTime,\n      query: JSON.stringify(where),\n      payload: payloadString,\n      source: options.source,\n      title: options.title,\n      expiry: body.expiration_time,\n      expiration_interval: body.expiration_interval,\n      status: status,\n      numSent: 0,\n      pushHash,\n      // lockdown!\n      ACL: {},\n    };\n    return handler.create(object).then(result => {\n      objectId = result.objectId;\n      pushStatus = {\n        objectId,\n      };\n      return Promise.resolve(pushStatus);\n    });\n  };\n\n  const setRunning = function (batches) {\n    logger.verbose(\n      `_PushStatus ${objectId}: sending push to installations with %d batches`,\n      batches\n    );\n    return handler.update(\n      {\n        status: 'pending',\n        objectId: objectId,\n      },\n      {\n        status: 'running',\n        count: batches,\n      }\n    );\n  };\n\n  const trackSent = function (\n    results,\n    UTCOffset,\n    cleanupInstallations = process.env.PARSE_SERVER_CLEANUP_INVALID_INSTALLATIONS\n  ) {\n    const update = {\n      numSent: 0,\n      numFailed: 0,\n    };\n    const devicesToRemove = [];\n    if (Array.isArray(results)) {\n      results = flatten(results);\n      results.reduce((memo, result) => {\n        // Cannot handle that\n        if (!result || !result.device || !result.device.deviceType) {\n          return memo;\n        }\n        const deviceType = result.device.deviceType;\n        const key = result.transmitted\n          ? `sentPerType.${deviceType}`\n          : `failedPerType.${deviceType}`;\n        memo[key] = incrementOp(memo, key);\n        if (typeof UTCOffset !== 'undefined') {\n          const offsetKey = result.transmitted\n            ? `sentPerUTCOffset.${UTCOffset}`\n            : `failedPerUTCOffset.${UTCOffset}`;\n          memo[offsetKey] = incrementOp(memo, offsetKey);\n        }\n        if (result.transmitted) {\n          memo.numSent++;\n        } else {\n          if (\n            result &&\n            result.response &&\n            result.response.error &&\n            result.device &&\n            result.device.deviceToken\n          ) {\n            const token = result.device.deviceToken;\n            const error = result.response.error;\n            // GCM errors\n            if (error === 'NotRegistered' || error === 'InvalidRegistration') {\n              devicesToRemove.push(token);\n            }\n            // APNS errors\n            if (error === 'Unregistered' || error === 'BadDeviceToken') {\n              devicesToRemove.push(token);\n            }\n          }\n          memo.numFailed++;\n        }\n        return memo;\n      }, update);\n    }\n\n    logger.verbose(\n      `_PushStatus ${objectId}: sent push! %d success, %d failures`,\n      update.numSent,\n      update.numFailed\n    );\n    logger.verbose(`_PushStatus ${objectId}: needs cleanup`, {\n      devicesToRemove,\n    });\n    ['numSent', 'numFailed'].forEach(key => {\n      if (update[key] > 0) {\n        update[key] = {\n          __op: 'Increment',\n          amount: update[key],\n        };\n      } else {\n        delete update[key];\n      }\n    });\n\n    if (devicesToRemove.length > 0 && cleanupInstallations) {\n      logger.info(`Removing device tokens on ${devicesToRemove.length} _Installations`);\n      database.update(\n        '_Installation',\n        { deviceToken: { $in: devicesToRemove } },\n        { deviceToken: { __op: 'Delete' } },\n        {\n          acl: undefined,\n          many: true,\n        }\n      );\n    }\n\n    // indicate this batch is complete\n    incrementOp(update, 'count', -1);\n\n    return handler.update({ objectId }, update).then(res => {\n      if (res && res.count === 0) {\n        return this.complete();\n      }\n    });\n  };\n\n  const complete = function () {\n    return handler.update(\n      { objectId },\n      {\n        status: 'succeeded',\n        count: { __op: 'Delete' },\n      }\n    );\n  };\n\n  const fail = function (err) {\n    if (typeof err === 'string') {\n      err = { message: err };\n    }\n    const update = {\n      errorMessage: err,\n      status: 'failed',\n    };\n    return handler.update({ objectId }, update);\n  };\n\n  const rval = {\n    setInitial,\n    setRunning,\n    trackSent,\n    complete,\n    fail,\n  };\n\n  // define objectId to be dynamic\n  Object.defineProperty(rval, 'objectId', {\n    get: () => objectId,\n  });\n\n  return Object.freeze(rval);\n}\n"],"file":"StatusHandler.js"}