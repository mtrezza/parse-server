{"version":3,"sources":["../src/Utils.js"],"names":["path","require","fs","promises","Utils","getLocalizedPath","defaultPath","locale","file","basename","basePath","dirname","localePath","join","localeFileExists","fileExists","subdir","language","split","languagePath","languageFileExists","access","e","isPath","s","test","flattenObject","obj","parentKey","delimiter","result","key","Object","prototype","hasOwnProperty","call","newKey","module","exports"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAP,CAAcE,QAAzB;AAEA;AACA;AACA;;;AACA,MAAMC,KAAN,CAAY;AACV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,eAAaC,gBAAb,CAA8BC,WAA9B,EAA2CC,MAA3C,EAAmD;AACjD;AACA,UAAMC,IAAI,GAAGR,IAAI,CAACS,QAAL,CAAcH,WAAd,CAAb;AACA,UAAMI,QAAQ,GAAGV,IAAI,CAACW,OAAL,CAAaL,WAAb,CAAjB,CAHiD,CAKjD;;AACA,QAAI,CAACC,MAAL,EAAa;AACX,aAAO;AAAEP,QAAAA,IAAI,EAAEM;AAAR,OAAP;AACD,KARgD,CAUjD;;;AACA,UAAMM,UAAU,GAAGZ,IAAI,CAACa,IAAL,CAAUH,QAAV,EAAoBH,MAApB,EAA4BC,IAA5B,CAAnB;AACA,UAAMM,gBAAgB,GAAG,MAAMV,KAAK,CAACW,UAAN,CAAiBH,UAAjB,CAA/B,CAZiD,CAcjD;;AACA,QAAIE,gBAAJ,EAAsB;AACpB,aAAO;AAAEd,QAAAA,IAAI,EAAEY,UAAR;AAAoBI,QAAAA,MAAM,EAAET;AAA5B,OAAP;AACD,KAjBgD,CAmBjD;;;AACA,UAAMU,QAAQ,GAAGV,MAAM,CAACW,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAjB;AACA,UAAMC,YAAY,GAAGnB,IAAI,CAACa,IAAL,CAAUH,QAAV,EAAoBO,QAApB,EAA8BT,IAA9B,CAArB;AACA,UAAMY,kBAAkB,GAAG,MAAMhB,KAAK,CAACW,UAAN,CAAiBI,YAAjB,CAAjC,CAtBiD,CAwBjD;;AACA,QAAIC,kBAAJ,EAAwB;AACtB,aAAO;AAAEpB,QAAAA,IAAI,EAAEmB,YAAR;AAAsBH,QAAAA,MAAM,EAAEC;AAA9B,OAAP;AACD,KA3BgD,CA6BjD;;;AACA,WAAO;AAAEjB,MAAAA,IAAI,EAAEM;AAAR,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,eAAaS,UAAb,CAAwBf,IAAxB,EAA8B;AAC5B,QAAI;AACF,YAAME,EAAE,CAACmB,MAAH,CAAUrB,IAAV,CAAN;AACA,aAAO,IAAP;AACD,KAHD,CAGE,OAAOsB,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,MAAP,CAAcC,CAAd,EAAiB;AACf,WAAO,0BAA0BC,IAA1B,CAA+BD,CAA/B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOE,aAAP,CAAqBC,GAArB,EAA0BC,SAA1B,EAAqCC,SAAS,GAAG,GAAjD,EAAsDC,MAAM,GAAG,EAA/D,EAAmE;AACjE,SAAK,MAAMC,GAAX,IAAkBJ,GAAlB,EAAuB;AACrB,UAAIK,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,GAArC,EAA0CI,GAA1C,CAAJ,EAAoD;AAClD,cAAMK,MAAM,GAAGR,SAAS,GAAGA,SAAS,GAAGC,SAAZ,GAAwBE,GAA3B,GAAiCA,GAAzD;;AAEA,YAAI,OAAOJ,GAAG,CAACI,GAAD,CAAV,KAAoB,QAApB,IAAgCJ,GAAG,CAACI,GAAD,CAAH,KAAa,IAAjD,EAAuD;AACrD,eAAKL,aAAL,CAAmBC,GAAG,CAACI,GAAD,CAAtB,EAA6BK,MAA7B,EAAqCP,SAArC,EAAgDC,MAAhD;AACD,SAFD,MAEO;AACLA,UAAAA,MAAM,CAACM,MAAD,CAAN,GAAiBT,GAAG,CAACI,GAAD,CAApB;AACD;AACF;AACF;;AACD,WAAOD,MAAP;AACD;;AA3GS;;AA8GZO,MAAM,CAACC,OAAP,GAAiBlC,KAAjB","sourcesContent":["/**\n * utils.js\n * @file General purpose utilities\n * @description General purpose utilities.\n */\n\nconst path = require('path');\nconst fs = require('fs').promises;\n\n/**\n * The general purpose utilities.\n */\nclass Utils {\n  /**\n   * @function getLocalizedPath\n   * @description Returns a localized file path accoring to the locale.\n   *\n   * Localized files are searched in subfolders of a given path, e.g.\n   *\n   * root/\n   * ├── base/                    // base path to files\n   * │   ├── example.html         // default file\n   * │   └── de/                  // de language folder\n   * │   │   └── example.html     // de localized file\n   * │   └── de-AT/               // de-AT locale folder\n   * │   │   └── example.html     // de-AT localized file\n   *\n   * Files are matched with the locale in the following order:\n   * 1. Locale match, e.g. locale `de-AT` matches file in folder `de-AT`.\n   * 2. Language match, e.g. locale `de-AT` matches file in folder `de`.\n   * 3. Default; file in base folder is returned.\n   *\n   * @param {String} defaultPath The absolute file path, which is also\n   * the default path returned if localization is not available.\n   * @param {String} locale The locale.\n   * @returns {Promise<Object>} The object contains:\n   * - `path`: The path to the localized file, or the original path if\n   *   localization is not available.\n   * - `subdir`: The subdirectory of the localized file, or undefined if\n   *   there is no matching localized file.\n   */\n  static async getLocalizedPath(defaultPath, locale) {\n    // Get file name and paths\n    const file = path.basename(defaultPath);\n    const basePath = path.dirname(defaultPath);\n\n    // If locale is not set return default file\n    if (!locale) {\n      return { path: defaultPath };\n    }\n\n    // Check file for locale exists\n    const localePath = path.join(basePath, locale, file);\n    const localeFileExists = await Utils.fileExists(localePath);\n\n    // If file for locale exists return file\n    if (localeFileExists) {\n      return { path: localePath, subdir: locale };\n    }\n\n    // Check file for language exists\n    const language = locale.split('-')[0];\n    const languagePath = path.join(basePath, language, file);\n    const languageFileExists = await Utils.fileExists(languagePath);\n\n    // If file for language exists return file\n    if (languageFileExists) {\n      return { path: languagePath, subdir: language };\n    }\n\n    // Return default file\n    return { path: defaultPath };\n  }\n\n  /**\n   * @function fileExists\n   * @description Checks whether a file exists.\n   * @param {String} path The file path.\n   * @returns {Promise<Boolean>} Is true if the file can be accessed, false otherwise.\n   */\n  static async fileExists(path) {\n    try {\n      await fs.access(path);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * @function isPath\n   * @description Evaluates whether a string is a file path (as opposed to a URL for example).\n   * @param {String} s The string to evaluate.\n   * @returns {Boolean} Returns true if the evaluated string is a path.\n   */\n  static isPath(s) {\n    return /(^\\/)|(^\\.\\/)|(^\\.\\.\\/)/.test(s);\n  }\n\n  /**\n   * Flattens an object and crates new keys with custom delimiters.\n   * @param {Object} obj The object to flatten.\n   * @param {String} [delimiter='.'] The delimiter of the newly generated keys.\n   * @param {Object} result\n   * @returns {Object} The flattened object.\n   **/\n  static flattenObject(obj, parentKey, delimiter = '.', result = {}) {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const newKey = parentKey ? parentKey + delimiter + key : key;\n\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          this.flattenObject(obj[key], newKey, delimiter, result);\n        } else {\n          result[newKey] = obj[key];\n        }\n      }\n    }\n    return result;\n  }\n}\n\nmodule.exports = Utils;\n"],"file":"Utils.js"}