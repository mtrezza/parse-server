{"version":3,"sources":["../../src/Options/parsers.js"],"names":["numberParser","key","opt","intOpt","parseInt","Number","isInteger","Error","numberOrBoolParser","objectParser","JSON","parse","arrayParser","Array","isArray","split","moduleOrObjectParser","e","booleanParser","nullParser","module","exports"],"mappings":";;AAAA,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,SAAO,UAAUC,GAAV,EAAe;AACpB,UAAMC,MAAM,GAAGC,QAAQ,CAACF,GAAD,CAAvB;;AACA,QAAI,CAACG,MAAM,CAACC,SAAP,CAAiBH,MAAjB,CAAL,EAA+B;AAC7B,YAAM,IAAII,KAAJ,CAAW,OAAMN,GAAI,sBAAqBC,GAAI,EAA9C,CAAN;AACD;;AACD,WAAOC,MAAP;AACD,GAND;AAOD;;AAED,SAASK,kBAAT,CAA4BP,GAA5B,EAAiC;AAC/B,SAAO,UAAUC,GAAV,EAAe;AACpB,QAAI,OAAOA,GAAP,KAAe,SAAnB,EAA8B;AAC5B,aAAOA,GAAP;AACD;;AACD,QAAIA,GAAG,KAAK,MAAZ,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnB,aAAO,KAAP;AACD;;AACD,WAAOF,YAAY,CAACC,GAAD,CAAZ,CAAkBC,GAAlB,CAAP;AACD,GAXD;AAYD;;AAED,SAASO,YAAT,CAAsBP,GAAtB,EAA2B;AACzB,MAAI,OAAOA,GAAP,IAAc,QAAlB,EAA4B;AAC1B,WAAOA,GAAP;AACD;;AACD,SAAOQ,IAAI,CAACC,KAAL,CAAWT,GAAX,CAAP;AACD;;AAED,SAASU,WAAT,CAAqBV,GAArB,EAA0B;AACxB,MAAIW,KAAK,CAACC,OAAN,CAAcZ,GAAd,CAAJ,EAAwB;AACtB,WAAOA,GAAP;AACD,GAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,WAAOA,GAAG,CAACa,KAAJ,CAAU,GAAV,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIR,KAAJ,CAAW,GAAEL,GAAI,iDAAjB,CAAN;AACD;AACF;;AAED,SAASc,oBAAT,CAA8Bd,GAA9B,EAAmC;AACjC,MAAI,OAAOA,GAAP,IAAc,QAAlB,EAA4B;AAC1B,WAAOA,GAAP;AACD;;AACD,MAAI;AACF,WAAOQ,IAAI,CAACC,KAAL,CAAWT,GAAX,CAAP;AACD,GAFD,CAEE,OAAOe,CAAP,EAAU;AACV;AACD;;AACD,SAAOf,GAAP;AACD;;AAED,SAASgB,aAAT,CAAuBhB,GAAvB,EAA4B;AAC1B,MAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,IAAI,MAAtB,IAAgCA,GAAG,IAAI,GAA3C,EAAgD;AAC9C,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAED,SAASiB,UAAT,CAAoBjB,GAApB,EAAyB;AACvB,MAAIA,GAAG,IAAI,MAAX,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,SAAOA,GAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,YADe;AAEfQ,EAAAA,kBAFe;AAGfW,EAAAA,UAHe;AAIfD,EAAAA,aAJe;AAKfF,EAAAA,oBALe;AAMfJ,EAAAA,WANe;AAOfH,EAAAA;AAPe,CAAjB","sourcesContent":["function numberParser(key) {\n  return function (opt) {\n    const intOpt = parseInt(opt);\n    if (!Number.isInteger(intOpt)) {\n      throw new Error(`Key ${key} has invalid value ${opt}`);\n    }\n    return intOpt;\n  };\n}\n\nfunction numberOrBoolParser(key) {\n  return function (opt) {\n    if (typeof opt === 'boolean') {\n      return opt;\n    }\n    if (opt === 'true') {\n      return true;\n    }\n    if (opt === 'false') {\n      return false;\n    }\n    return numberParser(key)(opt);\n  };\n}\n\nfunction objectParser(opt) {\n  if (typeof opt == 'object') {\n    return opt;\n  }\n  return JSON.parse(opt);\n}\n\nfunction arrayParser(opt) {\n  if (Array.isArray(opt)) {\n    return opt;\n  } else if (typeof opt === 'string') {\n    return opt.split(',');\n  } else {\n    throw new Error(`${opt} should be a comma separated string or an array`);\n  }\n}\n\nfunction moduleOrObjectParser(opt) {\n  if (typeof opt == 'object') {\n    return opt;\n  }\n  try {\n    return JSON.parse(opt);\n  } catch (e) {\n    /* */\n  }\n  return opt;\n}\n\nfunction booleanParser(opt) {\n  if (opt == true || opt == 'true' || opt == '1') {\n    return true;\n  }\n  return false;\n}\n\nfunction nullParser(opt) {\n  if (opt == 'null') {\n    return null;\n  }\n  return opt;\n}\n\nmodule.exports = {\n  numberParser,\n  numberOrBoolParser,\n  nullParser,\n  booleanParser,\n  moduleOrObjectParser,\n  arrayParser,\n  objectParser,\n};\n"],"file":"parsers.js"}