"use strict";

/*
**** GENERATED CODE ****
This code has been generated by resources/buildConfigDefinitions.js
Do not edit manually, but update Options/index.js
*/
var parsers = require('./parsers');

module.exports.ParseServerOptions = {
  accountLockout: {
    env: 'PARSE_SERVER_ACCOUNT_LOCKOUT',
    help: 'account lockout policy for failed login attempts',
    action: parsers.objectParser
  },
  allowClientClassCreation: {
    env: 'PARSE_SERVER_ALLOW_CLIENT_CLASS_CREATION',
    help: 'Enable (or disable) client class creation, defaults to true',
    action: parsers.booleanParser,
    default: true
  },
  allowCustomObjectId: {
    env: 'PARSE_SERVER_ALLOW_CUSTOM_OBJECT_ID',
    help: 'Enable (or disable) custom objectId',
    action: parsers.booleanParser,
    default: false
  },
  allowHeaders: {
    env: 'PARSE_SERVER_ALLOW_HEADERS',
    help: 'Add headers to Access-Control-Allow-Headers',
    action: parsers.arrayParser
  },
  allowOrigin: {
    env: 'PARSE_SERVER_ALLOW_ORIGIN',
    help: 'Sets the origin to Access-Control-Allow-Origin'
  },
  analyticsAdapter: {
    env: 'PARSE_SERVER_ANALYTICS_ADAPTER',
    help: 'Adapter module for the analytics',
    action: parsers.moduleOrObjectParser
  },
  appId: {
    env: 'PARSE_SERVER_APPLICATION_ID',
    help: 'Your Parse Application ID',
    required: true
  },
  appName: {
    env: 'PARSE_SERVER_APP_NAME',
    help: 'Sets the app name'
  },
  auth: {
    env: 'PARSE_SERVER_AUTH_PROVIDERS',
    help: 'Configuration for your authentication providers, as stringified JSON. See http://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication',
    action: parsers.objectParser
  },
  cacheAdapter: {
    env: 'PARSE_SERVER_CACHE_ADAPTER',
    help: 'Adapter module for the cache',
    action: parsers.moduleOrObjectParser
  },
  cacheMaxSize: {
    env: 'PARSE_SERVER_CACHE_MAX_SIZE',
    help: 'Sets the maximum size for the in memory cache, defaults to 10000',
    action: parsers.numberParser('cacheMaxSize'),
    default: 10000
  },
  cacheTTL: {
    env: 'PARSE_SERVER_CACHE_TTL',
    help: 'Sets the TTL for the in memory cache (in ms), defaults to 5000 (5 seconds)',
    action: parsers.numberParser('cacheTTL'),
    default: 5000
  },
  clientKey: {
    env: 'PARSE_SERVER_CLIENT_KEY',
    help: 'Key for iOS, MacOS, tvOS clients'
  },
  cloud: {
    env: 'PARSE_SERVER_CLOUD',
    help: 'Full path to your cloud code main.js'
  },
  cluster: {
    env: 'PARSE_SERVER_CLUSTER',
    help: 'Run with cluster, optionally set the number of processes default to os.cpus().length',
    action: parsers.numberOrBooleanParser
  },
  collectionPrefix: {
    env: 'PARSE_SERVER_COLLECTION_PREFIX',
    help: 'A collection prefix for the classes',
    default: ''
  },
  customPages: {
    env: 'PARSE_SERVER_CUSTOM_PAGES',
    help: 'custom pages for password validation and reset',
    action: parsers.objectParser,
    default: {}
  },
  databaseAdapter: {
    env: 'PARSE_SERVER_DATABASE_ADAPTER',
    help: 'Adapter module for the database',
    action: parsers.moduleOrObjectParser
  },
  databaseOptions: {
    env: 'PARSE_SERVER_DATABASE_OPTIONS',
    help: 'Options to pass to the mongodb client',
    action: parsers.objectParser
  },
  databaseURI: {
    env: 'PARSE_SERVER_DATABASE_URI',
    help: 'The full URI to your database. Supported databases are mongodb or postgres.',
    required: true,
    default: 'mongodb://localhost:27017/parse'
  },
  directAccess: {
    env: 'PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS',
    help: 'Replace HTTP Interface when using JS SDK in current node runtime, defaults to false. Caution, this is an experimental feature that may not be appropriate for production.',
    action: parsers.booleanParser,
    default: false
  },
  dotNetKey: {
    env: 'PARSE_SERVER_DOT_NET_KEY',
    help: 'Key for Unity and .Net SDK'
  },
  emailAdapter: {
    env: 'PARSE_SERVER_EMAIL_ADAPTER',
    help: 'Adapter module for email sending',
    action: parsers.moduleOrObjectParser
  },
  emailVerifyTokenReuseIfValid: {
    env: 'PARSE_SERVER_EMAIL_VERIFY_TOKEN_REUSE_IF_VALID',
    help: 'an existing email verify token should be reused when resend verification email is requested',
    action: parsers.booleanParser,
    default: false
  },
  emailVerifyTokenValidityDuration: {
    env: 'PARSE_SERVER_EMAIL_VERIFY_TOKEN_VALIDITY_DURATION',
    help: 'Email verification token validity duration, in seconds',
    action: parsers.numberParser('emailVerifyTokenValidityDuration')
  },
  enableAnonymousUsers: {
    env: 'PARSE_SERVER_ENABLE_ANON_USERS',
    help: 'Enable (or disable) anonymous users, defaults to true',
    action: parsers.booleanParser,
    default: true
  },
  enableExpressErrorHandler: {
    env: 'PARSE_SERVER_ENABLE_EXPRESS_ERROR_HANDLER',
    help: 'Enables the default express error handler for all errors',
    action: parsers.booleanParser,
    default: false
  },
  enableSingleSchemaCache: {
    env: 'PARSE_SERVER_ENABLE_SINGLE_SCHEMA_CACHE',
    help: 'Use a single schema cache shared across requests. Reduces number of queries made to _SCHEMA, defaults to false, i.e. unique schema cache per request.',
    action: parsers.booleanParser,
    default: false
  },
  encryptionKey: {
    env: 'PARSE_SERVER_ENCRYPTION_KEY',
    help: 'Key for encrypting your files'
  },
  expireInactiveSessions: {
    env: 'PARSE_SERVER_EXPIRE_INACTIVE_SESSIONS',
    help: 'Sets wether we should expire the inactive sessions, defaults to true',
    action: parsers.booleanParser,
    default: true
  },
  fileKey: {
    env: 'PARSE_SERVER_FILE_KEY',
    help: 'Key for your files'
  },
  filesAdapter: {
    env: 'PARSE_SERVER_FILES_ADAPTER',
    help: 'Adapter module for the files sub-system',
    action: parsers.moduleOrObjectParser
  },
  fileUpload: {
    env: 'PARSE_SERVER_FILE_UPLOAD_OPTIONS',
    help: 'Options for file uploads',
    action: parsers.objectParser,
    default: {}
  },
  graphQLPath: {
    env: 'PARSE_SERVER_GRAPHQL_PATH',
    help: 'Mount path for the GraphQL endpoint, defaults to /graphql',
    default: '/graphql'
  },
  graphQLSchema: {
    env: 'PARSE_SERVER_GRAPH_QLSCHEMA',
    help: 'Full path to your GraphQL custom schema.graphql file'
  },
  host: {
    env: 'PARSE_SERVER_HOST',
    help: 'The host to serve ParseServer on, defaults to 0.0.0.0',
    default: '0.0.0.0'
  },
  idempotencyOptions: {
    env: 'PARSE_SERVER_EXPERIMENTAL_IDEMPOTENCY_OPTIONS',
    help: 'Options for request idempotency to deduplicate identical requests that may be caused by network issues. Caution, this is an experimental feature that may not be appropriate for production.',
    action: parsers.objectParser,
    default: {}
  },
  javascriptKey: {
    env: 'PARSE_SERVER_JAVASCRIPT_KEY',
    help: 'Key for the Javascript SDK'
  },
  jsonLogs: {
    env: 'JSON_LOGS',
    help: 'Log as structured JSON objects',
    action: parsers.booleanParser
  },
  liveQuery: {
    env: 'PARSE_SERVER_LIVE_QUERY',
    help: "parse-server's LiveQuery configuration object",
    action: parsers.objectParser
  },
  liveQueryServerOptions: {
    env: 'PARSE_SERVER_LIVE_QUERY_SERVER_OPTIONS',
    help: 'Live query server configuration options (will start the liveQuery server)',
    action: parsers.objectParser
  },
  loggerAdapter: {
    env: 'PARSE_SERVER_LOGGER_ADAPTER',
    help: 'Adapter module for the logging sub-system',
    action: parsers.moduleOrObjectParser
  },
  logLevel: {
    env: 'PARSE_SERVER_LOG_LEVEL',
    help: 'Sets the level for logs'
  },
  logsFolder: {
    env: 'PARSE_SERVER_LOGS_FOLDER',
    help: "Folder for the logs (defaults to './logs'); set to null to disable file based logging",
    default: './logs'
  },
  masterKey: {
    env: 'PARSE_SERVER_MASTER_KEY',
    help: 'Your Parse Master Key',
    required: true
  },
  masterKeyIps: {
    env: 'PARSE_SERVER_MASTER_KEY_IPS',
    help: 'Restrict masterKey to be used by only these ips, defaults to [] (allow all ips)',
    action: parsers.arrayParser,
    default: []
  },
  maxLimit: {
    env: 'PARSE_SERVER_MAX_LIMIT',
    help: 'Max value for limit option on queries, defaults to unlimited',
    action: parsers.numberParser('maxLimit')
  },
  maxLogFiles: {
    env: 'PARSE_SERVER_MAX_LOG_FILES',
    help: "Maximum number of logs to keep. If not set, no logs will be removed. This can be a number of files or number of days. If using days, add 'd' as the suffix. (default: null)",
    action: parsers.objectParser
  },
  maxUploadSize: {
    env: 'PARSE_SERVER_MAX_UPLOAD_SIZE',
    help: 'Max file size for uploads, defaults to 20mb',
    default: '20mb'
  },
  middleware: {
    env: 'PARSE_SERVER_MIDDLEWARE',
    help: 'middleware for express server, can be string or function'
  },
  mountGraphQL: {
    env: 'PARSE_SERVER_MOUNT_GRAPHQL',
    help: 'Mounts the GraphQL endpoint',
    action: parsers.booleanParser,
    default: false
  },
  mountPath: {
    env: 'PARSE_SERVER_MOUNT_PATH',
    help: 'Mount path for the server, defaults to /parse',
    default: '/parse'
  },
  mountPlayground: {
    env: 'PARSE_SERVER_MOUNT_PLAYGROUND',
    help: 'Mounts the GraphQL Playground - never use this option in production',
    action: parsers.booleanParser,
    default: false
  },
  objectIdSize: {
    env: 'PARSE_SERVER_OBJECT_ID_SIZE',
    help: "Sets the number of characters in generated object id's, default 10",
    action: parsers.numberParser('objectIdSize'),
    default: 10
  },
  pages: {
    env: 'PARSE_SERVER_PAGES',
    help: 'The options for pages such as password reset and email verification. Caution, this is an experimental feature that may not be appropriate for production.',
    action: parsers.objectParser,
    default: {}
  },
  passwordPolicy: {
    env: 'PARSE_SERVER_PASSWORD_POLICY',
    help: 'Password policy for enforcing password related rules',
    action: parsers.objectParser
  },
  playgroundPath: {
    env: 'PARSE_SERVER_PLAYGROUND_PATH',
    help: 'Mount path for the GraphQL Playground, defaults to /playground',
    default: '/playground'
  },
  port: {
    env: 'PORT',
    help: 'The port to run the ParseServer, defaults to 1337.',
    action: parsers.numberParser('port'),
    default: 1337
  },
  preserveFileName: {
    env: 'PARSE_SERVER_PRESERVE_FILE_NAME',
    help: 'Enable (or disable) the addition of a unique hash to the file names',
    action: parsers.booleanParser,
    default: false
  },
  preventLoginWithUnverifiedEmail: {
    env: 'PARSE_SERVER_PREVENT_LOGIN_WITH_UNVERIFIED_EMAIL',
    help: 'Prevent user from login if email is not verified and PARSE_SERVER_VERIFY_USER_EMAILS is true, defaults to false',
    action: parsers.booleanParser,
    default: false
  },
  protectedFields: {
    env: 'PARSE_SERVER_PROTECTED_FIELDS',
    help: 'Protected fields that should be treated with extra security when fetching details.',
    action: parsers.objectParser,
    default: {
      _User: {
        '*': ['email']
      }
    }
  },
  publicServerURL: {
    env: 'PARSE_PUBLIC_SERVER_URL',
    help: 'Public URL to your parse server with http:// or https://.'
  },
  push: {
    env: 'PARSE_SERVER_PUSH',
    help: 'Configuration for push, as stringified JSON. See http://docs.parseplatform.org/parse-server/guide/#push-notifications',
    action: parsers.objectParser
  },
  readOnlyMasterKey: {
    env: 'PARSE_SERVER_READ_ONLY_MASTER_KEY',
    help: 'Read-only key, which has the same capabilities as MasterKey without writes'
  },
  restAPIKey: {
    env: 'PARSE_SERVER_REST_API_KEY',
    help: 'Key for REST calls'
  },
  revokeSessionOnPasswordReset: {
    env: 'PARSE_SERVER_REVOKE_SESSION_ON_PASSWORD_RESET',
    help: "When a user changes their password, either through the reset password email or while logged in, all sessions are revoked if this is true. Set to false if you don't want to revoke sessions.",
    action: parsers.booleanParser,
    default: true
  },
  scheduledPush: {
    env: 'PARSE_SERVER_SCHEDULED_PUSH',
    help: 'Configuration for push scheduling, defaults to false.',
    action: parsers.booleanParser,
    default: false
  },
  schemaCacheTTL: {
    env: 'PARSE_SERVER_SCHEMA_CACHE_TTL',
    help: 'The TTL for caching the schema for optimizing read/write operations. You should put a long TTL when your DB is in production. default to 5000; set 0 to disable.',
    action: parsers.numberParser('schemaCacheTTL'),
    default: 5000
  },
  serverCloseComplete: {
    env: 'PARSE_SERVER_SERVER_CLOSE_COMPLETE',
    help: 'Callback when server has closed'
  },
  serverStartComplete: {
    env: 'PARSE_SERVER_SERVER_START_COMPLETE',
    help: 'Callback when server has started'
  },
  serverURL: {
    env: 'PARSE_SERVER_URL',
    help: 'URL to your parse server with http:// or https://.',
    required: true
  },
  sessionLength: {
    env: 'PARSE_SERVER_SESSION_LENGTH',
    help: 'Session duration, in seconds, defaults to 1 year',
    action: parsers.numberParser('sessionLength'),
    default: 31536000
  },
  silent: {
    env: 'SILENT',
    help: 'Disables console output',
    action: parsers.booleanParser
  },
  startLiveQueryServer: {
    env: 'PARSE_SERVER_START_LIVE_QUERY_SERVER',
    help: 'Starts the liveQuery server',
    action: parsers.booleanParser
  },
  userSensitiveFields: {
    env: 'PARSE_SERVER_USER_SENSITIVE_FIELDS',
    help: 'Personally identifiable information fields in the user table the should be removed for non-authorized users. Deprecated @see protectedFields',
    action: parsers.arrayParser
  },
  verbose: {
    env: 'VERBOSE',
    help: 'Set the logging to verbose',
    action: parsers.booleanParser
  },
  verifyUserEmails: {
    env: 'PARSE_SERVER_VERIFY_USER_EMAILS',
    help: 'Enable (or disable) user email validation, defaults to false',
    action: parsers.booleanParser,
    default: false
  },
  webhookKey: {
    env: 'PARSE_SERVER_WEBHOOK_KEY',
    help: 'Key sent with outgoing webhook calls'
  }
};
module.exports.PagesOptions = {
  customRoutes: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_ROUTES',
    help: 'The custom routes.',
    action: parsers.arrayParser,
    default: []
  },
  customUrls: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URLS',
    help: 'The URLs to the custom pages.',
    action: parsers.objectParser,
    default: {}
  },
  enableLocalization: {
    env: 'PARSE_SERVER_PAGES_ENABLE_LOCALIZATION',
    help: 'Is true if pages should be localized; this has no effect on custom page redirects.',
    action: parsers.booleanParser,
    default: false
  },
  enableRouter: {
    env: 'PARSE_SERVER_PAGES_ENABLE_ROUTER',
    help: 'Is true if the pages router should be enabled; this is required for any of the pages options to take effect. Caution, this is an experimental feature that may not be appropriate for production.',
    action: parsers.booleanParser,
    default: false
  },
  forceRedirect: {
    env: 'PARSE_SERVER_PAGES_FORCE_REDIRECT',
    help: 'Is true if responses should always be redirects and never content, false if the response type should depend on the request type (GET request -> content response; POST request -> redirect response).',
    action: parsers.booleanParser,
    default: false
  },
  localizationFallbackLocale: {
    env: 'PARSE_SERVER_PAGES_LOCALIZATION_FALLBACK_LOCALE',
    help: 'The fallback locale for localization if no matching translation is provided for the given locale. This is only relevant when providing translation resources via JSON file.',
    default: 'en'
  },
  localizationJsonPath: {
    env: 'PARSE_SERVER_PAGES_LOCALIZATION_JSON_PATH',
    help: 'The path to the JSON file for localization; the translations will be used to fill template placeholders according to the locale.'
  },
  pagesEndpoint: {
    env: 'PARSE_SERVER_PAGES_PAGES_ENDPOINT',
    help: "The API endpoint for the pages. Default is 'apps'.",
    default: 'apps'
  },
  pagesPath: {
    env: 'PARSE_SERVER_PAGES_PAGES_PATH',
    help: "The path to the pages directory; this also defines where the static endpoint '/apps' points to. Default is the './public/' directory.",
    default: './public'
  },
  placeholders: {
    env: 'PARSE_SERVER_PAGES_PLACEHOLDERS',
    help: 'The placeholder keys and values which will be filled in pages; this can be a simple object or a callback function.',
    action: parsers.objectParser,
    default: {}
  }
};
module.exports.PagesRoute = {
  method: {
    env: 'PARSE_SERVER_PAGES_ROUTE_METHOD',
    help: "The route method, e.g. 'GET' or 'POST'.",
    required: true
  },
  path: {
    env: 'PARSE_SERVER_PAGES_ROUTE_PATH',
    help: 'The route path.',
    required: true
  }
};
module.exports.PagesCustomUrlsOptions = {
  emailVerificationLinkExpired: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_LINK_EXPIRED',
    help: 'The URL to the custom page for email verification -> link expired.'
  },
  emailVerificationLinkInvalid: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_LINK_INVALID',
    help: 'The URL to the custom page for email verification -> link invalid.'
  },
  emailVerificationSendFail: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_SEND_FAIL',
    help: 'The URL to the custom page for email verification -> link send fail.'
  },
  emailVerificationSendSuccess: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_SEND_SUCCESS',
    help: 'The URL to the custom page for email verification -> resend link -> success.'
  },
  emailVerificationSuccess: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_SUCCESS',
    help: 'The URL to the custom page for email verification -> success.'
  },
  passwordReset: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_PASSWORD_RESET',
    help: 'The URL to the custom page for password reset.'
  },
  passwordResetLinkInvalid: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_PASSWORD_RESET_LINK_INVALID',
    help: 'The URL to the custom page for password reset -> link invalid.'
  },
  passwordResetSuccess: {
    env: 'PARSE_SERVER_PAGES_CUSTOM_URL_PASSWORD_RESET_SUCCESS',
    help: 'The URL to the custom page for password reset -> success.'
  }
};
module.exports.CustomPagesOptions = {
  choosePassword: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_CHOOSE_PASSWORD',
    help: 'choose password page path'
  },
  expiredVerificationLink: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_EXPIRED_VERIFICATION_LINK',
    help: 'expired verification link page path'
  },
  invalidLink: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_INVALID_LINK',
    help: 'invalid link page path'
  },
  invalidPasswordResetLink: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_INVALID_PASSWORD_RESET_LINK',
    help: 'invalid password reset link page path'
  },
  invalidVerificationLink: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_INVALID_VERIFICATION_LINK',
    help: 'invalid verification link page path'
  },
  linkSendFail: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_LINK_SEND_FAIL',
    help: 'verification link send fail page path'
  },
  linkSendSuccess: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_LINK_SEND_SUCCESS',
    help: 'verification link send success page path'
  },
  parseFrameURL: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_PARSE_FRAME_URL',
    help: 'for masking user-facing pages'
  },
  passwordResetSuccess: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_PASSWORD_RESET_SUCCESS',
    help: 'password reset success page path'
  },
  verifyEmailSuccess: {
    env: 'PARSE_SERVER_CUSTOM_PAGES_VERIFY_EMAIL_SUCCESS',
    help: 'verify email success page path'
  }
};
module.exports.LiveQueryOptions = {
  classNames: {
    env: 'PARSE_SERVER_LIVEQUERY_CLASSNAMES',
    help: "parse-server's LiveQuery classNames",
    action: parsers.arrayParser
  },
  pubSubAdapter: {
    env: 'PARSE_SERVER_LIVEQUERY_PUB_SUB_ADAPTER',
    help: 'LiveQuery pubsub adapter',
    action: parsers.moduleOrObjectParser
  },
  redisOptions: {
    env: 'PARSE_SERVER_LIVEQUERY_REDIS_OPTIONS',
    help: "parse-server's LiveQuery redisOptions",
    action: parsers.objectParser
  },
  redisURL: {
    env: 'PARSE_SERVER_LIVEQUERY_REDIS_URL',
    help: "parse-server's LiveQuery redisURL"
  },
  wssAdapter: {
    env: 'PARSE_SERVER_LIVEQUERY_WSS_ADAPTER',
    help: 'Adapter module for the WebSocketServer',
    action: parsers.moduleOrObjectParser
  }
};
module.exports.LiveQueryServerOptions = {
  appId: {
    env: 'PARSE_LIVE_QUERY_SERVER_APP_ID',
    help: 'This string should match the appId in use by your Parse Server. If you deploy the LiveQuery server alongside Parse Server, the LiveQuery server will try to use the same appId.'
  },
  cacheTimeout: {
    env: 'PARSE_LIVE_QUERY_SERVER_CACHE_TIMEOUT',
    help: "Number in milliseconds. When clients provide the sessionToken to the LiveQuery server, the LiveQuery server will try to fetch its ParseUser's objectId from parse server and store it in the cache. The value defines the duration of the cache. Check the following Security section and our protocol specification for details, defaults to 5 * 1000 ms (5 seconds).",
    action: parsers.numberParser('cacheTimeout')
  },
  keyPairs: {
    env: 'PARSE_LIVE_QUERY_SERVER_KEY_PAIRS',
    help: 'A JSON object that serves as a whitelist of keys. It is used for validating clients when they try to connect to the LiveQuery server. Check the following Security section and our protocol specification for details.',
    action: parsers.objectParser
  },
  logLevel: {
    env: 'PARSE_LIVE_QUERY_SERVER_LOG_LEVEL',
    help: 'This string defines the log level of the LiveQuery server. We support VERBOSE, INFO, ERROR, NONE, defaults to INFO.'
  },
  masterKey: {
    env: 'PARSE_LIVE_QUERY_SERVER_MASTER_KEY',
    help: 'This string should match the masterKey in use by your Parse Server. If you deploy the LiveQuery server alongside Parse Server, the LiveQuery server will try to use the same masterKey.'
  },
  port: {
    env: 'PARSE_LIVE_QUERY_SERVER_PORT',
    help: 'The port to run the LiveQuery server, defaults to 1337.',
    action: parsers.numberParser('port'),
    default: 1337
  },
  pubSubAdapter: {
    env: 'PARSE_LIVE_QUERY_SERVER_PUB_SUB_ADAPTER',
    help: 'LiveQuery pubsub adapter',
    action: parsers.moduleOrObjectParser
  },
  redisOptions: {
    env: 'PARSE_LIVE_QUERY_SERVER_REDIS_OPTIONS',
    help: "parse-server's LiveQuery redisOptions",
    action: parsers.objectParser
  },
  redisURL: {
    env: 'PARSE_LIVE_QUERY_SERVER_REDIS_URL',
    help: "parse-server's LiveQuery redisURL"
  },
  serverURL: {
    env: 'PARSE_LIVE_QUERY_SERVER_SERVER_URL',
    help: 'This string should match the serverURL in use by your Parse Server. If you deploy the LiveQuery server alongside Parse Server, the LiveQuery server will try to use the same serverURL.'
  },
  websocketTimeout: {
    env: 'PARSE_LIVE_QUERY_SERVER_WEBSOCKET_TIMEOUT',
    help: 'Number of milliseconds between ping/pong frames. The WebSocket server sends ping/pong frames to the clients to keep the WebSocket alive. This value defines the interval of the ping/pong frame from the server to clients, defaults to 10 * 1000 ms (10 s).',
    action: parsers.numberParser('websocketTimeout')
  },
  wssAdapter: {
    env: 'PARSE_LIVE_QUERY_SERVER_WSS_ADAPTER',
    help: 'Adapter module for the WebSocketServer',
    action: parsers.moduleOrObjectParser
  }
};
module.exports.IdempotencyOptions = {
  paths: {
    env: 'PARSE_SERVER_EXPERIMENTAL_IDEMPOTENCY_PATHS',
    help: 'An array of paths for which the feature should be enabled. The mount path must not be included, for example instead of `/parse/functions/myFunction` specifiy `functions/myFunction`. The entries are interpreted as regular expression, for example `functions/.*` matches all functions, `jobs/.*` matches all jobs, `classes/.*` matches all classes, `.*` matches all paths.',
    action: parsers.arrayParser,
    default: []
  },
  ttl: {
    env: 'PARSE_SERVER_EXPERIMENTAL_IDEMPOTENCY_TTL',
    help: 'The duration in seconds after which a request record is discarded from the database, defaults to 300s.',
    action: parsers.numberParser('ttl'),
    default: 300
  }
};
module.exports.AccountLockoutOptions = {
  duration: {
    env: 'PARSE_SERVER_ACCOUNT_LOCKOUT_DURATION',
    help: 'number of minutes that a locked-out account remains locked out before automatically becoming unlocked.',
    action: parsers.numberParser('duration')
  },
  threshold: {
    env: 'PARSE_SERVER_ACCOUNT_LOCKOUT_THRESHOLD',
    help: 'number of failed sign-in attempts that will cause a user account to be locked',
    action: parsers.numberParser('threshold')
  },
  unlockOnPasswordReset: {
    env: 'PARSE_SERVER_ACCOUNT_LOCKOUT_UNLOCK_ON_PASSWORD_RESET',
    help: 'Is true if the account lock should be removed after a successful password reset.',
    action: parsers.booleanParser,
    default: false
  }
};
module.exports.PasswordPolicyOptions = {
  doNotAllowUsername: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_DO_NOT_ALLOW_USERNAME',
    help: 'disallow username in passwords',
    action: parsers.booleanParser
  },
  maxPasswordAge: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_MAX_PASSWORD_AGE',
    help: 'days for password expiry',
    action: parsers.numberParser('maxPasswordAge')
  },
  maxPasswordHistory: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_MAX_PASSWORD_HISTORY',
    help: 'setting to prevent reuse of previous n passwords',
    action: parsers.numberParser('maxPasswordHistory')
  },
  resetTokenReuseIfValid: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_RESET_TOKEN_REUSE_IF_VALID',
    help: "resend token if it's still valid",
    action: parsers.booleanParser
  },
  resetTokenValidityDuration: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_RESET_TOKEN_VALIDITY_DURATION',
    help: 'time for token to expire',
    action: parsers.numberParser('resetTokenValidityDuration')
  },
  validatorCallback: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_VALIDATOR_CALLBACK',
    help: 'a callback function to be invoked to validate the password'
  },
  validatorPattern: {
    env: 'PARSE_SERVER_PASSWORD_POLICY_VALIDATOR_PATTERN',
    help: 'a RegExp object or a regex string representing the pattern to enforce'
  }
};
module.exports.FileUploadOptions = {
  enableForAnonymousUser: {
    env: 'PARSE_SERVER_FILE_UPLOAD_ENABLE_FOR_ANONYMOUS_USER',
    help: 'Is true if file upload should be allowed for anonymous users.',
    action: parsers.booleanParser,
    default: false
  },
  enableForAuthenticatedUser: {
    env: 'PARSE_SERVER_FILE_UPLOAD_ENABLE_FOR_AUTHENTICATED_USER',
    help: 'Is true if file upload should be allowed for authenticated users.',
    action: parsers.booleanParser,
    default: true
  },
  enableForPublic: {
    env: 'PARSE_SERVER_FILE_UPLOAD_ENABLE_FOR_PUBLIC',
    help: 'Is true if file upload should be allowed for anyone, regardless of user authentication.',
    action: parsers.booleanParser,
    default: false
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9PcHRpb25zL0RlZmluaXRpb25zLmpzIl0sIm5hbWVzIjpbInBhcnNlcnMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlBhcnNlU2VydmVyT3B0aW9ucyIsImFjY291bnRMb2Nrb3V0IiwiZW52IiwiaGVscCIsImFjdGlvbiIsIm9iamVjdFBhcnNlciIsImFsbG93Q2xpZW50Q2xhc3NDcmVhdGlvbiIsImJvb2xlYW5QYXJzZXIiLCJkZWZhdWx0IiwiYWxsb3dDdXN0b21PYmplY3RJZCIsImFsbG93SGVhZGVycyIsImFycmF5UGFyc2VyIiwiYWxsb3dPcmlnaW4iLCJhbmFseXRpY3NBZGFwdGVyIiwibW9kdWxlT3JPYmplY3RQYXJzZXIiLCJhcHBJZCIsInJlcXVpcmVkIiwiYXBwTmFtZSIsImF1dGgiLCJjYWNoZUFkYXB0ZXIiLCJjYWNoZU1heFNpemUiLCJudW1iZXJQYXJzZXIiLCJjYWNoZVRUTCIsImNsaWVudEtleSIsImNsb3VkIiwiY2x1c3RlciIsIm51bWJlck9yQm9vbGVhblBhcnNlciIsImNvbGxlY3Rpb25QcmVmaXgiLCJjdXN0b21QYWdlcyIsImRhdGFiYXNlQWRhcHRlciIsImRhdGFiYXNlT3B0aW9ucyIsImRhdGFiYXNlVVJJIiwiZGlyZWN0QWNjZXNzIiwiZG90TmV0S2V5IiwiZW1haWxBZGFwdGVyIiwiZW1haWxWZXJpZnlUb2tlblJldXNlSWZWYWxpZCIsImVtYWlsVmVyaWZ5VG9rZW5WYWxpZGl0eUR1cmF0aW9uIiwiZW5hYmxlQW5vbnltb3VzVXNlcnMiLCJlbmFibGVFeHByZXNzRXJyb3JIYW5kbGVyIiwiZW5hYmxlU2luZ2xlU2NoZW1hQ2FjaGUiLCJlbmNyeXB0aW9uS2V5IiwiZXhwaXJlSW5hY3RpdmVTZXNzaW9ucyIsImZpbGVLZXkiLCJmaWxlc0FkYXB0ZXIiLCJmaWxlVXBsb2FkIiwiZ3JhcGhRTFBhdGgiLCJncmFwaFFMU2NoZW1hIiwiaG9zdCIsImlkZW1wb3RlbmN5T3B0aW9ucyIsImphdmFzY3JpcHRLZXkiLCJqc29uTG9ncyIsImxpdmVRdWVyeSIsImxpdmVRdWVyeVNlcnZlck9wdGlvbnMiLCJsb2dnZXJBZGFwdGVyIiwibG9nTGV2ZWwiLCJsb2dzRm9sZGVyIiwibWFzdGVyS2V5IiwibWFzdGVyS2V5SXBzIiwibWF4TGltaXQiLCJtYXhMb2dGaWxlcyIsIm1heFVwbG9hZFNpemUiLCJtaWRkbGV3YXJlIiwibW91bnRHcmFwaFFMIiwibW91bnRQYXRoIiwibW91bnRQbGF5Z3JvdW5kIiwib2JqZWN0SWRTaXplIiwicGFnZXMiLCJwYXNzd29yZFBvbGljeSIsInBsYXlncm91bmRQYXRoIiwicG9ydCIsInByZXNlcnZlRmlsZU5hbWUiLCJwcmV2ZW50TG9naW5XaXRoVW52ZXJpZmllZEVtYWlsIiwicHJvdGVjdGVkRmllbGRzIiwiX1VzZXIiLCJwdWJsaWNTZXJ2ZXJVUkwiLCJwdXNoIiwicmVhZE9ubHlNYXN0ZXJLZXkiLCJyZXN0QVBJS2V5IiwicmV2b2tlU2Vzc2lvbk9uUGFzc3dvcmRSZXNldCIsInNjaGVkdWxlZFB1c2giLCJzY2hlbWFDYWNoZVRUTCIsInNlcnZlckNsb3NlQ29tcGxldGUiLCJzZXJ2ZXJTdGFydENvbXBsZXRlIiwic2VydmVyVVJMIiwic2Vzc2lvbkxlbmd0aCIsInNpbGVudCIsInN0YXJ0TGl2ZVF1ZXJ5U2VydmVyIiwidXNlclNlbnNpdGl2ZUZpZWxkcyIsInZlcmJvc2UiLCJ2ZXJpZnlVc2VyRW1haWxzIiwid2ViaG9va0tleSIsIlBhZ2VzT3B0aW9ucyIsImN1c3RvbVJvdXRlcyIsImN1c3RvbVVybHMiLCJlbmFibGVMb2NhbGl6YXRpb24iLCJlbmFibGVSb3V0ZXIiLCJmb3JjZVJlZGlyZWN0IiwibG9jYWxpemF0aW9uRmFsbGJhY2tMb2NhbGUiLCJsb2NhbGl6YXRpb25Kc29uUGF0aCIsInBhZ2VzRW5kcG9pbnQiLCJwYWdlc1BhdGgiLCJwbGFjZWhvbGRlcnMiLCJQYWdlc1JvdXRlIiwibWV0aG9kIiwicGF0aCIsIlBhZ2VzQ3VzdG9tVXJsc09wdGlvbnMiLCJlbWFpbFZlcmlmaWNhdGlvbkxpbmtFeHBpcmVkIiwiZW1haWxWZXJpZmljYXRpb25MaW5rSW52YWxpZCIsImVtYWlsVmVyaWZpY2F0aW9uU2VuZEZhaWwiLCJlbWFpbFZlcmlmaWNhdGlvblNlbmRTdWNjZXNzIiwiZW1haWxWZXJpZmljYXRpb25TdWNjZXNzIiwicGFzc3dvcmRSZXNldCIsInBhc3N3b3JkUmVzZXRMaW5rSW52YWxpZCIsInBhc3N3b3JkUmVzZXRTdWNjZXNzIiwiQ3VzdG9tUGFnZXNPcHRpb25zIiwiY2hvb3NlUGFzc3dvcmQiLCJleHBpcmVkVmVyaWZpY2F0aW9uTGluayIsImludmFsaWRMaW5rIiwiaW52YWxpZFBhc3N3b3JkUmVzZXRMaW5rIiwiaW52YWxpZFZlcmlmaWNhdGlvbkxpbmsiLCJsaW5rU2VuZEZhaWwiLCJsaW5rU2VuZFN1Y2Nlc3MiLCJwYXJzZUZyYW1lVVJMIiwidmVyaWZ5RW1haWxTdWNjZXNzIiwiTGl2ZVF1ZXJ5T3B0aW9ucyIsImNsYXNzTmFtZXMiLCJwdWJTdWJBZGFwdGVyIiwicmVkaXNPcHRpb25zIiwicmVkaXNVUkwiLCJ3c3NBZGFwdGVyIiwiTGl2ZVF1ZXJ5U2VydmVyT3B0aW9ucyIsImNhY2hlVGltZW91dCIsImtleVBhaXJzIiwid2Vic29ja2V0VGltZW91dCIsIklkZW1wb3RlbmN5T3B0aW9ucyIsInBhdGhzIiwidHRsIiwiQWNjb3VudExvY2tvdXRPcHRpb25zIiwiZHVyYXRpb24iLCJ0aHJlc2hvbGQiLCJ1bmxvY2tPblBhc3N3b3JkUmVzZXQiLCJQYXNzd29yZFBvbGljeU9wdGlvbnMiLCJkb05vdEFsbG93VXNlcm5hbWUiLCJtYXhQYXNzd29yZEFnZSIsIm1heFBhc3N3b3JkSGlzdG9yeSIsInJlc2V0VG9rZW5SZXVzZUlmVmFsaWQiLCJyZXNldFRva2VuVmFsaWRpdHlEdXJhdGlvbiIsInZhbGlkYXRvckNhbGxiYWNrIiwidmFsaWRhdG9yUGF0dGVybiIsIkZpbGVVcGxvYWRPcHRpb25zIiwiZW5hYmxlRm9yQW5vbnltb3VzVXNlciIs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SUFBSSxFQUFFLG1FQUZvQjtBQUcxQkMsSUFBQUEsTUFBTSxFQUFFUixPQUFPLENBQUNXLGFBSFU7QUFJMUJDLElBQUFBLE9BQU8sRUFBRTtBQUppQixHQVBLO0FBYWpDZ0osRUFBQUEsZUFBZSxFQUFFO0FBQ2Z0SixJQUFBQSxHQUFHLEVBQUUsNENBRFU7QUFFZkMsSUFBQUEsSUFBSSxFQUFFLHlGQUZTO0FBR2ZDLElBQUFBLE1BQU0sRUFBRVIsT0FBTyxDQUFDVyxhQUhEO0FBSWZDLElBQUFBLE9BQU8sRUFBRTtBQUpNO0FBYmdCLENBQW5DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbioqKiogR0VORVJBVEVEIENPREUgKioqKlxuVGhpcyBjb2RlIGhhcyBiZWVuIGdlbmVyYXRlZCBieSByZXNvdXJjZXMvYnVpbGRDb25maWdEZWZpbml0aW9ucy5qc1xuRG8gbm90IGVkaXQgbWFudWFsbHksIGJ1dCB1cGRhdGUgT3B0aW9ucy9pbmRleC5qc1xuKi9cbnZhciBwYXJzZXJzID0gcmVxdWlyZSgnLi9wYXJzZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzLlBhcnNlU2VydmVyT3B0aW9ucyA9IHtcbiAgYWNjb3VudExvY2tvdXQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQUNDT1VOVF9MT0NLT1VUJyxcbiAgICBoZWxwOiAnYWNjb3VudCBsb2Nrb3V0IHBvbGljeSBmb3IgZmFpbGVkIGxvZ2luIGF0dGVtcHRzJyxcbiAgICBhY3Rpb246IHBhcnNlcnMub2JqZWN0UGFyc2VyLFxuICB9LFxuICBhbGxvd0NsaWVudENsYXNzQ3JlYXRpb246IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQUxMT1dfQ0xJRU5UX0NMQVNTX0NSRUFUSU9OJyxcbiAgICBoZWxwOiAnRW5hYmxlIChvciBkaXNhYmxlKSBjbGllbnQgY2xhc3MgY3JlYXRpb24sIGRlZmF1bHRzIHRvIHRydWUnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gIH0sXG4gIGFsbG93Q3VzdG9tT2JqZWN0SWQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQUxMT1dfQ1VTVE9NX09CSkVDVF9JRCcsXG4gICAgaGVscDogJ0VuYWJsZSAob3IgZGlzYWJsZSkgY3VzdG9tIG9iamVjdElkJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbiAgYWxsb3dIZWFkZXJzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0FMTE9XX0hFQURFUlMnLFxuICAgIGhlbHA6ICdBZGQgaGVhZGVycyB0byBBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYXJyYXlQYXJzZXIsXG4gIH0sXG4gIGFsbG93T3JpZ2luOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0FMTE9XX09SSUdJTicsXG4gICAgaGVscDogJ1NldHMgdGhlIG9yaWdpbiB0byBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLFxuICB9LFxuICBhbmFseXRpY3NBZGFwdGVyOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0FOQUxZVElDU19BREFQVEVSJyxcbiAgICBoZWxwOiAnQWRhcHRlciBtb2R1bGUgZm9yIHRoZSBhbmFseXRpY3MnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5tb2R1bGVPck9iamVjdFBhcnNlcixcbiAgfSxcbiAgYXBwSWQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQVBQTElDQVRJT05fSUQnLFxuICAgIGhlbHA6ICdZb3VyIFBhcnNlIEFwcGxpY2F0aW9uIElEJyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgYXBwTmFtZToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9BUFBfTkFNRScsXG4gICAgaGVscDogJ1NldHMgdGhlIGFwcCBuYW1lJyxcbiAgfSxcbiAgYXV0aDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9BVVRIX1BST1ZJREVSUycsXG4gICAgaGVscDpcbiAgICAgICdDb25maWd1cmF0aW9uIGZvciB5b3VyIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVycywgYXMgc3RyaW5naWZpZWQgSlNPTi4gU2VlIGh0dHA6Ly9kb2NzLnBhcnNlcGxhdGZvcm0ub3JnL3BhcnNlLXNlcnZlci9ndWlkZS8jb2F1dGgtYW5kLTNyZC1wYXJ0eS1hdXRoZW50aWNhdGlvbicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm9iamVjdFBhcnNlcixcbiAgfSxcbiAgY2FjaGVBZGFwdGVyOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0NBQ0hFX0FEQVBURVInLFxuICAgIGhlbHA6ICdBZGFwdGVyIG1vZHVsZSBmb3IgdGhlIGNhY2hlJyxcbiAgICBhY3Rpb246IHBhcnNlcnMubW9kdWxlT3JPYmplY3RQYXJzZXIsXG4gIH0sXG4gIGNhY2hlTWF4U2l6ZToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9DQUNIRV9NQVhfU0laRScsXG4gICAgaGVscDogJ1NldHMgdGhlIG1heGltdW0gc2l6ZSBmb3IgdGhlIGluIG1lbW9yeSBjYWNoZSwgZGVmYXVsdHMgdG8gMTAwMDAnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ2NhY2hlTWF4U2l6ZScpLFxuICAgIGRlZmF1bHQ6IDEwMDAwLFxuICB9LFxuICBjYWNoZVRUTDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9DQUNIRV9UVEwnLFxuICAgIGhlbHA6ICdTZXRzIHRoZSBUVEwgZm9yIHRoZSBpbiBtZW1vcnkgY2FjaGUgKGluIG1zKSwgZGVmYXVsdHMgdG8gNTAwMCAoNSBzZWNvbmRzKScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm51bWJlclBhcnNlcignY2FjaGVUVEwnKSxcbiAgICBkZWZhdWx0OiA1MDAwLFxuICB9LFxuICBjbGllbnRLZXk6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ0xJRU5UX0tFWScsXG4gICAgaGVscDogJ0tleSBmb3IgaU9TLCBNYWNPUywgdHZPUyBjbGllbnRzJyxcbiAgfSxcbiAgY2xvdWQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ0xPVUQnLFxuICAgIGhlbHA6ICdGdWxsIHBhdGggdG8geW91ciBjbG91ZCBjb2RlIG1haW4uanMnLFxuICB9LFxuICBjbHVzdGVyOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0NMVVNURVInLFxuICAgIGhlbHA6ICdSdW4gd2l0aCBjbHVzdGVyLCBvcHRpb25hbGx5IHNldCB0aGUgbnVtYmVyIG9mIHByb2Nlc3NlcyBkZWZhdWx0IHRvIG9zLmNwdXMoKS5sZW5ndGgnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJPckJvb2xlYW5QYXJzZXIsXG4gIH0sXG4gIGNvbGxlY3Rpb25QcmVmaXg6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ09MTEVDVElPTl9QUkVGSVgnLFxuICAgIGhlbHA6ICdBIGNvbGxlY3Rpb24gcHJlZml4IGZvciB0aGUgY2xhc3NlcycsXG4gICAgZGVmYXVsdDogJycsXG4gIH0sXG4gIGN1c3RvbVBhZ2VzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0NVU1RPTV9QQUdFUycsXG4gICAgaGVscDogJ2N1c3RvbSBwYWdlcyBmb3IgcGFzc3dvcmQgdmFsaWRhdGlvbiBhbmQgcmVzZXQnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gICAgZGVmYXVsdDoge30sXG4gIH0sXG4gIGRhdGFiYXNlQWRhcHRlcjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9EQVRBQkFTRV9BREFQVEVSJyxcbiAgICBoZWxwOiAnQWRhcHRlciBtb2R1bGUgZm9yIHRoZSBkYXRhYmFzZScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm1vZHVsZU9yT2JqZWN0UGFyc2VyLFxuICB9LFxuICBkYXRhYmFzZU9wdGlvbnM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfREFUQUJBU0VfT1BUSU9OUycsXG4gICAgaGVscDogJ09wdGlvbnMgdG8gcGFzcyB0byB0aGUgbW9uZ29kYiBjbGllbnQnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gIH0sXG4gIGRhdGFiYXNlVVJJOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0RBVEFCQVNFX1VSSScsXG4gICAgaGVscDogJ1RoZSBmdWxsIFVSSSB0byB5b3VyIGRhdGFiYXNlLiBTdXBwb3J0ZWQgZGF0YWJhc2VzIGFyZSBtb25nb2RiIG9yIHBvc3RncmVzLicsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgZGVmYXVsdDogJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvcGFyc2UnLFxuICB9LFxuICBkaXJlY3RBY2Nlc3M6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRU5BQkxFX0VYUEVSSU1FTlRBTF9ESVJFQ1RfQUNDRVNTJyxcbiAgICBoZWxwOlxuICAgICAgJ1JlcGxhY2UgSFRUUCBJbnRlcmZhY2Ugd2hlbiB1c2luZyBKUyBTREsgaW4gY3VycmVudCBub2RlIHJ1bnRpbWUsIGRlZmF1bHRzIHRvIGZhbHNlLiBDYXV0aW9uLCB0aGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWF5IG5vdCBiZSBhcHByb3ByaWF0ZSBmb3IgcHJvZHVjdGlvbi4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICB9LFxuICBkb3ROZXRLZXk6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRE9UX05FVF9LRVknLFxuICAgIGhlbHA6ICdLZXkgZm9yIFVuaXR5IGFuZCAuTmV0IFNESycsXG4gIH0sXG4gIGVtYWlsQWRhcHRlcjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9FTUFJTF9BREFQVEVSJyxcbiAgICBoZWxwOiAnQWRhcHRlciBtb2R1bGUgZm9yIGVtYWlsIHNlbmRpbmcnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5tb2R1bGVPck9iamVjdFBhcnNlcixcbiAgfSxcbiAgZW1haWxWZXJpZnlUb2tlblJldXNlSWZWYWxpZDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9FTUFJTF9WRVJJRllfVE9LRU5fUkVVU0VfSUZfVkFMSUQnLFxuICAgIGhlbHA6XG4gICAgICAnYW4gZXhpc3RpbmcgZW1haWwgdmVyaWZ5IHRva2VuIHNob3VsZCBiZSByZXVzZWQgd2hlbiByZXNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsIGlzIHJlcXVlc3RlZCcsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIGVtYWlsVmVyaWZ5VG9rZW5WYWxpZGl0eUR1cmF0aW9uOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0VNQUlMX1ZFUklGWV9UT0tFTl9WQUxJRElUWV9EVVJBVElPTicsXG4gICAgaGVscDogJ0VtYWlsIHZlcmlmaWNhdGlvbiB0b2tlbiB2YWxpZGl0eSBkdXJhdGlvbiwgaW4gc2Vjb25kcycsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm51bWJlclBhcnNlcignZW1haWxWZXJpZnlUb2tlblZhbGlkaXR5RHVyYXRpb24nKSxcbiAgfSxcbiAgZW5hYmxlQW5vbnltb3VzVXNlcnM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRU5BQkxFX0FOT05fVVNFUlMnLFxuICAgIGhlbHA6ICdFbmFibGUgKG9yIGRpc2FibGUpIGFub255bW91cyB1c2VycywgZGVmYXVsdHMgdG8gdHJ1ZScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgfSxcbiAgZW5hYmxlRXhwcmVzc0Vycm9ySGFuZGxlcjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9FTkFCTEVfRVhQUkVTU19FUlJPUl9IQU5ETEVSJyxcbiAgICBoZWxwOiAnRW5hYmxlcyB0aGUgZGVmYXVsdCBleHByZXNzIGVycm9yIGhhbmRsZXIgZm9yIGFsbCBlcnJvcnMnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICB9LFxuICBlbmFibGVTaW5nbGVTY2hlbWFDYWNoZToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9FTkFCTEVfU0lOR0xFX1NDSEVNQV9DQUNIRScsXG4gICAgaGVscDpcbiAgICAgICdVc2UgYSBzaW5nbGUgc2NoZW1hIGNhY2hlIHNoYXJlZCBhY3Jvc3MgcmVxdWVzdHMuIFJlZHVjZXMgbnVtYmVyIG9mIHF1ZXJpZXMgbWFkZSB0byBfU0NIRU1BLCBkZWZhdWx0cyB0byBmYWxzZSwgaS5lLiB1bmlxdWUgc2NoZW1hIGNhY2hlIHBlciByZXF1ZXN0LicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIGVuY3J5cHRpb25LZXk6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRU5DUllQVElPTl9LRVknLFxuICAgIGhlbHA6ICdLZXkgZm9yIGVuY3J5cHRpbmcgeW91ciBmaWxlcycsXG4gIH0sXG4gIGV4cGlyZUluYWN0aXZlU2Vzc2lvbnM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRVhQSVJFX0lOQUNUSVZFX1NFU1NJT05TJyxcbiAgICBoZWxwOiAnU2V0cyB3ZXRoZXIgd2Ugc2hvdWxkIGV4cGlyZSB0aGUgaW5hY3RpdmUgc2Vzc2lvbnMsIGRlZmF1bHRzIHRvIHRydWUnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gIH0sXG4gIGZpbGVLZXk6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRklMRV9LRVknLFxuICAgIGhlbHA6ICdLZXkgZm9yIHlvdXIgZmlsZXMnLFxuICB9LFxuICBmaWxlc0FkYXB0ZXI6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRklMRVNfQURBUFRFUicsXG4gICAgaGVscDogJ0FkYXB0ZXIgbW9kdWxlIGZvciB0aGUgZmlsZXMgc3ViLXN5c3RlbScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm1vZHVsZU9yT2JqZWN0UGFyc2VyLFxuICB9LFxuICBmaWxlVXBsb2FkOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0ZJTEVfVVBMT0FEX09QVElPTlMnLFxuICAgIGhlbHA6ICdPcHRpb25zIGZvciBmaWxlIHVwbG9hZHMnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gICAgZGVmYXVsdDoge30sXG4gIH0sXG4gIGdyYXBoUUxQYXRoOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0dSQVBIUUxfUEFUSCcsXG4gICAgaGVscDogJ01vdW50IHBhdGggZm9yIHRoZSBHcmFwaFFMIGVuZHBvaW50LCBkZWZhdWx0cyB0byAvZ3JhcGhxbCcsXG4gICAgZGVmYXVsdDogJy9ncmFwaHFsJyxcbiAgfSxcbiAgZ3JhcGhRTFNjaGVtYToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9HUkFQSF9RTFNDSEVNQScsXG4gICAgaGVscDogJ0Z1bGwgcGF0aCB0byB5b3VyIEdyYXBoUUwgY3VzdG9tIHNjaGVtYS5ncmFwaHFsIGZpbGUnLFxuICB9LFxuICBob3N0OiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0hPU1QnLFxuICAgIGhlbHA6ICdUaGUgaG9zdCB0byBzZXJ2ZSBQYXJzZVNlcnZlciBvbiwgZGVmYXVsdHMgdG8gMC4wLjAuMCcsXG4gICAgZGVmYXVsdDogJzAuMC4wLjAnLFxuICB9LFxuICBpZGVtcG90ZW5jeU9wdGlvbnM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRVhQRVJJTUVOVEFMX0lERU1QT1RFTkNZX09QVElPTlMnLFxuICAgIGhlbHA6XG4gICAgICAnT3B0aW9ucyBmb3IgcmVxdWVzdCBpZGVtcG90ZW5jeSB0byBkZWR1cGxpY2F0ZSBpZGVudGljYWwgcmVxdWVzdHMgdGhhdCBtYXkgYmUgY2F1c2VkIGJ5IG5ldHdvcmsgaXNzdWVzLiBDYXV0aW9uLCB0aGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWF5IG5vdCBiZSBhcHByb3ByaWF0ZSBmb3IgcHJvZHVjdGlvbi4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gICAgZGVmYXVsdDoge30sXG4gIH0sXG4gIGphdmFzY3JpcHRLZXk6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfSkFWQVNDUklQVF9LRVknLFxuICAgIGhlbHA6ICdLZXkgZm9yIHRoZSBKYXZhc2NyaXB0IFNESycsXG4gIH0sXG4gIGpzb25Mb2dzOiB7XG4gICAgZW52OiAnSlNPTl9MT0dTJyxcbiAgICBoZWxwOiAnTG9nIGFzIHN0cnVjdHVyZWQgSlNPTiBvYmplY3RzJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgfSxcbiAgbGl2ZVF1ZXJ5OiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0xJVkVfUVVFUlknLFxuICAgIGhlbHA6IFwicGFyc2Utc2VydmVyJ3MgTGl2ZVF1ZXJ5IGNvbmZpZ3VyYXRpb24gb2JqZWN0XCIsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm9iamVjdFBhcnNlcixcbiAgfSxcbiAgbGl2ZVF1ZXJ5U2VydmVyT3B0aW9uczoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9MSVZFX1FVRVJZX1NFUlZFUl9PUFRJT05TJyxcbiAgICBoZWxwOiAnTGl2ZSBxdWVyeSBzZXJ2ZXIgY29uZmlndXJhdGlvbiBvcHRpb25zICh3aWxsIHN0YXJ0IHRoZSBsaXZlUXVlcnkgc2VydmVyKScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm9iamVjdFBhcnNlcixcbiAgfSxcbiAgbG9nZ2VyQWRhcHRlcjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9MT0dHRVJfQURBUFRFUicsXG4gICAgaGVscDogJ0FkYXB0ZXIgbW9kdWxlIGZvciB0aGUgbG9nZ2luZyBzdWItc3lzdGVtJyxcbiAgICBhY3Rpb246IHBhcnNlcnMubW9kdWxlT3JPYmplY3RQYXJzZXIsXG4gIH0sXG4gIGxvZ0xldmVsOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0xPR19MRVZFTCcsXG4gICAgaGVscDogJ1NldHMgdGhlIGxldmVsIGZvciBsb2dzJyxcbiAgfSxcbiAgbG9nc0ZvbGRlcjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9MT0dTX0ZPTERFUicsXG4gICAgaGVscDogXCJGb2xkZXIgZm9yIHRoZSBsb2dzIChkZWZhdWx0cyB0byAnLi9sb2dzJyk7IHNldCB0byBudWxsIHRvIGRpc2FibGUgZmlsZSBiYXNlZCBsb2dnaW5nXCIsXG4gICAgZGVmYXVsdDogJy4vbG9ncycsXG4gIH0sXG4gIG1hc3RlcktleToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9NQVNURVJfS0VZJyxcbiAgICBoZWxwOiAnWW91ciBQYXJzZSBNYXN0ZXIgS2V5JyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgbWFzdGVyS2V5SXBzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX01BU1RFUl9LRVlfSVBTJyxcbiAgICBoZWxwOiAnUmVzdHJpY3QgbWFzdGVyS2V5IHRvIGJlIHVzZWQgYnkgb25seSB0aGVzZSBpcHMsIGRlZmF1bHRzIHRvIFtdIChhbGxvdyBhbGwgaXBzKScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmFycmF5UGFyc2VyLFxuICAgIGRlZmF1bHQ6IFtdLFxuICB9LFxuICBtYXhMaW1pdDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9NQVhfTElNSVQnLFxuICAgIGhlbHA6ICdNYXggdmFsdWUgZm9yIGxpbWl0IG9wdGlvbiBvbiBxdWVyaWVzLCBkZWZhdWx0cyB0byB1bmxpbWl0ZWQnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ21heExpbWl0JyksXG4gIH0sXG4gIG1heExvZ0ZpbGVzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX01BWF9MT0dfRklMRVMnLFxuICAgIGhlbHA6XG4gICAgICBcIk1heGltdW0gbnVtYmVyIG9mIGxvZ3MgdG8ga2VlcC4gSWYgbm90IHNldCwgbm8gbG9ncyB3aWxsIGJlIHJlbW92ZWQuIFRoaXMgY2FuIGJlIGEgbnVtYmVyIG9mIGZpbGVzIG9yIG51bWJlciBvZiBkYXlzLiBJZiB1c2luZyBkYXlzLCBhZGQgJ2QnIGFzIHRoZSBzdWZmaXguIChkZWZhdWx0OiBudWxsKVwiLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gIH0sXG4gIG1heFVwbG9hZFNpemU6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfTUFYX1VQTE9BRF9TSVpFJyxcbiAgICBoZWxwOiAnTWF4IGZpbGUgc2l6ZSBmb3IgdXBsb2FkcywgZGVmYXVsdHMgdG8gMjBtYicsXG4gICAgZGVmYXVsdDogJzIwbWInLFxuICB9LFxuICBtaWRkbGV3YXJlOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX01JRERMRVdBUkUnLFxuICAgIGhlbHA6ICdtaWRkbGV3YXJlIGZvciBleHByZXNzIHNlcnZlciwgY2FuIGJlIHN0cmluZyBvciBmdW5jdGlvbicsXG4gIH0sXG4gIG1vdW50R3JhcGhRTDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9NT1VOVF9HUkFQSFFMJyxcbiAgICBoZWxwOiAnTW91bnRzIHRoZSBHcmFwaFFMIGVuZHBvaW50JyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbiAgbW91bnRQYXRoOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX01PVU5UX1BBVEgnLFxuICAgIGhlbHA6ICdNb3VudCBwYXRoIGZvciB0aGUgc2VydmVyLCBkZWZhdWx0cyB0byAvcGFyc2UnLFxuICAgIGRlZmF1bHQ6ICcvcGFyc2UnLFxuICB9LFxuICBtb3VudFBsYXlncm91bmQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfTU9VTlRfUExBWUdST1VORCcsXG4gICAgaGVscDogJ01vdW50cyB0aGUgR3JhcGhRTCBQbGF5Z3JvdW5kIC0gbmV2ZXIgdXNlIHRoaXMgb3B0aW9uIGluIHByb2R1Y3Rpb24nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICB9LFxuICBvYmplY3RJZFNpemU6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfT0JKRUNUX0lEX1NJWkUnLFxuICAgIGhlbHA6IFwiU2V0cyB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gZ2VuZXJhdGVkIG9iamVjdCBpZCdzLCBkZWZhdWx0IDEwXCIsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm51bWJlclBhcnNlcignb2JqZWN0SWRTaXplJyksXG4gICAgZGVmYXVsdDogMTAsXG4gIH0sXG4gIHBhZ2VzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTJyxcbiAgICBoZWxwOlxuICAgICAgJ1RoZSBvcHRpb25zIGZvciBwYWdlcyBzdWNoIGFzIHBhc3N3b3JkIHJlc2V0IGFuZCBlbWFpbCB2ZXJpZmljYXRpb24uIENhdXRpb24sIHRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgdGhhdCBtYXkgbm90IGJlIGFwcHJvcHJpYXRlIGZvciBwcm9kdWN0aW9uLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm9iamVjdFBhcnNlcixcbiAgICBkZWZhdWx0OiB7fSxcbiAgfSxcbiAgcGFzc3dvcmRQb2xpY3k6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFTU1dPUkRfUE9MSUNZJyxcbiAgICBoZWxwOiAnUGFzc3dvcmQgcG9saWN5IGZvciBlbmZvcmNpbmcgcGFzc3dvcmQgcmVsYXRlZCBydWxlcycsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm9iamVjdFBhcnNlcixcbiAgfSxcbiAgcGxheWdyb3VuZFBhdGg6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUExBWUdST1VORF9QQVRIJyxcbiAgICBoZWxwOiAnTW91bnQgcGF0aCBmb3IgdGhlIEdyYXBoUUwgUGxheWdyb3VuZCwgZGVmYXVsdHMgdG8gL3BsYXlncm91bmQnLFxuICAgIGRlZmF1bHQ6ICcvcGxheWdyb3VuZCcsXG4gIH0sXG4gIHBvcnQ6IHtcbiAgICBlbnY6ICdQT1JUJyxcbiAgICBoZWxwOiAnVGhlIHBvcnQgdG8gcnVuIHRoZSBQYXJzZVNlcnZlciwgZGVmYXVsdHMgdG8gMTMzNy4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ3BvcnQnKSxcbiAgICBkZWZhdWx0OiAxMzM3LFxuICB9LFxuICBwcmVzZXJ2ZUZpbGVOYW1lOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BSRVNFUlZFX0ZJTEVfTkFNRScsXG4gICAgaGVscDogJ0VuYWJsZSAob3IgZGlzYWJsZSkgdGhlIGFkZGl0aW9uIG9mIGEgdW5pcXVlIGhhc2ggdG8gdGhlIGZpbGUgbmFtZXMnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICB9LFxuICBwcmV2ZW50TG9naW5XaXRoVW52ZXJpZmllZEVtYWlsOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BSRVZFTlRfTE9HSU5fV0lUSF9VTlZFUklGSUVEX0VNQUlMJyxcbiAgICBoZWxwOlxuICAgICAgJ1ByZXZlbnQgdXNlciBmcm9tIGxvZ2luIGlmIGVtYWlsIGlzIG5vdCB2ZXJpZmllZCBhbmQgUEFSU0VfU0VSVkVSX1ZFUklGWV9VU0VSX0VNQUlMUyBpcyB0cnVlLCBkZWZhdWx0cyB0byBmYWxzZScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIHByb3RlY3RlZEZpZWxkczoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QUk9URUNURURfRklFTERTJyxcbiAgICBoZWxwOiAnUHJvdGVjdGVkIGZpZWxkcyB0aGF0IHNob3VsZCBiZSB0cmVhdGVkIHdpdGggZXh0cmEgc2VjdXJpdHkgd2hlbiBmZXRjaGluZyBkZXRhaWxzLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm9iamVjdFBhcnNlcixcbiAgICBkZWZhdWx0OiB7XG4gICAgICBfVXNlcjoge1xuICAgICAgICAnKic6IFsnZW1haWwnXSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgcHVibGljU2VydmVyVVJMOiB7XG4gICAgZW52OiAnUEFSU0VfUFVCTElDX1NFUlZFUl9VUkwnLFxuICAgIGhlbHA6ICdQdWJsaWMgVVJMIHRvIHlvdXIgcGFyc2Ugc2VydmVyIHdpdGggaHR0cDovLyBvciBodHRwczovLy4nLFxuICB9LFxuICBwdXNoOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BVU0gnLFxuICAgIGhlbHA6XG4gICAgICAnQ29uZmlndXJhdGlvbiBmb3IgcHVzaCwgYXMgc3RyaW5naWZpZWQgSlNPTi4gU2VlIGh0dHA6Ly9kb2NzLnBhcnNlcGxhdGZvcm0ub3JnL3BhcnNlLXNlcnZlci9ndWlkZS8jcHVzaC1ub3RpZmljYXRpb25zJyxcbiAgICBhY3Rpb246IHBhcnNlcnMub2JqZWN0UGFyc2VyLFxuICB9LFxuICByZWFkT25seU1hc3RlcktleToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9SRUFEX09OTFlfTUFTVEVSX0tFWScsXG4gICAgaGVscDogJ1JlYWQtb25seSBrZXksIHdoaWNoIGhhcyB0aGUgc2FtZSBjYXBhYmlsaXRpZXMgYXMgTWFzdGVyS2V5IHdpdGhvdXQgd3JpdGVzJyxcbiAgfSxcbiAgcmVzdEFQSUtleToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9SRVNUX0FQSV9LRVknLFxuICAgIGhlbHA6ICdLZXkgZm9yIFJFU1QgY2FsbHMnLFxuICB9LFxuICByZXZva2VTZXNzaW9uT25QYXNzd29yZFJlc2V0OiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1JFVk9LRV9TRVNTSU9OX09OX1BBU1NXT1JEX1JFU0VUJyxcbiAgICBoZWxwOlxuICAgICAgXCJXaGVuIGEgdXNlciBjaGFuZ2VzIHRoZWlyIHBhc3N3b3JkLCBlaXRoZXIgdGhyb3VnaCB0aGUgcmVzZXQgcGFzc3dvcmQgZW1haWwgb3Igd2hpbGUgbG9nZ2VkIGluLCBhbGwgc2Vzc2lvbnMgYXJlIHJldm9rZWQgaWYgdGhpcyBpcyB0cnVlLiBTZXQgdG8gZmFsc2UgaWYgeW91IGRvbid0IHdhbnQgdG8gcmV2b2tlIHNlc3Npb25zLlwiLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gIH0sXG4gIHNjaGVkdWxlZFB1c2g6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfU0NIRURVTEVEX1BVU0gnLFxuICAgIGhlbHA6ICdDb25maWd1cmF0aW9uIGZvciBwdXNoIHNjaGVkdWxpbmcsIGRlZmF1bHRzIHRvIGZhbHNlLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIHNjaGVtYUNhY2hlVFRMOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1NDSEVNQV9DQUNIRV9UVEwnLFxuICAgIGhlbHA6XG4gICAgICAnVGhlIFRUTCBmb3IgY2FjaGluZyB0aGUgc2NoZW1hIGZvciBvcHRpbWl6aW5nIHJlYWQvd3JpdGUgb3BlcmF0aW9ucy4gWW91IHNob3VsZCBwdXQgYSBsb25nIFRUTCB3aGVuIHlvdXIgREIgaXMgaW4gcHJvZHVjdGlvbi4gZGVmYXVsdCB0byA1MDAwOyBzZXQgMCB0byBkaXNhYmxlLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm51bWJlclBhcnNlcignc2NoZW1hQ2FjaGVUVEwnKSxcbiAgICBkZWZhdWx0OiA1MDAwLFxuICB9LFxuICBzZXJ2ZXJDbG9zZUNvbXBsZXRlOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1NFUlZFUl9DTE9TRV9DT01QTEVURScsXG4gICAgaGVscDogJ0NhbGxiYWNrIHdoZW4gc2VydmVyIGhhcyBjbG9zZWQnLFxuICB9LFxuICBzZXJ2ZXJTdGFydENvbXBsZXRlOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1NFUlZFUl9TVEFSVF9DT01QTEVURScsXG4gICAgaGVscDogJ0NhbGxiYWNrIHdoZW4gc2VydmVyIGhhcyBzdGFydGVkJyxcbiAgfSxcbiAgc2VydmVyVVJMOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1VSTCcsXG4gICAgaGVscDogJ1VSTCB0byB5b3VyIHBhcnNlIHNlcnZlciB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly8uJyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgfSxcbiAgc2Vzc2lvbkxlbmd0aDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9TRVNTSU9OX0xFTkdUSCcsXG4gICAgaGVscDogJ1Nlc3Npb24gZHVyYXRpb24sIGluIHNlY29uZHMsIGRlZmF1bHRzIHRvIDEgeWVhcicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm51bWJlclBhcnNlcignc2Vzc2lvbkxlbmd0aCcpLFxuICAgIGRlZmF1bHQ6IDMxNTM2MDAwLFxuICB9LFxuICBzaWxlbnQ6IHtcbiAgICBlbnY6ICdTSUxFTlQnLFxuICAgIGhlbHA6ICdEaXNhYmxlcyBjb25zb2xlIG91dHB1dCcsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gIH0sXG4gIHN0YXJ0TGl2ZVF1ZXJ5U2VydmVyOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1NUQVJUX0xJVkVfUVVFUllfU0VSVkVSJyxcbiAgICBoZWxwOiAnU3RhcnRzIHRoZSBsaXZlUXVlcnkgc2VydmVyJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgfSxcbiAgdXNlclNlbnNpdGl2ZUZpZWxkczoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9VU0VSX1NFTlNJVElWRV9GSUVMRFMnLFxuICAgIGhlbHA6XG4gICAgICAnUGVyc29uYWxseSBpZGVudGlmaWFibGUgaW5mb3JtYXRpb24gZmllbGRzIGluIHRoZSB1c2VyIHRhYmxlIHRoZSBzaG91bGQgYmUgcmVtb3ZlZCBmb3Igbm9uLWF1dGhvcml6ZWQgdXNlcnMuIERlcHJlY2F0ZWQgQHNlZSBwcm90ZWN0ZWRGaWVsZHMnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5hcnJheVBhcnNlcixcbiAgfSxcbiAgdmVyYm9zZToge1xuICAgIGVudjogJ1ZFUkJPU0UnLFxuICAgIGhlbHA6ICdTZXQgdGhlIGxvZ2dpbmcgdG8gdmVyYm9zZScsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gIH0sXG4gIHZlcmlmeVVzZXJFbWFpbHM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfVkVSSUZZX1VTRVJfRU1BSUxTJyxcbiAgICBoZWxwOiAnRW5hYmxlIChvciBkaXNhYmxlKSB1c2VyIGVtYWlsIHZhbGlkYXRpb24sIGRlZmF1bHRzIHRvIGZhbHNlJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbiAgd2ViaG9va0tleToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9XRUJIT09LX0tFWScsXG4gICAgaGVscDogJ0tleSBzZW50IHdpdGggb3V0Z29pbmcgd2ViaG9vayBjYWxscycsXG4gIH0sXG59O1xubW9kdWxlLmV4cG9ydHMuUGFnZXNPcHRpb25zID0ge1xuICBjdXN0b21Sb3V0ZXM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFHRVNfQ1VTVE9NX1JPVVRFUycsXG4gICAgaGVscDogJ1RoZSBjdXN0b20gcm91dGVzLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmFycmF5UGFyc2VyLFxuICAgIGRlZmF1bHQ6IFtdLFxuICB9LFxuICBjdXN0b21VcmxzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0NVU1RPTV9VUkxTJyxcbiAgICBoZWxwOiAnVGhlIFVSTHMgdG8gdGhlIGN1c3RvbSBwYWdlcy4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gICAgZGVmYXVsdDoge30sXG4gIH0sXG4gIGVuYWJsZUxvY2FsaXphdGlvbjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQUdFU19FTkFCTEVfTE9DQUxJWkFUSU9OJyxcbiAgICBoZWxwOiAnSXMgdHJ1ZSBpZiBwYWdlcyBzaG91bGQgYmUgbG9jYWxpemVkOyB0aGlzIGhhcyBubyBlZmZlY3Qgb24gY3VzdG9tIHBhZ2UgcmVkaXJlY3RzLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gIH0sXG4gIGVuYWJsZVJvdXRlcjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQUdFU19FTkFCTEVfUk9VVEVSJyxcbiAgICBoZWxwOlxuICAgICAgJ0lzIHRydWUgaWYgdGhlIHBhZ2VzIHJvdXRlciBzaG91bGQgYmUgZW5hYmxlZDsgdGhpcyBpcyByZXF1aXJlZCBmb3IgYW55IG9mIHRoZSBwYWdlcyBvcHRpb25zIHRvIHRha2UgZWZmZWN0LiBDYXV0aW9uLCB0aGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWF5IG5vdCBiZSBhcHByb3ByaWF0ZSBmb3IgcHJvZHVjdGlvbi4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICB9LFxuICBmb3JjZVJlZGlyZWN0OiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0ZPUkNFX1JFRElSRUNUJyxcbiAgICBoZWxwOlxuICAgICAgJ0lzIHRydWUgaWYgcmVzcG9uc2VzIHNob3VsZCBhbHdheXMgYmUgcmVkaXJlY3RzIGFuZCBuZXZlciBjb250ZW50LCBmYWxzZSBpZiB0aGUgcmVzcG9uc2UgdHlwZSBzaG91bGQgZGVwZW5kIG9uIHRoZSByZXF1ZXN0IHR5cGUgKEdFVCByZXF1ZXN0IC0+IGNvbnRlbnQgcmVzcG9uc2U7IFBPU1QgcmVxdWVzdCAtPiByZWRpcmVjdCByZXNwb25zZSkuJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbiAgbG9jYWxpemF0aW9uRmFsbGJhY2tMb2NhbGU6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFHRVNfTE9DQUxJWkFUSU9OX0ZBTExCQUNLX0xPQ0FMRScsXG4gICAgaGVscDpcbiAgICAgICdUaGUgZmFsbGJhY2sgbG9jYWxlIGZvciBsb2NhbGl6YXRpb24gaWYgbm8gbWF0Y2hpbmcgdHJhbnNsYXRpb24gaXMgcHJvdmlkZWQgZm9yIHRoZSBnaXZlbiBsb2NhbGUuIFRoaXMgaXMgb25seSByZWxldmFudCB3aGVuIHByb3ZpZGluZyB0cmFuc2xhdGlvbiByZXNvdXJjZXMgdmlhIEpTT04gZmlsZS4nLFxuICAgIGRlZmF1bHQ6ICdlbicsXG4gIH0sXG4gIGxvY2FsaXphdGlvbkpzb25QYXRoOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0xPQ0FMSVpBVElPTl9KU09OX1BBVEgnLFxuICAgIGhlbHA6XG4gICAgICAnVGhlIHBhdGggdG8gdGhlIEpTT04gZmlsZSBmb3IgbG9jYWxpemF0aW9uOyB0aGUgdHJhbnNsYXRpb25zIHdpbGwgYmUgdXNlZCB0byBmaWxsIHRlbXBsYXRlIHBsYWNlaG9sZGVycyBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZS4nLFxuICB9LFxuICBwYWdlc0VuZHBvaW50OiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX1BBR0VTX0VORFBPSU5UJyxcbiAgICBoZWxwOiBcIlRoZSBBUEkgZW5kcG9pbnQgZm9yIHRoZSBwYWdlcy4gRGVmYXVsdCBpcyAnYXBwcycuXCIsXG4gICAgZGVmYXVsdDogJ2FwcHMnLFxuICB9LFxuICBwYWdlc1BhdGg6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFHRVNfUEFHRVNfUEFUSCcsXG4gICAgaGVscDpcbiAgICAgIFwiVGhlIHBhdGggdG8gdGhlIHBhZ2VzIGRpcmVjdG9yeTsgdGhpcyBhbHNvIGRlZmluZXMgd2hlcmUgdGhlIHN0YXRpYyBlbmRwb2ludCAnL2FwcHMnIHBvaW50cyB0by4gRGVmYXVsdCBpcyB0aGUgJy4vcHVibGljLycgZGlyZWN0b3J5LlwiLFxuICAgIGRlZmF1bHQ6ICcuL3B1YmxpYycsXG4gIH0sXG4gIHBsYWNlaG9sZGVyczoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQUdFU19QTEFDRUhPTERFUlMnLFxuICAgIGhlbHA6XG4gICAgICAnVGhlIHBsYWNlaG9sZGVyIGtleXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGZpbGxlZCBpbiBwYWdlczsgdGhpcyBjYW4gYmUgYSBzaW1wbGUgb2JqZWN0IG9yIGEgY2FsbGJhY2sgZnVuY3Rpb24uJyxcbiAgICBhY3Rpb246IHBhcnNlcnMub2JqZWN0UGFyc2VyLFxuICAgIGRlZmF1bHQ6IHt9LFxuICB9LFxufTtcbm1vZHVsZS5leHBvcnRzLlBhZ2VzUm91dGUgPSB7XG4gIG1ldGhvZDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQUdFU19ST1VURV9NRVRIT0QnLFxuICAgIGhlbHA6IFwiVGhlIHJvdXRlIG1ldGhvZCwgZS5nLiAnR0VUJyBvciAnUE9TVCcuXCIsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gIH0sXG4gIHBhdGg6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFHRVNfUk9VVEVfUEFUSCcsXG4gICAgaGVscDogJ1RoZSByb3V0ZSBwYXRoLicsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gIH0sXG59O1xubW9kdWxlLmV4cG9ydHMuUGFnZXNDdXN0b21VcmxzT3B0aW9ucyA9IHtcbiAgZW1haWxWZXJpZmljYXRpb25MaW5rRXhwaXJlZDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQUdFU19DVVNUT01fVVJMX0VNQUlMX1ZFUklGSUNBVElPTl9MSU5LX0VYUElSRUQnLFxuICAgIGhlbHA6ICdUaGUgVVJMIHRvIHRoZSBjdXN0b20gcGFnZSBmb3IgZW1haWwgdmVyaWZpY2F0aW9uIC0+IGxpbmsgZXhwaXJlZC4nLFxuICB9LFxuICBlbWFpbFZlcmlmaWNhdGlvbkxpbmtJbnZhbGlkOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0NVU1RPTV9VUkxfRU1BSUxfVkVSSUZJQ0FUSU9OX0xJTktfSU5WQUxJRCcsXG4gICAgaGVscDogJ1RoZSBVUkwgdG8gdGhlIGN1c3RvbSBwYWdlIGZvciBlbWFpbCB2ZXJpZmljYXRpb24gLT4gbGluayBpbnZhbGlkLicsXG4gIH0sXG4gIGVtYWlsVmVyaWZpY2F0aW9uU2VuZEZhaWw6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFHRVNfQ1VTVE9NX1VSTF9FTUFJTF9WRVJJRklDQVRJT05fU0VORF9GQUlMJyxcbiAgICBoZWxwOiAnVGhlIFVSTCB0byB0aGUgY3VzdG9tIHBhZ2UgZm9yIGVtYWlsIHZlcmlmaWNhdGlvbiAtPiBsaW5rIHNlbmQgZmFpbC4nLFxuICB9LFxuICBlbWFpbFZlcmlmaWNhdGlvblNlbmRTdWNjZXNzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0NVU1RPTV9VUkxfRU1BSUxfVkVSSUZJQ0FUSU9OX1NFTkRfU1VDQ0VTUycsXG4gICAgaGVscDogJ1RoZSBVUkwgdG8gdGhlIGN1c3RvbSBwYWdlIGZvciBlbWFpbCB2ZXJpZmljYXRpb24gLT4gcmVzZW5kIGxpbmsgLT4gc3VjY2Vzcy4nLFxuICB9LFxuICBlbWFpbFZlcmlmaWNhdGlvblN1Y2Nlc3M6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFHRVNfQ1VTVE9NX1VSTF9FTUFJTF9WRVJJRklDQVRJT05fU1VDQ0VTUycsXG4gICAgaGVscDogJ1RoZSBVUkwgdG8gdGhlIGN1c3RvbSBwYWdlIGZvciBlbWFpbCB2ZXJpZmljYXRpb24gLT4gc3VjY2Vzcy4nLFxuICB9LFxuICBwYXNzd29yZFJlc2V0OiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0NVU1RPTV9VUkxfUEFTU1dPUkRfUkVTRVQnLFxuICAgIGhlbHA6ICdUaGUgVVJMIHRvIHRoZSBjdXN0b20gcGFnZSBmb3IgcGFzc3dvcmQgcmVzZXQuJyxcbiAgfSxcbiAgcGFzc3dvcmRSZXNldExpbmtJbnZhbGlkOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBR0VTX0NVU1RPTV9VUkxfUEFTU1dPUkRfUkVTRVRfTElOS19JTlZBTElEJyxcbiAgICBoZWxwOiAnVGhlIFVSTCB0byB0aGUgY3VzdG9tIHBhZ2UgZm9yIHBhc3N3b3JkIHJlc2V0IC0+IGxpbmsgaW52YWxpZC4nLFxuICB9LFxuICBwYXNzd29yZFJlc2V0U3VjY2Vzczoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQUdFU19DVVNUT01fVVJMX1BBU1NXT1JEX1JFU0VUX1NVQ0NFU1MnLFxuICAgIGhlbHA6ICdUaGUgVVJMIHRvIHRoZSBjdXN0b20gcGFnZSBmb3IgcGFzc3dvcmQgcmVzZXQgLT4gc3VjY2Vzcy4nLFxuICB9LFxufTtcbm1vZHVsZS5leHBvcnRzLkN1c3RvbVBhZ2VzT3B0aW9ucyA9IHtcbiAgY2hvb3NlUGFzc3dvcmQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ1VTVE9NX1BBR0VTX0NIT09TRV9QQVNTV09SRCcsXG4gICAgaGVscDogJ2Nob29zZSBwYXNzd29yZCBwYWdlIHBhdGgnLFxuICB9LFxuICBleHBpcmVkVmVyaWZpY2F0aW9uTGluazoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9DVVNUT01fUEFHRVNfRVhQSVJFRF9WRVJJRklDQVRJT05fTElOSycsXG4gICAgaGVscDogJ2V4cGlyZWQgdmVyaWZpY2F0aW9uIGxpbmsgcGFnZSBwYXRoJyxcbiAgfSxcbiAgaW52YWxpZExpbms6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ1VTVE9NX1BBR0VTX0lOVkFMSURfTElOSycsXG4gICAgaGVscDogJ2ludmFsaWQgbGluayBwYWdlIHBhdGgnLFxuICB9LFxuICBpbnZhbGlkUGFzc3dvcmRSZXNldExpbms6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ1VTVE9NX1BBR0VTX0lOVkFMSURfUEFTU1dPUkRfUkVTRVRfTElOSycsXG4gICAgaGVscDogJ2ludmFsaWQgcGFzc3dvcmQgcmVzZXQgbGluayBwYWdlIHBhdGgnLFxuICB9LFxuICBpbnZhbGlkVmVyaWZpY2F0aW9uTGluazoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9DVVNUT01fUEFHRVNfSU5WQUxJRF9WRVJJRklDQVRJT05fTElOSycsXG4gICAgaGVscDogJ2ludmFsaWQgdmVyaWZpY2F0aW9uIGxpbmsgcGFnZSBwYXRoJyxcbiAgfSxcbiAgbGlua1NlbmRGYWlsOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0NVU1RPTV9QQUdFU19MSU5LX1NFTkRfRkFJTCcsXG4gICAgaGVscDogJ3ZlcmlmaWNhdGlvbiBsaW5rIHNlbmQgZmFpbCBwYWdlIHBhdGgnLFxuICB9LFxuICBsaW5rU2VuZFN1Y2Nlc3M6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ1VTVE9NX1BBR0VTX0xJTktfU0VORF9TVUNDRVNTJyxcbiAgICBoZWxwOiAndmVyaWZpY2F0aW9uIGxpbmsgc2VuZCBzdWNjZXNzIHBhZ2UgcGF0aCcsXG4gIH0sXG4gIHBhcnNlRnJhbWVVUkw6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ1VTVE9NX1BBR0VTX1BBUlNFX0ZSQU1FX1VSTCcsXG4gICAgaGVscDogJ2ZvciBtYXNraW5nIHVzZXItZmFjaW5nIHBhZ2VzJyxcbiAgfSxcbiAgcGFzc3dvcmRSZXNldFN1Y2Nlc3M6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQ1VTVE9NX1BBR0VTX1BBU1NXT1JEX1JFU0VUX1NVQ0NFU1MnLFxuICAgIGhlbHA6ICdwYXNzd29yZCByZXNldCBzdWNjZXNzIHBhZ2UgcGF0aCcsXG4gIH0sXG4gIHZlcmlmeUVtYWlsU3VjY2Vzczoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9DVVNUT01fUEFHRVNfVkVSSUZZX0VNQUlMX1NVQ0NFU1MnLFxuICAgIGhlbHA6ICd2ZXJpZnkgZW1haWwgc3VjY2VzcyBwYWdlIHBhdGgnLFxuICB9LFxufTtcbm1vZHVsZS5leHBvcnRzLkxpdmVRdWVyeU9wdGlvbnMgPSB7XG4gIGNsYXNzTmFtZXM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfTElWRVFVRVJZX0NMQVNTTkFNRVMnLFxuICAgIGhlbHA6IFwicGFyc2Utc2VydmVyJ3MgTGl2ZVF1ZXJ5IGNsYXNzTmFtZXNcIixcbiAgICBhY3Rpb246IHBhcnNlcnMuYXJyYXlQYXJzZXIsXG4gIH0sXG4gIHB1YlN1YkFkYXB0ZXI6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfTElWRVFVRVJZX1BVQl9TVUJfQURBUFRFUicsXG4gICAgaGVscDogJ0xpdmVRdWVyeSBwdWJzdWIgYWRhcHRlcicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLm1vZHVsZU9yT2JqZWN0UGFyc2VyLFxuICB9LFxuICByZWRpc09wdGlvbnM6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfTElWRVFVRVJZX1JFRElTX09QVElPTlMnLFxuICAgIGhlbHA6IFwicGFyc2Utc2VydmVyJ3MgTGl2ZVF1ZXJ5IHJlZGlzT3B0aW9uc1wiLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gIH0sXG4gIHJlZGlzVVJMOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0xJVkVRVUVSWV9SRURJU19VUkwnLFxuICAgIGhlbHA6IFwicGFyc2Utc2VydmVyJ3MgTGl2ZVF1ZXJ5IHJlZGlzVVJMXCIsXG4gIH0sXG4gIHdzc0FkYXB0ZXI6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfTElWRVFVRVJZX1dTU19BREFQVEVSJyxcbiAgICBoZWxwOiAnQWRhcHRlciBtb2R1bGUgZm9yIHRoZSBXZWJTb2NrZXRTZXJ2ZXInLFxuICAgIGFjdGlvbjogcGFyc2Vycy5tb2R1bGVPck9iamVjdFBhcnNlcixcbiAgfSxcbn07XG5tb2R1bGUuZXhwb3J0cy5MaXZlUXVlcnlTZXJ2ZXJPcHRpb25zID0ge1xuICBhcHBJZDoge1xuICAgIGVudjogJ1BBUlNFX0xJVkVfUVVFUllfU0VSVkVSX0FQUF9JRCcsXG4gICAgaGVscDpcbiAgICAgICdUaGlzIHN0cmluZyBzaG91bGQgbWF0Y2ggdGhlIGFwcElkIGluIHVzZSBieSB5b3VyIFBhcnNlIFNlcnZlci4gSWYgeW91IGRlcGxveSB0aGUgTGl2ZVF1ZXJ5IHNlcnZlciBhbG9uZ3NpZGUgUGFyc2UgU2VydmVyLCB0aGUgTGl2ZVF1ZXJ5IHNlcnZlciB3aWxsIHRyeSB0byB1c2UgdGhlIHNhbWUgYXBwSWQuJyxcbiAgfSxcbiAgY2FjaGVUaW1lb3V0OiB7XG4gICAgZW52OiAnUEFSU0VfTElWRV9RVUVSWV9TRVJWRVJfQ0FDSEVfVElNRU9VVCcsXG4gICAgaGVscDpcbiAgICAgIFwiTnVtYmVyIGluIG1pbGxpc2Vjb25kcy4gV2hlbiBjbGllbnRzIHByb3ZpZGUgdGhlIHNlc3Npb25Ub2tlbiB0byB0aGUgTGl2ZVF1ZXJ5IHNlcnZlciwgdGhlIExpdmVRdWVyeSBzZXJ2ZXIgd2lsbCB0cnkgdG8gZmV0Y2ggaXRzIFBhcnNlVXNlcidzIG9iamVjdElkIGZyb20gcGFyc2Ugc2VydmVyIGFuZCBzdG9yZSBpdCBpbiB0aGUgY2FjaGUuIFRoZSB2YWx1ZSBkZWZpbmVzIHRoZSBkdXJhdGlvbiBvZiB0aGUgY2FjaGUuIENoZWNrIHRoZSBmb2xsb3dpbmcgU2VjdXJpdHkgc2VjdGlvbiBhbmQgb3VyIHByb3RvY29sIHNwZWNpZmljYXRpb24gZm9yIGRldGFpbHMsIGRlZmF1bHRzIHRvIDUgKiAxMDAwIG1zICg1IHNlY29uZHMpLlwiLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ2NhY2hlVGltZW91dCcpLFxuICB9LFxuICBrZXlQYWlyczoge1xuICAgIGVudjogJ1BBUlNFX0xJVkVfUVVFUllfU0VSVkVSX0tFWV9QQUlSUycsXG4gICAgaGVscDpcbiAgICAgICdBIEpTT04gb2JqZWN0IHRoYXQgc2VydmVzIGFzIGEgd2hpdGVsaXN0IG9mIGtleXMuIEl0IGlzIHVzZWQgZm9yIHZhbGlkYXRpbmcgY2xpZW50cyB3aGVuIHRoZXkgdHJ5IHRvIGNvbm5lY3QgdG8gdGhlIExpdmVRdWVyeSBzZXJ2ZXIuIENoZWNrIHRoZSBmb2xsb3dpbmcgU2VjdXJpdHkgc2VjdGlvbiBhbmQgb3VyIHByb3RvY29sIHNwZWNpZmljYXRpb24gZm9yIGRldGFpbHMuJyxcbiAgICBhY3Rpb246IHBhcnNlcnMub2JqZWN0UGFyc2VyLFxuICB9LFxuICBsb2dMZXZlbDoge1xuICAgIGVudjogJ1BBUlNFX0xJVkVfUVVFUllfU0VSVkVSX0xPR19MRVZFTCcsXG4gICAgaGVscDpcbiAgICAgICdUaGlzIHN0cmluZyBkZWZpbmVzIHRoZSBsb2cgbGV2ZWwgb2YgdGhlIExpdmVRdWVyeSBzZXJ2ZXIuIFdlIHN1cHBvcnQgVkVSQk9TRSwgSU5GTywgRVJST1IsIE5PTkUsIGRlZmF1bHRzIHRvIElORk8uJyxcbiAgfSxcbiAgbWFzdGVyS2V5OiB7XG4gICAgZW52OiAnUEFSU0VfTElWRV9RVUVSWV9TRVJWRVJfTUFTVEVSX0tFWScsXG4gICAgaGVscDpcbiAgICAgICdUaGlzIHN0cmluZyBzaG91bGQgbWF0Y2ggdGhlIG1hc3RlcktleSBpbiB1c2UgYnkgeW91ciBQYXJzZSBTZXJ2ZXIuIElmIHlvdSBkZXBsb3kgdGhlIExpdmVRdWVyeSBzZXJ2ZXIgYWxvbmdzaWRlIFBhcnNlIFNlcnZlciwgdGhlIExpdmVRdWVyeSBzZXJ2ZXIgd2lsbCB0cnkgdG8gdXNlIHRoZSBzYW1lIG1hc3RlcktleS4nLFxuICB9LFxuICBwb3J0OiB7XG4gICAgZW52OiAnUEFSU0VfTElWRV9RVUVSWV9TRVJWRVJfUE9SVCcsXG4gICAgaGVscDogJ1RoZSBwb3J0IHRvIHJ1biB0aGUgTGl2ZVF1ZXJ5IHNlcnZlciwgZGVmYXVsdHMgdG8gMTMzNy4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ3BvcnQnKSxcbiAgICBkZWZhdWx0OiAxMzM3LFxuICB9LFxuICBwdWJTdWJBZGFwdGVyOiB7XG4gICAgZW52OiAnUEFSU0VfTElWRV9RVUVSWV9TRVJWRVJfUFVCX1NVQl9BREFQVEVSJyxcbiAgICBoZWxwOiAnTGl2ZVF1ZXJ5IHB1YnN1YiBhZGFwdGVyJyxcbiAgICBhY3Rpb246IHBhcnNlcnMubW9kdWxlT3JPYmplY3RQYXJzZXIsXG4gIH0sXG4gIHJlZGlzT3B0aW9uczoge1xuICAgIGVudjogJ1BBUlNFX0xJVkVfUVVFUllfU0VSVkVSX1JFRElTX09QVElPTlMnLFxuICAgIGhlbHA6IFwicGFyc2Utc2VydmVyJ3MgTGl2ZVF1ZXJ5IHJlZGlzT3B0aW9uc1wiLFxuICAgIGFjdGlvbjogcGFyc2Vycy5vYmplY3RQYXJzZXIsXG4gIH0sXG4gIHJlZGlzVVJMOiB7XG4gICAgZW52OiAnUEFSU0VfTElWRV9RVUVSWV9TRVJWRVJfUkVESVNfVVJMJyxcbiAgICBoZWxwOiBcInBhcnNlLXNlcnZlcidzIExpdmVRdWVyeSByZWRpc1VSTFwiLFxuICB9LFxuICBzZXJ2ZXJVUkw6IHtcbiAgICBlbnY6ICdQQVJTRV9MSVZFX1FVRVJZX1NFUlZFUl9TRVJWRVJfVVJMJyxcbiAgICBoZWxwOlxuICAgICAgJ1RoaXMgc3RyaW5nIHNob3VsZCBtYXRjaCB0aGUgc2VydmVyVVJMIGluIHVzZSBieSB5b3VyIFBhcnNlIFNlcnZlci4gSWYgeW91IGRlcGxveSB0aGUgTGl2ZVF1ZXJ5IHNlcnZlciBhbG9uZ3NpZGUgUGFyc2UgU2VydmVyLCB0aGUgTGl2ZVF1ZXJ5IHNlcnZlciB3aWxsIHRyeSB0byB1c2UgdGhlIHNhbWUgc2VydmVyVVJMLicsXG4gIH0sXG4gIHdlYnNvY2tldFRpbWVvdXQ6IHtcbiAgICBlbnY6ICdQQVJTRV9MSVZFX1FVRVJZX1NFUlZFUl9XRUJTT0NLRVRfVElNRU9VVCcsXG4gICAgaGVscDpcbiAgICAgICdOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gcGluZy9wb25nIGZyYW1lcy4gVGhlIFdlYlNvY2tldCBzZXJ2ZXIgc2VuZHMgcGluZy9wb25nIGZyYW1lcyB0byB0aGUgY2xpZW50cyB0byBrZWVwIHRoZSBXZWJTb2NrZXQgYWxpdmUuIFRoaXMgdmFsdWUgZGVmaW5lcyB0aGUgaW50ZXJ2YWwgb2YgdGhlIHBpbmcvcG9uZyBmcmFtZSBmcm9tIHRoZSBzZXJ2ZXIgdG8gY2xpZW50cywgZGVmYXVsdHMgdG8gMTAgKiAxMDAwIG1zICgxMCBzKS4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ3dlYnNvY2tldFRpbWVvdXQnKSxcbiAgfSxcbiAgd3NzQWRhcHRlcjoge1xuICAgIGVudjogJ1BBUlNFX0xJVkVfUVVFUllfU0VSVkVSX1dTU19BREFQVEVSJyxcbiAgICBoZWxwOiAnQWRhcHRlciBtb2R1bGUgZm9yIHRoZSBXZWJTb2NrZXRTZXJ2ZXInLFxuICAgIGFjdGlvbjogcGFyc2Vycy5tb2R1bGVPck9iamVjdFBhcnNlcixcbiAgfSxcbn07XG5tb2R1bGUuZXhwb3J0cy5JZGVtcG90ZW5jeU9wdGlvbnMgPSB7XG4gIHBhdGhzOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0VYUEVSSU1FTlRBTF9JREVNUE9URU5DWV9QQVRIUycsXG4gICAgaGVscDpcbiAgICAgICdBbiBhcnJheSBvZiBwYXRocyBmb3Igd2hpY2ggdGhlIGZlYXR1cmUgc2hvdWxkIGJlIGVuYWJsZWQuIFRoZSBtb3VudCBwYXRoIG11c3Qgbm90IGJlIGluY2x1ZGVkLCBmb3IgZXhhbXBsZSBpbnN0ZWFkIG9mIGAvcGFyc2UvZnVuY3Rpb25zL215RnVuY3Rpb25gIHNwZWNpZml5IGBmdW5jdGlvbnMvbXlGdW5jdGlvbmAuIFRoZSBlbnRyaWVzIGFyZSBpbnRlcnByZXRlZCBhcyByZWd1bGFyIGV4cHJlc3Npb24sIGZvciBleGFtcGxlIGBmdW5jdGlvbnMvLipgIG1hdGNoZXMgYWxsIGZ1bmN0aW9ucywgYGpvYnMvLipgIG1hdGNoZXMgYWxsIGpvYnMsIGBjbGFzc2VzLy4qYCBtYXRjaGVzIGFsbCBjbGFzc2VzLCBgLipgIG1hdGNoZXMgYWxsIHBhdGhzLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmFycmF5UGFyc2VyLFxuICAgIGRlZmF1bHQ6IFtdLFxuICB9LFxuICB0dGw6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRVhQRVJJTUVOVEFMX0lERU1QT1RFTkNZX1RUTCcsXG4gICAgaGVscDpcbiAgICAgICdUaGUgZHVyYXRpb24gaW4gc2Vjb25kcyBhZnRlciB3aGljaCBhIHJlcXVlc3QgcmVjb3JkIGlzIGRpc2NhcmRlZCBmcm9tIHRoZSBkYXRhYmFzZSwgZGVmYXVsdHMgdG8gMzAwcy4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ3R0bCcpLFxuICAgIGRlZmF1bHQ6IDMwMCxcbiAgfSxcbn07XG5tb2R1bGUuZXhwb3J0cy5BY2NvdW50TG9ja291dE9wdGlvbnMgPSB7XG4gIGR1cmF0aW9uOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0FDQ09VTlRfTE9DS09VVF9EVVJBVElPTicsXG4gICAgaGVscDpcbiAgICAgICdudW1iZXIgb2YgbWludXRlcyB0aGF0IGEgbG9ja2VkLW91dCBhY2NvdW50IHJlbWFpbnMgbG9ja2VkIG91dCBiZWZvcmUgYXV0b21hdGljYWxseSBiZWNvbWluZyB1bmxvY2tlZC4nLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ2R1cmF0aW9uJyksXG4gIH0sXG4gIHRocmVzaG9sZDoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9BQ0NPVU5UX0xPQ0tPVVRfVEhSRVNIT0xEJyxcbiAgICBoZWxwOiAnbnVtYmVyIG9mIGZhaWxlZCBzaWduLWluIGF0dGVtcHRzIHRoYXQgd2lsbCBjYXVzZSBhIHVzZXIgYWNjb3VudCB0byBiZSBsb2NrZWQnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ3RocmVzaG9sZCcpLFxuICB9LFxuICB1bmxvY2tPblBhc3N3b3JkUmVzZXQ6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfQUNDT1VOVF9MT0NLT1VUX1VOTE9DS19PTl9QQVNTV09SRF9SRVNFVCcsXG4gICAgaGVscDogJ0lzIHRydWUgaWYgdGhlIGFjY291bnQgbG9jayBzaG91bGQgYmUgcmVtb3ZlZCBhZnRlciBhIHN1Y2Nlc3NmdWwgcGFzc3dvcmQgcmVzZXQuJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbn07XG5tb2R1bGUuZXhwb3J0cy5QYXNzd29yZFBvbGljeU9wdGlvbnMgPSB7XG4gIGRvTm90QWxsb3dVc2VybmFtZToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQVNTV09SRF9QT0xJQ1lfRE9fTk9UX0FMTE9XX1VTRVJOQU1FJyxcbiAgICBoZWxwOiAnZGlzYWxsb3cgdXNlcm5hbWUgaW4gcGFzc3dvcmRzJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgfSxcbiAgbWF4UGFzc3dvcmRBZ2U6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfUEFTU1dPUkRfUE9MSUNZX01BWF9QQVNTV09SRF9BR0UnLFxuICAgIGhlbHA6ICdkYXlzIGZvciBwYXNzd29yZCBleHBpcnknLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ21heFBhc3N3b3JkQWdlJyksXG4gIH0sXG4gIG1heFBhc3N3b3JkSGlzdG9yeToge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQVNTV09SRF9QT0xJQ1lfTUFYX1BBU1NXT1JEX0hJU1RPUlknLFxuICAgIGhlbHA6ICdzZXR0aW5nIHRvIHByZXZlbnQgcmV1c2Ugb2YgcHJldmlvdXMgbiBwYXNzd29yZHMnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ21heFBhc3N3b3JkSGlzdG9yeScpLFxuICB9LFxuICByZXNldFRva2VuUmV1c2VJZlZhbGlkOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBU1NXT1JEX1BPTElDWV9SRVNFVF9UT0tFTl9SRVVTRV9JRl9WQUxJRCcsXG4gICAgaGVscDogXCJyZXNlbmQgdG9rZW4gaWYgaXQncyBzdGlsbCB2YWxpZFwiLFxuICAgIGFjdGlvbjogcGFyc2Vycy5ib29sZWFuUGFyc2VyLFxuICB9LFxuICByZXNldFRva2VuVmFsaWRpdHlEdXJhdGlvbjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQVNTV09SRF9QT0xJQ1lfUkVTRVRfVE9LRU5fVkFMSURJVFlfRFVSQVRJT04nLFxuICAgIGhlbHA6ICd0aW1lIGZvciB0b2tlbiB0byBleHBpcmUnLFxuICAgIGFjdGlvbjogcGFyc2Vycy5udW1iZXJQYXJzZXIoJ3Jlc2V0VG9rZW5WYWxpZGl0eUR1cmF0aW9uJyksXG4gIH0sXG4gIHZhbGlkYXRvckNhbGxiYWNrOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX1BBU1NXT1JEX1BPTElDWV9WQUxJREFUT1JfQ0FMTEJBQ0snLFxuICAgIGhlbHA6ICdhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgdG8gdmFsaWRhdGUgdGhlIHBhc3N3b3JkJyxcbiAgfSxcbiAgdmFsaWRhdG9yUGF0dGVybjoge1xuICAgIGVudjogJ1BBUlNFX1NFUlZFUl9QQVNTV09SRF9QT0xJQ1lfVkFMSURBVE9SX1BBVFRFUk4nLFxuICAgIGhlbHA6ICdhIFJlZ0V4cCBvYmplY3Qgb3IgYSByZWdleCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBwYXR0ZXJuIHRvIGVuZm9yY2UnLFxuICB9LFxufTtcbm1vZHVsZS5leHBvcnRzLkZpbGVVcGxvYWRPcHRpb25zID0ge1xuICBlbmFibGVGb3JBbm9ueW1vdXNVc2VyOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0ZJTEVfVVBMT0FEX0VOQUJMRV9GT1JfQU5PTllNT1VTX1VTRVInLFxuICAgIGhlbHA6ICdJcyB0cnVlIGlmIGZpbGUgdXBsb2FkIHNob3VsZCBiZSBhbGxvd2VkIGZvciBhbm9ueW1vdXMgdXNlcnMuJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbiAgZW5hYmxlRm9yQXV0aGVudGljYXRlZFVzZXI6IHtcbiAgICBlbnY6ICdQQVJTRV9TRVJWRVJfRklMRV9VUExPQURfRU5BQkxFX0ZPUl9BVVRIRU5USUNBVEVEX1VTRVInLFxuICAgIGhlbHA6ICdJcyB0cnVlIGlmIGZpbGUgdXBsb2FkIHNob3VsZCBiZSBhbGxvd2VkIGZvciBhdXRoZW50aWNhdGVkIHVzZXJzLicsXG4gICAgYWN0aW9uOiBwYXJzZXJzLmJvb2xlYW5QYXJzZXIsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgfSxcbiAgZW5hYmxlRm9yUHVibGljOiB7XG4gICAgZW52OiAnUEFSU0VfU0VSVkVSX0ZJTEVfVVBMT0FEX0VOQUJMRV9GT1JfUFVCTElDJyxcbiAgICBoZWxwOiAnSXMgdHJ1ZSBpZiBmaWxlIHVwbG9hZCBzaG91bGQgYmUgYWxsb3dlZCBmb3IgYW55b25lLCByZWdhcmRsZXNzIG9mIHVzZXIgYXV0aGVudGljYXRpb24uJyxcbiAgICBhY3Rpb246IHBhcnNlcnMuYm9vbGVhblBhcnNlcixcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSxcbn07XG4iXX0=