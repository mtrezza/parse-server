{"version":3,"sources":["../../src/Push/utils.js"],"names":["isPushIncrementing","body","data","badge","toLowerCase","__op","Number","amount","localizableKeys","getLocalesFromPush","Set","Object","keys","reduce","memo","key","forEach","localizableKey","indexOf","push","slice","length","transformPushBodyForLocale","locale","localeValue","stripLocalesFromBody","bodiesPerLocales","locales","result","default","groupByLocaleIdentifier","installations","map","installation","added","localeIdentifier","validatePushType","where","validPushTypes","deviceTypeField","deviceType","deviceTypes","Array","isArray","concat","i","Parse","Error","PUSH_MISCONFIGURED","applyDeviceTokenExists","prototype","hasOwnProperty","call","$exists"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\nimport deepcopy from 'deepcopy';\n\nexport function isPushIncrementing(body) {\n  if (!body.data || !body.data.badge) {\n    return false;\n  }\n\n  const badge = body.data.badge;\n  if (typeof badge == 'string' && badge.toLowerCase() == 'increment') {\n    return true;\n  }\n\n  return (\n    typeof badge == 'object' &&\n    typeof badge.__op == 'string' &&\n    badge.__op.toLowerCase() == 'increment' &&\n    Number(badge.amount)\n  );\n}\n\nconst localizableKeys = ['alert', 'title'];\n\nexport function getLocalesFromPush(body) {\n  const data = body.data;\n  if (!data) {\n    return [];\n  }\n  return [\n    ...new Set(\n      Object.keys(data).reduce((memo, key) => {\n        localizableKeys.forEach(localizableKey => {\n          if (key.indexOf(`${localizableKey}-`) == 0) {\n            memo.push(key.slice(localizableKey.length + 1));\n          }\n        });\n        return memo;\n      }, [])\n    ),\n  ];\n}\n\nexport function transformPushBodyForLocale(body, locale) {\n  const data = body.data;\n  if (!data) {\n    return body;\n  }\n  body = deepcopy(body);\n  localizableKeys.forEach(key => {\n    const localeValue = body.data[`${key}-${locale}`];\n    if (localeValue) {\n      body.data[key] = localeValue;\n    }\n  });\n  return stripLocalesFromBody(body);\n}\n\nexport function stripLocalesFromBody(body) {\n  if (!body.data) {\n    return body;\n  }\n  Object.keys(body.data).forEach(key => {\n    localizableKeys.forEach(localizableKey => {\n      if (key.indexOf(`${localizableKey}-`) == 0) {\n        delete body.data[key];\n      }\n    });\n  });\n  return body;\n}\n\nexport function bodiesPerLocales(body, locales = []) {\n  // Get all tranformed bodies for each locale\n  const result = locales.reduce((memo, locale) => {\n    memo[locale] = transformPushBodyForLocale(body, locale);\n    return memo;\n  }, {});\n  // Set the default locale, with the stripped body\n  result.default = stripLocalesFromBody(body);\n  return result;\n}\n\nexport function groupByLocaleIdentifier(installations, locales = []) {\n  return installations.reduce(\n    (map, installation) => {\n      let added = false;\n      locales.forEach(locale => {\n        if (added) {\n          return;\n        }\n        if (installation.localeIdentifier && installation.localeIdentifier.indexOf(locale) === 0) {\n          added = true;\n          map[locale] = map[locale] || [];\n          map[locale].push(installation);\n        }\n      });\n      if (!added) {\n        map.default.push(installation);\n      }\n      return map;\n    },\n    { default: [] }\n  );\n}\n\n/**\n * Check whether the deviceType parameter in qury condition is valid or not.\n * @param {Object} where A query condition\n * @param {Array} validPushTypes An array of valid push types(string)\n */\nexport function validatePushType(where = {}, validPushTypes = []) {\n  var deviceTypeField = where.deviceType || {};\n  var deviceTypes = [];\n  if (typeof deviceTypeField === 'string') {\n    deviceTypes.push(deviceTypeField);\n  } else if (Array.isArray(deviceTypeField['$in'])) {\n    deviceTypes.concat(deviceTypeField['$in']);\n  }\n  for (var i = 0; i < deviceTypes.length; i++) {\n    var deviceType = deviceTypes[i];\n    if (validPushTypes.indexOf(deviceType) < 0) {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        deviceType + ' is not supported push type.'\n      );\n    }\n  }\n}\n\nexport function applyDeviceTokenExists(where) {\n  where = deepcopy(where);\n  if (!Object.prototype.hasOwnProperty.call(where, 'deviceToken')) {\n    where['deviceToken'] = { $exists: true };\n  }\n  return where;\n}\n"],"file":"utils.js"}