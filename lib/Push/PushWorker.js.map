{"version":3,"sources":["../../src/Push/PushWorker.js"],"names":["groupByBadge","installations","reduce","map","installation","badge","push","PushWorker","constructor","pushAdapter","subscriberConfig","AdaptableController","validateAdapter","PushAdapter","adapter","channel","PushQueue","defaultPushChannel","subscriber","ParseMessageQueue","createSubscriber","subscribe","on","messageStr","workItem","JSON","parse","run","body","query","pushStatus","applicationId","UTCOffset","config","Config","get","auth","where","utils","applyDeviceTokenExists","objectId","rest","find","then","results","length","sendToAdapter","locales","getLocalesFromPush","bodiesPerLocales","grouppedInstallations","groupByLocaleIdentifier","promises","Object","keys","locale","Promise","all","isPushIncrementing","logger","verbose","send","trackSent","badgeInstallationsMap","payload","data","parseInt"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAXA;AAaA,SAASA,YAAT,CAAsBC,aAAtB,EAAqC;AACnC,SAAOA,aAAa,CAACC,MAAd,CAAqB,CAACC,GAAD,EAAMC,YAAN,KAAuB;AACjD,UAAMC,KAAK,GAAGD,YAAY,CAACC,KAAb,GAAqB,EAAnC;AACAF,IAAAA,GAAG,CAACE,KAAD,CAAH,GAAaF,GAAG,CAACE,KAAD,CAAH,IAAc,EAA3B;AACAF,IAAAA,GAAG,CAACE,KAAD,CAAH,CAAWC,IAAX,CAAgBF,YAAhB;AACA,WAAOD,GAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD;;AAEM,MAAMI,UAAN,CAAiB;AAKtBC,EAAAA,WAAW,CAACC,WAAD,EAA2BC,gBAAqB,GAAG,EAAnD,EAAuD;AAChEC,iCAAoBC,eAApB,CAAoCH,WAApC,EAAiD,IAAjD,EAAuDI,wBAAvD;;AACA,SAAKC,OAAL,GAAeL,WAAf;AAEA,SAAKM,OAAL,GAAeL,gBAAgB,CAACK,OAAjB,IAA4BC,qBAAUC,kBAAV,EAA3C;AACA,SAAKC,UAAL,GAAkBC,qCAAkBC,gBAAlB,CAAmCV,gBAAnC,CAAlB;;AACA,QAAI,KAAKQ,UAAT,EAAqB;AACnB,YAAMA,UAAU,GAAG,KAAKA,UAAxB;AACAA,MAAAA,UAAU,CAACG,SAAX,CAAqB,KAAKN,OAA1B;AACAG,MAAAA,UAAU,CAACI,EAAX,CAAc,SAAd,EAAyB,CAACP,OAAD,EAAUQ,UAAV,KAAyB;AAChD,cAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,CAAjB;AACA,aAAKI,GAAL,CAASH,QAAT;AACD,OAHD;AAID;AACF;;AAEDG,EAAAA,GAAG,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,GAAD,EAAyE;AAC1E,UAAMC,MAAM,GAAGC,gBAAOC,GAAP,CAAWJ,aAAX,CAAf;;AACA,UAAMK,IAAI,GAAG,kBAAOH,MAAP,CAAb;AACA,UAAMI,KAAK,GAAGC,KAAK,CAACC,sBAAN,CAA6BV,KAAK,CAACQ,KAAnC,CAAd;AACA,WAAOR,KAAK,CAACQ,KAAb;AACAP,IAAAA,UAAU,GAAG,sCAAkBG,MAAlB,EAA0BH,UAAU,CAACU,QAArC,CAAb;AACA,WAAOC,cAAKC,IAAL,CAAUT,MAAV,EAAkBG,IAAlB,EAAwB,eAAxB,EAAyCC,KAAzC,EAAgDR,KAAhD,EAAuDc,IAAvD,CAA4D,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiB;AAClF,UAAIA,OAAO,CAACC,MAAR,IAAkB,CAAtB,EAAyB;AACvB;AACD;;AACD,aAAO,KAAKC,aAAL,CAAmBlB,IAAnB,EAAyBgB,OAAzB,EAAkCd,UAAlC,EAA8CG,MAA9C,EAAsDD,SAAtD,CAAP;AACD,KALM,CAAP;AAMD;;AAEDc,EAAAA,aAAa,CACXlB,IADW,EAEX3B,aAFW,EAGX6B,UAHW,EAIXG,MAJW,EAKXD,SALW,EAMC;AACZ;AACA,UAAMe,OAAO,GAAGT,KAAK,CAACU,kBAAN,CAAyBpB,IAAzB,CAAhB;;AACA,QAAImB,OAAO,CAACF,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACA,YAAMI,gBAAgB,GAAGX,KAAK,CAACW,gBAAN,CAAuBrB,IAAvB,EAA6BmB,OAA7B,CAAzB,CAFsB,CAItB;;AACA,YAAMG,qBAAqB,GAAGZ,KAAK,CAACa,uBAAN,CAA8BlD,aAA9B,EAA6C8C,OAA7C,CAA9B;AACA,YAAMK,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,qBAAZ,EAAmC/C,GAAnC,CAAuCoD,MAAM,IAAI;AAChE,cAAMtD,aAAa,GAAGiD,qBAAqB,CAACK,MAAD,CAA3C;AACA,cAAM3B,IAAI,GAAGqB,gBAAgB,CAACM,MAAD,CAA7B;AACA,eAAO,KAAKT,aAAL,CAAmBlB,IAAnB,EAAyB3B,aAAzB,EAAwC6B,UAAxC,EAAoDG,MAApD,EAA4DD,SAA5D,CAAP;AACD,OAJgB,CAAjB;AAKA,aAAOwB,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAAP;AACD;;AAED,QAAI,CAACd,KAAK,CAACoB,kBAAN,CAAyB9B,IAAzB,CAAL,EAAqC;AACnC+B,sBAAOC,OAAP,CAAgB,mBAAkB3D,aAAa,CAAC4C,MAAO,EAAvD;;AACA,aAAO,KAAK/B,OAAL,CAAa+C,IAAb,CAAkBjC,IAAlB,EAAwB3B,aAAxB,EAAuC6B,UAAU,CAACU,QAAlD,EAA4DG,IAA5D,CAAiEC,OAAO,IAAI;AACjF,eAAOd,UAAU,CAACgC,SAAX,CAAqBlB,OAArB,EAA8BZ,SAA9B,EAAyCW,IAAzC,CAA8C,MAAMC,OAApD,CAAP;AACD,OAFM,CAAP;AAGD,KAtBW,CAwBZ;;;AACA,UAAMmB,qBAAqB,GAAG/D,YAAY,CAACC,aAAD,CAA1C,CAzBY,CA2BZ;;AACA,UAAMmD,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYS,qBAAZ,EAAmC5D,GAAnC,CAAuCE,KAAK,IAAI;AAC/D,YAAM2D,OAAO,GAAG,uBAASpC,IAAT,CAAhB;AACAoC,MAAAA,OAAO,CAACC,IAAR,CAAa5D,KAAb,GAAqB6D,QAAQ,CAAC7D,KAAD,CAA7B;AACA,YAAMJ,aAAa,GAAG8D,qBAAqB,CAAC1D,KAAD,CAA3C;AACA,aAAO,KAAKyC,aAAL,CAAmBkB,OAAnB,EAA4B/D,aAA5B,EAA2C6B,UAA3C,EAAuDG,MAAvD,EAA+DD,SAA/D,CAAP;AACD,KALgB,CAAjB;AAMA,WAAOwB,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAAP;AACD;;AA5EqB;;;eA+ET7C,U","sourcesContent":["// @flow\n// @flow-disable-next\nimport deepcopy from 'deepcopy';\nimport AdaptableController from '../Controllers/AdaptableController';\nimport { master } from '../Auth';\nimport Config from '../Config';\nimport { PushAdapter } from '../Adapters/Push/PushAdapter';\nimport rest from '../rest';\nimport { pushStatusHandler } from '../StatusHandler';\nimport * as utils from './utils';\nimport { ParseMessageQueue } from '../ParseMessageQueue';\nimport { PushQueue } from './PushQueue';\nimport logger from '../logger';\n\nfunction groupByBadge(installations) {\n  return installations.reduce((map, installation) => {\n    const badge = installation.badge + '';\n    map[badge] = map[badge] || [];\n    map[badge].push(installation);\n    return map;\n  }, {});\n}\n\nexport class PushWorker {\n  subscriber: ?any;\n  adapter: any;\n  channel: string;\n\n  constructor(pushAdapter: PushAdapter, subscriberConfig: any = {}) {\n    AdaptableController.validateAdapter(pushAdapter, this, PushAdapter);\n    this.adapter = pushAdapter;\n\n    this.channel = subscriberConfig.channel || PushQueue.defaultPushChannel();\n    this.subscriber = ParseMessageQueue.createSubscriber(subscriberConfig);\n    if (this.subscriber) {\n      const subscriber = this.subscriber;\n      subscriber.subscribe(this.channel);\n      subscriber.on('message', (channel, messageStr) => {\n        const workItem = JSON.parse(messageStr);\n        this.run(workItem);\n      });\n    }\n  }\n\n  run({ body, query, pushStatus, applicationId, UTCOffset }: any): Promise<*> {\n    const config = Config.get(applicationId);\n    const auth = master(config);\n    const where = utils.applyDeviceTokenExists(query.where);\n    delete query.where;\n    pushStatus = pushStatusHandler(config, pushStatus.objectId);\n    return rest.find(config, auth, '_Installation', where, query).then(({ results }) => {\n      if (results.length == 0) {\n        return;\n      }\n      return this.sendToAdapter(body, results, pushStatus, config, UTCOffset);\n    });\n  }\n\n  sendToAdapter(\n    body: any,\n    installations: any[],\n    pushStatus: any,\n    config: Config,\n    UTCOffset: ?any\n  ): Promise<*> {\n    // Check if we have locales in the push body\n    const locales = utils.getLocalesFromPush(body);\n    if (locales.length > 0) {\n      // Get all tranformed bodies for each locale\n      const bodiesPerLocales = utils.bodiesPerLocales(body, locales);\n\n      // Group installations on the specified locales (en, fr, default etc...)\n      const grouppedInstallations = utils.groupByLocaleIdentifier(installations, locales);\n      const promises = Object.keys(grouppedInstallations).map(locale => {\n        const installations = grouppedInstallations[locale];\n        const body = bodiesPerLocales[locale];\n        return this.sendToAdapter(body, installations, pushStatus, config, UTCOffset);\n      });\n      return Promise.all(promises);\n    }\n\n    if (!utils.isPushIncrementing(body)) {\n      logger.verbose(`Sending push to ${installations.length}`);\n      return this.adapter.send(body, installations, pushStatus.objectId).then(results => {\n        return pushStatus.trackSent(results, UTCOffset).then(() => results);\n      });\n    }\n\n    // Collect the badges to reduce the # of calls\n    const badgeInstallationsMap = groupByBadge(installations);\n\n    // Map the on the badges count and return the send result\n    const promises = Object.keys(badgeInstallationsMap).map(badge => {\n      const payload = deepcopy(body);\n      payload.data.badge = parseInt(badge);\n      const installations = badgeInstallationsMap[badge];\n      return this.sendToAdapter(payload, installations, pushStatus, config, UTCOffset);\n    });\n    return Promise.all(promises);\n  }\n}\n\nexport default PushWorker;\n"],"file":"PushWorker.js"}