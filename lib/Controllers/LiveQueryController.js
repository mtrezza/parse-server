"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LiveQueryController = void 0;

var _ParseCloudCodePublisher = require("../LiveQuery/ParseCloudCodePublisher");

var _Options = require("../Options");

class LiveQueryController {
  constructor(config) {
    // If config is empty, we just assume no classs needs to be registered as LiveQuery
    if (!config || !config.classNames) {
      this.classNames = new Set();
    } else if (config.classNames instanceof Array) {
      const classNames = config.classNames.map(name => new RegExp("^" + name + "$"));
      this.classNames = new Set(classNames);
    } else {
      throw 'liveQuery.classes should be an array of string';
    }

    this.liveQueryPublisher = new _ParseCloudCodePublisher.ParseCloudCodePublisher(config);
  }

  onAfterSave(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }

    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);

    this.liveQueryPublisher.onCloudCodeAfterSave(req);
  }

  onAfterDelete(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }

    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);

    this.liveQueryPublisher.onCloudCodeAfterDelete(req);
  }

  hasLiveQuery(className) {
    for (const name of this.classNames) {
      if (name.test(className)) {
        return true;
      }
    }

    return false;
  }

  _makePublisherRequest(currentObject, originalObject, classLevelPermissions) {
    const req = {
      object: currentObject
    };

    if (currentObject) {
      req.original = originalObject;
    }

    if (classLevelPermissions) {
      req.classLevelPermissions = classLevelPermissions;
    }

    return req;
  }

}

exports.LiveQueryController = LiveQueryController;
var _default = LiveQueryController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9MaXZlUXVlcnlDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkxpdmVRdWVyeUNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNsYXNzTmFtZXMiLCJTZXQiLCJBcnJheSIsIm1hcCIsIm5hbWUiLCJSZWdFeHAiLCJsaXZlUXVlcnlQdWJsaXNoZXIiLCJQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciIsIm9uQWZ0ZXJTYXZlIiwiY2xhc3NOYW1lIiwiY3VycmVudE9iamVjdCIsIm9yaWdpbmFsT2JqZWN0IiwiY2xhc3NMZXZlbFBlcm1pc3Npb25zIiwiaGFzTGl2ZVF1ZXJ5IiwicmVxIiwiX21ha2VQdWJsaXNoZXJSZXF1ZXN0Iiwib25DbG91ZENvZGVBZnRlclNhdmUiLCJvbkFmdGVyRGVsZXRlIiwib25DbG91ZENvZGVBZnRlckRlbGV0ZSIsInRlc3QiLCJvYmplY3QiLCJvcmlnaW5hbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNPLE1BQU1BLG1CQUFOLENBQTBCO0FBSS9CQyxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBNEI7QUFDckM7QUFDQSxRQUFJLENBQUNBLE1BQUQsSUFBVyxDQUFDQSxNQUFNLENBQUNDLFVBQXZCLEVBQW1DO0FBQ2pDLFdBQUtBLFVBQUwsR0FBa0IsSUFBSUMsR0FBSixFQUFsQjtBQUNELEtBRkQsTUFFTyxJQUFJRixNQUFNLENBQUNDLFVBQVAsWUFBNkJFLEtBQWpDLEVBQXdDO0FBQzdDLFlBQU1GLFVBQVUsR0FBR0QsTUFBTSxDQUFDQyxVQUFQLENBQ2hCRyxHQURnQixDQUNaQyxJQUFJLElBQUksSUFBSUMsTUFBSixDQUFXLE1BQU1ELElBQU4sR0FBYSxHQUF4QixDQURJLENBQW5CO0FBRUEsV0FBS0osVUFBTCxHQUFrQixJQUFJQyxHQUFKLENBQVFELFVBQVIsQ0FBbEI7QUFDRCxLQUpNLE1BSUE7QUFDTCxZQUFNLGdEQUFOO0FBQ0Q7O0FBQ0QsU0FBS00sa0JBQUwsR0FBMEIsSUFBSUMsZ0RBQUosQ0FBNEJSLE1BQTVCLENBQTFCO0FBQ0Q7O0FBRURTLEVBQUFBLFdBQVcsQ0FDVEMsU0FEUyxFQUVUQyxhQUZTLEVBR1RDLGNBSFMsRUFJVEMscUJBSlMsRUFLVDtBQUNBLFFBQUksQ0FBQyxLQUFLQyxZQUFMLENBQWtCSixTQUFsQixDQUFMLEVBQW1DO0FBQ2pDO0FBQ0Q7O0FBQ0QsVUFBTUssR0FBRyxHQUFHLEtBQUtDLHFCQUFMLENBQTJCTCxhQUEzQixFQUEwQ0MsY0FBMUMsRUFBMERDLHFCQUExRCxDQUFaOztBQUNBLFNBQUtOLGtCQUFMLENBQXdCVSxvQkFBeEIsQ0FBNkNGLEdBQTdDO0FBQ0Q7O0FBRURHLEVBQUFBLGFBQWEsQ0FDWFIsU0FEVyxFQUVYQyxhQUZXLEVBR1hDLGNBSFcsRUFJWEMscUJBSlcsRUFLWDtBQUNBLFFBQUksQ0FBQyxLQUFLQyxZQUFMLENBQWtCSixTQUFsQixDQUFMLEVBQW1DO0FBQ2pDO0FBQ0Q7O0FBQ0QsVUFBTUssR0FBRyxHQUFHLEtBQUtDLHFCQUFMLENBQTJCTCxhQUEzQixFQUEwQ0MsY0FBMUMsRUFBMERDLHFCQUExRCxDQUFaOztBQUNBLFNBQUtOLGtCQUFMLENBQXdCWSxzQkFBeEIsQ0FBK0NKLEdBQS9DO0FBQ0Q7O0FBRURELEVBQUFBLFlBQVksQ0FBQ0osU0FBRCxFQUE2QjtBQUN2QyxTQUFLLE1BQU1MLElBQVgsSUFBbUIsS0FBS0osVUFBeEIsRUFBb0M7QUFDbEMsVUFBSUksSUFBSSxDQUFDZSxJQUFMLENBQVVWLFNBQVYsQ0FBSixFQUEwQjtBQUN4QixlQUFPLElBQVA7QUFDRDtBQUNGOztBQUNELFdBQU8sS0FBUDtBQUNEOztBQUVETSxFQUFBQSxxQkFBcUIsQ0FBQ0wsYUFBRCxFQUFxQkMsY0FBckIsRUFBMENDLHFCQUExQyxFQUE0RTtBQUMvRixVQUFNRSxHQUFHLEdBQUc7QUFDVk0sTUFBQUEsTUFBTSxFQUFFVjtBQURFLEtBQVo7O0FBR0EsUUFBSUEsYUFBSixFQUFtQjtBQUNqQkksTUFBQUEsR0FBRyxDQUFDTyxRQUFKLEdBQWVWLGNBQWY7QUFDRDs7QUFDRCxRQUFJQyxxQkFBSixFQUEyQjtBQUN6QkUsTUFBQUEsR0FBRyxDQUFDRixxQkFBSixHQUE0QkEscUJBQTVCO0FBQ0Q7O0FBQ0QsV0FBT0UsR0FBUDtBQUNEOztBQWhFOEI7OztlQW1FbEJqQixtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIH0gZnJvbSAnLi4vTGl2ZVF1ZXJ5L1BhcnNlQ2xvdWRDb2RlUHVibGlzaGVyJztcbmltcG9ydCB7IExpdmVRdWVyeU9wdGlvbnMgfSBmcm9tICcuLi9PcHRpb25zJztcbmV4cG9ydCBjbGFzcyBMaXZlUXVlcnlDb250cm9sbGVyIHtcbiAgY2xhc3NOYW1lczogYW55O1xuICBsaXZlUXVlcnlQdWJsaXNoZXI6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6ID9MaXZlUXVlcnlPcHRpb25zKSB7XG4gICAgLy8gSWYgY29uZmlnIGlzIGVtcHR5LCB3ZSBqdXN0IGFzc3VtZSBubyBjbGFzc3MgbmVlZHMgdG8gYmUgcmVnaXN0ZXJlZCBhcyBMaXZlUXVlcnlcbiAgICBpZiAoIWNvbmZpZyB8fCAhY29uZmlnLmNsYXNzTmFtZXMpIHtcbiAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5jbGFzc05hbWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBjb25maWcuY2xhc3NOYW1lc1xuICAgICAgICAubWFwKG5hbWUgPT4gbmV3IFJlZ0V4cChcIl5cIiArIG5hbWUgKyBcIiRcIikpO1xuICAgICAgdGhpcy5jbGFzc05hbWVzID0gbmV3IFNldChjbGFzc05hbWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ2xpdmVRdWVyeS5jbGFzc2VzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBzdHJpbmcnO1xuICAgIH1cbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlciA9IG5ldyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlcihjb25maWcpO1xuICB9XG5cbiAgb25BZnRlclNhdmUoXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgY3VycmVudE9iamVjdDogYW55LFxuICAgIG9yaWdpbmFsT2JqZWN0OiBhbnksXG4gICAgY2xhc3NMZXZlbFBlcm1pc3Npb25zOiA/YW55XG4gICkge1xuICAgIGlmICghdGhpcy5oYXNMaXZlUXVlcnkoY2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXEgPSB0aGlzLl9tYWtlUHVibGlzaGVyUmVxdWVzdChjdXJyZW50T2JqZWN0LCBvcmlnaW5hbE9iamVjdCwgY2xhc3NMZXZlbFBlcm1pc3Npb25zKTtcbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5vbkNsb3VkQ29kZUFmdGVyU2F2ZShyZXEpO1xuICB9XG5cbiAgb25BZnRlckRlbGV0ZShcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBjdXJyZW50T2JqZWN0OiBhbnksXG4gICAgb3JpZ2luYWxPYmplY3Q6IGFueSxcbiAgICBjbGFzc0xldmVsUGVybWlzc2lvbnM6IGFueVxuICApIHtcbiAgICBpZiAoIXRoaXMuaGFzTGl2ZVF1ZXJ5KGNsYXNzTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVxID0gdGhpcy5fbWFrZVB1Ymxpc2hlclJlcXVlc3QoY3VycmVudE9iamVjdCwgb3JpZ2luYWxPYmplY3QsIGNsYXNzTGV2ZWxQZXJtaXNzaW9ucyk7XG4gICAgdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIub25DbG91ZENvZGVBZnRlckRlbGV0ZShyZXEpO1xuICB9XG5cbiAgaGFzTGl2ZVF1ZXJ5KGNsYXNzTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMuY2xhc3NOYW1lcykge1xuICAgICAgaWYgKG5hbWUudGVzdChjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBfbWFrZVB1Ymxpc2hlclJlcXVlc3QoY3VycmVudE9iamVjdDogYW55LCBvcmlnaW5hbE9iamVjdDogYW55LCBjbGFzc0xldmVsUGVybWlzc2lvbnM6ID9hbnkpOiBhbnkge1xuICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgIG9iamVjdDogY3VycmVudE9iamVjdCxcbiAgICB9O1xuICAgIGlmIChjdXJyZW50T2JqZWN0KSB7XG4gICAgICByZXEub3JpZ2luYWwgPSBvcmlnaW5hbE9iamVjdDtcbiAgICB9XG4gICAgaWYgKGNsYXNzTGV2ZWxQZXJtaXNzaW9ucykge1xuICAgICAgcmVxLmNsYXNzTGV2ZWxQZXJtaXNzaW9ucyA9IGNsYXNzTGV2ZWxQZXJtaXNzaW9ucztcbiAgICB9XG4gICAgcmV0dXJuIHJlcTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMaXZlUXVlcnlDb250cm9sbGVyO1xuIl19