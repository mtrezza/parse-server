{"version":3,"sources":["../../src/Controllers/LiveQueryController.js"],"names":["LiveQueryController","constructor","config","classNames","Set","Array","map","name","RegExp","liveQueryPublisher","ParseCloudCodePublisher","onAfterSave","className","currentObject","originalObject","classLevelPermissions","hasLiveQuery","req","_makePublisherRequest","onCloudCodeAfterSave","onAfterDelete","onCloudCodeAfterDelete","test","object","original"],"mappings":";;;;;;;AAAA;;AACA;;AACO,MAAMA,mBAAN,CAA0B;AAI/BC,EAAAA,WAAW,CAACC,MAAD,EAA4B;AACrC;AACA,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,UAAvB,EAAmC;AACjC,WAAKA,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACD,KAFD,MAEO,IAAIF,MAAM,CAACC,UAAP,YAA6BE,KAAjC,EAAwC;AAC7C,YAAMF,UAAU,GAAGD,MAAM,CAACC,UAAP,CAChBG,GADgB,CACZC,IAAI,IAAI,IAAIC,MAAJ,CAAW,MAAMD,IAAN,GAAa,GAAxB,CADI,CAAnB;AAEA,WAAKJ,UAAL,GAAkB,IAAIC,GAAJ,CAAQD,UAAR,CAAlB;AACD,KAJM,MAIA;AACL,YAAM,gDAAN;AACD;;AACD,SAAKM,kBAAL,GAA0B,IAAIC,gDAAJ,CAA4BR,MAA5B,CAA1B;AACD;;AAEDS,EAAAA,WAAW,CACTC,SADS,EAETC,aAFS,EAGTC,cAHS,EAITC,qBAJS,EAKT;AACA,QAAI,CAAC,KAAKC,YAAL,CAAkBJ,SAAlB,CAAL,EAAmC;AACjC;AACD;;AACD,UAAMK,GAAG,GAAG,KAAKC,qBAAL,CAA2BL,aAA3B,EAA0CC,cAA1C,EAA0DC,qBAA1D,CAAZ;;AACA,SAAKN,kBAAL,CAAwBU,oBAAxB,CAA6CF,GAA7C;AACD;;AAEDG,EAAAA,aAAa,CACXR,SADW,EAEXC,aAFW,EAGXC,cAHW,EAIXC,qBAJW,EAKX;AACA,QAAI,CAAC,KAAKC,YAAL,CAAkBJ,SAAlB,CAAL,EAAmC;AACjC;AACD;;AACD,UAAMK,GAAG,GAAG,KAAKC,qBAAL,CAA2BL,aAA3B,EAA0CC,cAA1C,EAA0DC,qBAA1D,CAAZ;;AACA,SAAKN,kBAAL,CAAwBY,sBAAxB,CAA+CJ,GAA/C;AACD;;AAEDD,EAAAA,YAAY,CAACJ,SAAD,EAA6B;AACvC,SAAK,MAAML,IAAX,IAAmB,KAAKJ,UAAxB,EAAoC;AAClC,UAAII,IAAI,CAACe,IAAL,CAAUV,SAAV,CAAJ,EAA0B;AACxB,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAEDM,EAAAA,qBAAqB,CAACL,aAAD,EAAqBC,cAArB,EAA0CC,qBAA1C,EAA4E;AAC/F,UAAME,GAAG,GAAG;AACVM,MAAAA,MAAM,EAAEV;AADE,KAAZ;;AAGA,QAAIA,aAAJ,EAAmB;AACjBI,MAAAA,GAAG,CAACO,QAAJ,GAAeV,cAAf;AACD;;AACD,QAAIC,qBAAJ,EAA2B;AACzBE,MAAAA,GAAG,CAACF,qBAAJ,GAA4BA,qBAA5B;AACD;;AACD,WAAOE,GAAP;AACD;;AAhE8B;;;eAmElBjB,mB","sourcesContent":["import { ParseCloudCodePublisher } from '../LiveQuery/ParseCloudCodePublisher';\nimport { LiveQueryOptions } from '../Options';\nexport class LiveQueryController {\n  classNames: any;\n  liveQueryPublisher: any;\n\n  constructor(config: ?LiveQueryOptions) {\n    // If config is empty, we just assume no classs needs to be registered as LiveQuery\n    if (!config || !config.classNames) {\n      this.classNames = new Set();\n    } else if (config.classNames instanceof Array) {\n      const classNames = config.classNames\n        .map(name => new RegExp(\"^\" + name + \"$\"));\n      this.classNames = new Set(classNames);\n    } else {\n      throw 'liveQuery.classes should be an array of string';\n    }\n    this.liveQueryPublisher = new ParseCloudCodePublisher(config);\n  }\n\n  onAfterSave(\n    className: string,\n    currentObject: any,\n    originalObject: any,\n    classLevelPermissions: ?any\n  ) {\n    if (!this.hasLiveQuery(className)) {\n      return;\n    }\n    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);\n    this.liveQueryPublisher.onCloudCodeAfterSave(req);\n  }\n\n  onAfterDelete(\n    className: string,\n    currentObject: any,\n    originalObject: any,\n    classLevelPermissions: any\n  ) {\n    if (!this.hasLiveQuery(className)) {\n      return;\n    }\n    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);\n    this.liveQueryPublisher.onCloudCodeAfterDelete(req);\n  }\n\n  hasLiveQuery(className: string): boolean {\n    for (const name of this.classNames) {\n      if (name.test(className)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _makePublisherRequest(currentObject: any, originalObject: any, classLevelPermissions: ?any): any {\n    const req = {\n      object: currentObject,\n    };\n    if (currentObject) {\n      req.original = originalObject;\n    }\n    if (classLevelPermissions) {\n      req.classLevelPermissions = classLevelPermissions;\n    }\n    return req;\n  }\n}\n\nexport default LiveQueryController;\n"],"file":"LiveQueryController.js"}