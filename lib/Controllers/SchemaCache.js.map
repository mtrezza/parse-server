{"version":3,"sources":["../../src/Controllers/SchemaCache.js"],"names":["MAIN_SCHEMA","SCHEMA_CACHE_PREFIX","SchemaCache","constructor","cacheController","ttl","defaults","schemaCacheTTL","singleCache","parseInt","cache","prefix","getAllClasses","Promise","resolve","get","setAllClasses","schema","put","getOneSchema","className","then","cachedSchemas","find","cachedSchema","clear","del"],"mappings":";;;;;;;AAGA;;AACA;;;;AAJA,MAAMA,WAAW,GAAG,eAApB;AACA,MAAMC,mBAAmB,GAAG,UAA5B;;AAKe,MAAMC,WAAN,CAAkB;AAG/BC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,GAAG,GAAGC,kBAASC,cAAjC,EAAiDC,WAAW,GAAG,KAA/D,EAAsE;AAC/E,SAAKH,GAAL,GAAWA,GAAX;;AACA,QAAI,OAAOA,GAAP,IAAc,QAAlB,EAA4B;AAC1B,WAAKA,GAAL,GAAWI,QAAQ,CAACJ,GAAD,CAAnB;AACD;;AACD,SAAKK,KAAL,GAAaN,eAAb;AACA,SAAKO,MAAL,GAAcV,mBAAd;;AACA,QAAI,CAACO,WAAL,EAAkB;AAChB,WAAKG,MAAL,IAAe,+BAAa,EAAb,CAAf;AACD;AACF;;AAEDC,EAAAA,aAAa,GAAG;AACd,QAAI,CAAC,KAAKP,GAAV,EAAe;AACb,aAAOQ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAO,KAAKJ,KAAL,CAAWK,GAAX,CAAe,KAAKJ,MAAL,GAAcX,WAA7B,CAAP;AACD;;AAEDgB,EAAAA,aAAa,CAACC,MAAD,EAAS;AACpB,QAAI,CAAC,KAAKZ,GAAV,EAAe;AACb,aAAOQ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAO,KAAKJ,KAAL,CAAWQ,GAAX,CAAe,KAAKP,MAAL,GAAcX,WAA7B,EAA0CiB,MAA1C,EAAkD,KAAKZ,GAAvD,CAAP;AACD;;AAEDc,EAAAA,YAAY,CAACC,SAAD,EAAY;AACtB,QAAI,CAAC,KAAKf,GAAV,EAAe;AACb,aAAOQ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAO,KAAKJ,KAAL,CAAWK,GAAX,CAAe,KAAKJ,MAAL,GAAcX,WAA7B,EAA0CqB,IAA1C,CAA+CC,aAAa,IAAI;AACrEA,MAAAA,aAAa,GAAGA,aAAa,IAAI,EAAjC;AACA,YAAML,MAAM,GAAGK,aAAa,CAACC,IAAd,CAAmBC,YAAY,IAAI;AAChD,eAAOA,YAAY,CAACJ,SAAb,KAA2BA,SAAlC;AACD,OAFc,CAAf;;AAGA,UAAIH,MAAJ,EAAY;AACV,eAAOJ,OAAO,CAACC,OAAR,CAAgBG,MAAhB,CAAP;AACD;;AACD,aAAOJ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD,KATM,CAAP;AAUD;;AAEDW,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKf,KAAL,CAAWgB,GAAX,CAAe,KAAKf,MAAL,GAAcX,WAA7B,CAAP;AACD;;AA/C8B","sourcesContent":["const MAIN_SCHEMA = '__MAIN_SCHEMA';\nconst SCHEMA_CACHE_PREFIX = '__SCHEMA';\n\nimport { randomString } from '../cryptoUtils';\nimport defaults from '../defaults';\n\nexport default class SchemaCache {\n  cache: Object;\n\n  constructor(cacheController, ttl = defaults.schemaCacheTTL, singleCache = false) {\n    this.ttl = ttl;\n    if (typeof ttl == 'string') {\n      this.ttl = parseInt(ttl);\n    }\n    this.cache = cacheController;\n    this.prefix = SCHEMA_CACHE_PREFIX;\n    if (!singleCache) {\n      this.prefix += randomString(20);\n    }\n  }\n\n  getAllClasses() {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.cache.get(this.prefix + MAIN_SCHEMA);\n  }\n\n  setAllClasses(schema) {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.cache.put(this.prefix + MAIN_SCHEMA, schema, this.ttl);\n  }\n\n  getOneSchema(className) {\n    if (!this.ttl) {\n      return Promise.resolve(null);\n    }\n    return this.cache.get(this.prefix + MAIN_SCHEMA).then(cachedSchemas => {\n      cachedSchemas = cachedSchemas || [];\n      const schema = cachedSchemas.find(cachedSchema => {\n        return cachedSchema.className === className;\n      });\n      if (schema) {\n        return Promise.resolve(schema);\n      }\n      return Promise.resolve(null);\n    });\n  }\n\n  clear() {\n    return this.cache.del(this.prefix + MAIN_SCHEMA);\n  }\n}\n"],"file":"SchemaCache.js"}