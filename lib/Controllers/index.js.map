{"version":3,"sources":["../../src/Controllers/index.js"],"names":["getControllers","options","loggerController","getLoggerController","filesController","getFilesController","userController","getUserController","pushController","hasPushScheduledSupport","hasPushSupport","pushControllerQueue","pushWorker","getPushController","cacheController","getCacheController","analyticsController","getAnalyticsController","liveQueryController","getLiveQueryController","databaseController","getDatabaseController","hooksController","getHooksController","authDataManager","getAuthDataManager","parseGraphQLController","getParseGraphQLController","appId","jsonLogs","logsFolder","verbose","logLevel","maxLogFiles","silent","loggerAdapter","loggerOptions","loggerControllerAdapter","WinstonLoggerAdapter","LoggerController","databaseURI","filesAdapter","databaseAdapter","preserveFileName","fileKey","filesControllerAdapter","GridFSBucketAdapter","FilesController","emailAdapter","verifyUserEmails","emailControllerAdapter","UserController","cacheAdapter","cacheTTL","cacheMaxSize","cacheControllerAdapter","InMemoryCacheAdapter","ttl","maxSize","CacheController","controllerDeps","ParseGraphQLController","mountGraphQL","analyticsAdapter","analyticsControllerAdapter","AnalyticsAdapter","AnalyticsController","LiveQueryController","liveQuery","databaseOptions","collectionPrefix","schemaCacheTTL","enableSingleSchemaCache","defaults","getDatabaseAdapter","DatabaseController","SchemaCache","webhookKey","HooksController","scheduledPush","push","pushOptions","Object","assign","pushQueueOptions","queueOptions","pushAdapter","adapter","ParsePushAdapter","PushController","disablePushWorker","PushQueue","PushWorker","auth","enableAnonymousUsers","protocol","parsedURI","url","parse","toLowerCase","e","PostgresStorageAdapter","uri","MongoStorageAdapter","mongoOptions"],"mappings":"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","sourcesContent":["import authDataManager from '../Adapters/Auth';\nimport { ParseServerOptions } from '../Options';\nimport { loadAdapter } from '../Adapters/AdapterLoader';\nimport defaults from '../defaults';\nimport url from 'url';\n// Controllers\nimport { LoggerController } from './LoggerController';\nimport { FilesController } from './FilesController';\nimport { HooksController } from './HooksController';\nimport { UserController } from './UserController';\nimport { CacheController } from './CacheController';\nimport { LiveQueryController } from './LiveQueryController';\nimport { AnalyticsController } from './AnalyticsController';\nimport { PushController } from './PushController';\nimport { PushQueue } from '../Push/PushQueue';\nimport { PushWorker } from '../Push/PushWorker';\nimport DatabaseController from './DatabaseController';\nimport SchemaCache from './SchemaCache';\n\n// Adapters\nimport { GridFSBucketAdapter } from '../Adapters/Files/GridFSBucketAdapter';\nimport { WinstonLoggerAdapter } from '../Adapters/Logger/WinstonLoggerAdapter';\nimport { InMemoryCacheAdapter } from '../Adapters/Cache/InMemoryCacheAdapter';\nimport { AnalyticsAdapter } from '../Adapters/Analytics/AnalyticsAdapter';\nimport MongoStorageAdapter from '../Adapters/Storage/Mongo/MongoStorageAdapter';\nimport PostgresStorageAdapter from '../Adapters/Storage/Postgres/PostgresStorageAdapter';\nimport ParsePushAdapter from '@parse/push-adapter';\nimport ParseGraphQLController from './ParseGraphQLController';\n\nexport function getControllers(options: ParseServerOptions) {\n  const loggerController = getLoggerController(options);\n  const filesController = getFilesController(options);\n  const userController = getUserController(options);\n  const {\n    pushController,\n    hasPushScheduledSupport,\n    hasPushSupport,\n    pushControllerQueue,\n    pushWorker,\n  } = getPushController(options);\n  const cacheController = getCacheController(options);\n  const analyticsController = getAnalyticsController(options);\n  const liveQueryController = getLiveQueryController(options);\n  const databaseController = getDatabaseController(options, cacheController);\n  const hooksController = getHooksController(options, databaseController);\n  const authDataManager = getAuthDataManager(options);\n  const parseGraphQLController = getParseGraphQLController(options, {\n    databaseController,\n    cacheController,\n  });\n  return {\n    loggerController,\n    filesController,\n    userController,\n    pushController,\n    hasPushScheduledSupport,\n    hasPushSupport,\n    pushWorker,\n    pushControllerQueue,\n    analyticsController,\n    cacheController,\n    parseGraphQLController,\n    liveQueryController,\n    databaseController,\n    hooksController,\n    authDataManager,\n  };\n}\n\nexport function getLoggerController(options: ParseServerOptions): LoggerController {\n  const {\n    appId,\n    jsonLogs,\n    logsFolder,\n    verbose,\n    logLevel,\n    maxLogFiles,\n    silent,\n    loggerAdapter,\n  } = options;\n  const loggerOptions = {\n    jsonLogs,\n    logsFolder,\n    verbose,\n    logLevel,\n    silent,\n    maxLogFiles,\n  };\n  const loggerControllerAdapter = loadAdapter(loggerAdapter, WinstonLoggerAdapter, loggerOptions);\n  return new LoggerController(loggerControllerAdapter, appId, loggerOptions);\n}\n\nexport function getFilesController(options: ParseServerOptions): FilesController {\n  const { appId, databaseURI, filesAdapter, databaseAdapter, preserveFileName, fileKey } = options;\n  if (!filesAdapter && databaseAdapter) {\n    throw 'When using an explicit database adapter, you must also use an explicit filesAdapter.';\n  }\n  const filesControllerAdapter = loadAdapter(filesAdapter, () => {\n    return new GridFSBucketAdapter(databaseURI, {}, fileKey);\n  });\n  return new FilesController(filesControllerAdapter, appId, {\n    preserveFileName,\n  });\n}\n\nexport function getUserController(options: ParseServerOptions): UserController {\n  const { appId, emailAdapter, verifyUserEmails } = options;\n  const emailControllerAdapter = loadAdapter(emailAdapter);\n  return new UserController(emailControllerAdapter, appId, {\n    verifyUserEmails,\n  });\n}\n\nexport function getCacheController(options: ParseServerOptions): CacheController {\n  const { appId, cacheAdapter, cacheTTL, cacheMaxSize } = options;\n  const cacheControllerAdapter = loadAdapter(cacheAdapter, InMemoryCacheAdapter, {\n    appId: appId,\n    ttl: cacheTTL,\n    maxSize: cacheMaxSize,\n  });\n  return new CacheController(cacheControllerAdapter, appId);\n}\n\nexport function getParseGraphQLController(\n  options: ParseServerOptions,\n  controllerDeps\n): ParseGraphQLController {\n  return new ParseGraphQLController({\n    mountGraphQL: options.mountGraphQL,\n    ...controllerDeps,\n  });\n}\n\nexport function getAnalyticsController(options: ParseServerOptions): AnalyticsController {\n  const { analyticsAdapter } = options;\n  const analyticsControllerAdapter = loadAdapter(analyticsAdapter, AnalyticsAdapter);\n  return new AnalyticsController(analyticsControllerAdapter);\n}\n\nexport function getLiveQueryController(options: ParseServerOptions): LiveQueryController {\n  return new LiveQueryController(options.liveQuery);\n}\n\nexport function getDatabaseController(\n  options: ParseServerOptions,\n  cacheController: CacheController\n): DatabaseController {\n  const {\n    databaseURI,\n    databaseOptions,\n    collectionPrefix,\n    schemaCacheTTL,\n    enableSingleSchemaCache,\n  } = options;\n  let { databaseAdapter } = options;\n  if (\n    (databaseOptions ||\n      (databaseURI && databaseURI !== defaults.databaseURI) ||\n      collectionPrefix !== defaults.collectionPrefix) &&\n    databaseAdapter\n  ) {\n    throw 'You cannot specify both a databaseAdapter and a databaseURI/databaseOptions/collectionPrefix.';\n  } else if (!databaseAdapter) {\n    databaseAdapter = getDatabaseAdapter(databaseURI, collectionPrefix, databaseOptions);\n  } else {\n    databaseAdapter = loadAdapter(databaseAdapter);\n  }\n  return new DatabaseController(\n    databaseAdapter,\n    new SchemaCache(cacheController, schemaCacheTTL, enableSingleSchemaCache)\n  );\n}\n\nexport function getHooksController(\n  options: ParseServerOptions,\n  databaseController: DatabaseController\n): HooksController {\n  const { appId, webhookKey } = options;\n  return new HooksController(appId, databaseController, webhookKey);\n}\n\ninterface PushControlling {\n  pushController: PushController;\n  hasPushScheduledSupport: boolean;\n  pushControllerQueue: PushQueue;\n  pushWorker: PushWorker;\n}\n\nexport function getPushController(options: ParseServerOptions): PushControlling {\n  const { scheduledPush, push } = options;\n\n  const pushOptions = Object.assign({}, push);\n  const pushQueueOptions = pushOptions.queueOptions || {};\n  if (pushOptions.queueOptions) {\n    delete pushOptions.queueOptions;\n  }\n\n  // Pass the push options too as it works with the default\n  const pushAdapter = loadAdapter(\n    pushOptions && pushOptions.adapter,\n    ParsePushAdapter,\n    pushOptions\n  );\n  // We pass the options and the base class for the adatper,\n  // Note that passing an instance would work too\n  const pushController = new PushController();\n  const hasPushSupport = !!(pushAdapter && push);\n  const hasPushScheduledSupport = hasPushSupport && scheduledPush === true;\n\n  const { disablePushWorker } = pushQueueOptions;\n\n  const pushControllerQueue = new PushQueue(pushQueueOptions);\n  let pushWorker;\n  if (!disablePushWorker) {\n    pushWorker = new PushWorker(pushAdapter, pushQueueOptions);\n  }\n  return {\n    pushController,\n    hasPushSupport,\n    hasPushScheduledSupport,\n    pushControllerQueue,\n    pushWorker,\n  };\n}\n\nexport function getAuthDataManager(options: ParseServerOptions) {\n  const { auth, enableAnonymousUsers } = options;\n  return authDataManager(auth, enableAnonymousUsers);\n}\n\nexport function getDatabaseAdapter(databaseURI, collectionPrefix, databaseOptions) {\n  let protocol;\n  try {\n    const parsedURI = url.parse(databaseURI);\n    protocol = parsedURI.protocol ? parsedURI.protocol.toLowerCase() : null;\n  } catch (e) {\n    /* */\n  }\n  switch (protocol) {\n    case 'postgres:':\n      return new PostgresStorageAdapter({\n        uri: databaseURI,\n        collectionPrefix,\n        databaseOptions,\n      });\n    default:\n      return new MongoStorageAdapter({\n        uri: databaseURI,\n        collectionPrefix,\n        mongoOptions: databaseOptions,\n      });\n  }\n}\n"],"file":"index.js"}