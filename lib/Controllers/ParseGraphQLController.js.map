{"version":3,"sources":["../../src/Controllers/ParseGraphQLController.js"],"names":["GraphQLConfigClassName","GraphQLConfigId","GraphQLConfigKey","ParseGraphQLController","constructor","params","databaseController","cacheController","isMounted","mountGraphQL","configCacheKey","getGraphQLConfig","_cachedConfig","_getCachedGraphQLConfig","results","find","objectId","limit","graphQLConfig","length","_putCachedGraphQLConfig","updateGraphQLConfig","_validateGraphQLConfig","update","Object","keys","reduce","acc","key","upsert","response","result","graphQL","get","put","errorMessages","push","isValidSimpleObject","enabledForClasses","disabledForClasses","classConfigs","invalidKeys","isValidStringArray","Array","isArray","forEach","classConfig","errorMessage","_validateClassConfig","className","Error","join","type","query","mutation","trim","inputFields","outputFields","constraintFields","sortFields","every","sortField","index","field","asc","desc","create","includes","findAlias","getAlias","destroy","createAlias","updateAlias","destroyAlias","array","some","s","obj","Date","Promise"],"mappings":"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","sourcesContent":["import requiredParameter from '../../lib/requiredParameter';\nimport DatabaseController from './DatabaseController';\nimport CacheController from './CacheController';\n\nconst GraphQLConfigClassName = '_GraphQLConfig';\nconst GraphQLConfigId = '1';\nconst GraphQLConfigKey = 'config';\n\nclass ParseGraphQLController {\n  databaseController: DatabaseController;\n  cacheController: CacheController;\n  isMounted: boolean;\n  configCacheKey: string;\n\n  constructor(\n    params: {\n      databaseController: DatabaseController,\n      cacheController: CacheController,\n    } = {}\n  ) {\n    this.databaseController =\n      params.databaseController ||\n      requiredParameter(\n        `ParseGraphQLController requires a \"databaseController\" to be instantiated.`\n      );\n    this.cacheController = params.cacheController;\n    this.isMounted = !!params.mountGraphQL;\n    this.configCacheKey = GraphQLConfigKey;\n  }\n\n  async getGraphQLConfig(): Promise<ParseGraphQLConfig> {\n    if (this.isMounted) {\n      const _cachedConfig = await this._getCachedGraphQLConfig();\n      if (_cachedConfig) {\n        return _cachedConfig;\n      }\n    }\n\n    const results = await this.databaseController.find(\n      GraphQLConfigClassName,\n      { objectId: GraphQLConfigId },\n      { limit: 1 }\n    );\n\n    let graphQLConfig;\n    if (results.length != 1) {\n      // If there is no config in the database - return empty config.\n      return {};\n    } else {\n      graphQLConfig = results[0][GraphQLConfigKey];\n    }\n\n    if (this.isMounted) {\n      this._putCachedGraphQLConfig(graphQLConfig);\n    }\n\n    return graphQLConfig;\n  }\n\n  async updateGraphQLConfig(graphQLConfig: ParseGraphQLConfig): Promise<ParseGraphQLConfig> {\n    // throws if invalid\n    this._validateGraphQLConfig(\n      graphQLConfig || requiredParameter('You must provide a graphQLConfig!')\n    );\n\n    // Transform in dot notation to make sure it works\n    const update = Object.keys(graphQLConfig).reduce(\n      (acc, key) => {\n        return {\n          [GraphQLConfigKey]: {\n            ...acc[GraphQLConfigKey],\n            [key]: graphQLConfig[key],\n          },\n        };\n      },\n      { [GraphQLConfigKey]: {} }\n    );\n\n    await this.databaseController.update(\n      GraphQLConfigClassName,\n      { objectId: GraphQLConfigId },\n      update,\n      { upsert: true }\n    );\n\n    if (this.isMounted) {\n      this._putCachedGraphQLConfig(graphQLConfig);\n    }\n\n    return { response: { result: true } };\n  }\n\n  _getCachedGraphQLConfig() {\n    return this.cacheController.graphQL.get(this.configCacheKey);\n  }\n\n  _putCachedGraphQLConfig(graphQLConfig: ParseGraphQLConfig) {\n    return this.cacheController.graphQL.put(this.configCacheKey, graphQLConfig, 60000);\n  }\n\n  _validateGraphQLConfig(graphQLConfig: ?ParseGraphQLConfig): void {\n    const errorMessages: string = [];\n    if (!graphQLConfig) {\n      errorMessages.push('cannot be undefined, null or empty');\n    } else if (!isValidSimpleObject(graphQLConfig)) {\n      errorMessages.push('must be a valid object');\n    } else {\n      const {\n        enabledForClasses = null,\n        disabledForClasses = null,\n        classConfigs = null,\n        ...invalidKeys\n      } = graphQLConfig;\n\n      if (Object.keys(invalidKeys).length) {\n        errorMessages.push(`encountered invalid keys: [${Object.keys(invalidKeys)}]`);\n      }\n      if (enabledForClasses !== null && !isValidStringArray(enabledForClasses)) {\n        errorMessages.push(`\"enabledForClasses\" is not a valid array`);\n      }\n      if (disabledForClasses !== null && !isValidStringArray(disabledForClasses)) {\n        errorMessages.push(`\"disabledForClasses\" is not a valid array`);\n      }\n      if (classConfigs !== null) {\n        if (Array.isArray(classConfigs)) {\n          classConfigs.forEach(classConfig => {\n            const errorMessage = this._validateClassConfig(classConfig);\n            if (errorMessage) {\n              errorMessages.push(\n                `classConfig:${classConfig.className} is invalid because ${errorMessage}`\n              );\n            }\n          });\n        } else {\n          errorMessages.push(`\"classConfigs\" is not a valid array`);\n        }\n      }\n    }\n    if (errorMessages.length) {\n      throw new Error(`Invalid graphQLConfig: ${errorMessages.join('; ')}`);\n    }\n  }\n\n  _validateClassConfig(classConfig: ?ParseGraphQLClassConfig): string | void {\n    if (!isValidSimpleObject(classConfig)) {\n      return 'it must be a valid object';\n    } else {\n      const { className, type = null, query = null, mutation = null, ...invalidKeys } = classConfig;\n      if (Object.keys(invalidKeys).length) {\n        return `\"invalidKeys\" [${Object.keys(invalidKeys)}] should not be present`;\n      }\n      if (typeof className !== 'string' || !className.trim().length) {\n        // TODO consider checking class exists in schema?\n        return `\"className\" must be a valid string`;\n      }\n      if (type !== null) {\n        if (!isValidSimpleObject(type)) {\n          return `\"type\" must be a valid object`;\n        }\n        const {\n          inputFields = null,\n          outputFields = null,\n          constraintFields = null,\n          sortFields = null,\n          ...invalidKeys\n        } = type;\n        if (Object.keys(invalidKeys).length) {\n          return `\"type\" contains invalid keys, [${Object.keys(invalidKeys)}]`;\n        } else if (outputFields !== null && !isValidStringArray(outputFields)) {\n          return `\"outputFields\" must be a valid string array`;\n        } else if (constraintFields !== null && !isValidStringArray(constraintFields)) {\n          return `\"constraintFields\" must be a valid string array`;\n        }\n        if (sortFields !== null) {\n          if (Array.isArray(sortFields)) {\n            let errorMessage;\n            sortFields.every((sortField, index) => {\n              if (!isValidSimpleObject(sortField)) {\n                errorMessage = `\"sortField\" at index ${index} is not a valid object`;\n                return false;\n              } else {\n                const { field, asc, desc, ...invalidKeys } = sortField;\n                if (Object.keys(invalidKeys).length) {\n                  errorMessage = `\"sortField\" at index ${index} contains invalid keys, [${Object.keys(\n                    invalidKeys\n                  )}]`;\n                  return false;\n                } else {\n                  if (typeof field !== 'string' || field.trim().length === 0) {\n                    errorMessage = `\"sortField\" at index ${index} did not provide the \"field\" as a string`;\n                    return false;\n                  } else if (typeof asc !== 'boolean' || typeof desc !== 'boolean') {\n                    errorMessage = `\"sortField\" at index ${index} did not provide \"asc\" or \"desc\" as booleans`;\n                    return false;\n                  }\n                }\n              }\n              return true;\n            });\n            if (errorMessage) {\n              return errorMessage;\n            }\n          } else {\n            return `\"sortFields\" must be a valid array.`;\n          }\n        }\n        if (inputFields !== null) {\n          if (isValidSimpleObject(inputFields)) {\n            const { create = null, update = null, ...invalidKeys } = inputFields;\n            if (Object.keys(invalidKeys).length) {\n              return `\"inputFields\" contains invalid keys: [${Object.keys(invalidKeys)}]`;\n            } else {\n              if (update !== null && !isValidStringArray(update)) {\n                return `\"inputFields.update\" must be a valid string array`;\n              } else if (create !== null) {\n                if (!isValidStringArray(create)) {\n                  return `\"inputFields.create\" must be a valid string array`;\n                } else if (className === '_User') {\n                  if (!create.includes('username') || !create.includes('password')) {\n                    return `\"inputFields.create\" must include required fields, username and password`;\n                  }\n                }\n              }\n            }\n          } else {\n            return `\"inputFields\" must be a valid object`;\n          }\n        }\n      }\n      if (query !== null) {\n        if (isValidSimpleObject(query)) {\n          const {\n            find = null,\n            get = null,\n            findAlias = null,\n            getAlias = null,\n            ...invalidKeys\n          } = query;\n          if (Object.keys(invalidKeys).length) {\n            return `\"query\" contains invalid keys, [${Object.keys(invalidKeys)}]`;\n          } else if (find !== null && typeof find !== 'boolean') {\n            return `\"query.find\" must be a boolean`;\n          } else if (get !== null && typeof get !== 'boolean') {\n            return `\"query.get\" must be a boolean`;\n          } else if (findAlias !== null && typeof findAlias !== 'string') {\n            return `\"query.findAlias\" must be a string`;\n          } else if (getAlias !== null && typeof getAlias !== 'string') {\n            return `\"query.getAlias\" must be a string`;\n          }\n        } else {\n          return `\"query\" must be a valid object`;\n        }\n      }\n      if (mutation !== null) {\n        if (isValidSimpleObject(mutation)) {\n          const {\n            create = null,\n            update = null,\n            destroy = null,\n            createAlias = null,\n            updateAlias = null,\n            destroyAlias = null,\n            ...invalidKeys\n          } = mutation;\n          if (Object.keys(invalidKeys).length) {\n            return `\"mutation\" contains invalid keys, [${Object.keys(invalidKeys)}]`;\n          }\n          if (create !== null && typeof create !== 'boolean') {\n            return `\"mutation.create\" must be a boolean`;\n          }\n          if (update !== null && typeof update !== 'boolean') {\n            return `\"mutation.update\" must be a boolean`;\n          }\n          if (destroy !== null && typeof destroy !== 'boolean') {\n            return `\"mutation.destroy\" must be a boolean`;\n          }\n          if (createAlias !== null && typeof createAlias !== 'string') {\n            return `\"mutation.createAlias\" must be a string`;\n          }\n          if (updateAlias !== null && typeof updateAlias !== 'string') {\n            return `\"mutation.updateAlias\" must be a string`;\n          }\n          if (destroyAlias !== null && typeof destroyAlias !== 'string') {\n            return `\"mutation.destroyAlias\" must be a string`;\n          }\n        } else {\n          return `\"mutation\" must be a valid object`;\n        }\n      }\n    }\n  }\n}\n\nconst isValidStringArray = function (array): boolean {\n  return Array.isArray(array)\n    ? !array.some(s => typeof s !== 'string' || s.trim().length < 1)\n    : false;\n};\n/**\n * Ensures the obj is a simple JSON/{}\n * object, i.e. not an array, null, date\n * etc.\n */\nconst isValidSimpleObject = function (obj): boolean {\n  return (\n    typeof obj === 'object' &&\n    !Array.isArray(obj) &&\n    obj !== null &&\n    obj instanceof Date !== true &&\n    obj instanceof Promise !== true\n  );\n};\n\nexport interface ParseGraphQLConfig {\n  enabledForClasses?: string[];\n  disabledForClasses?: string[];\n  classConfigs?: ParseGraphQLClassConfig[];\n}\n\nexport interface ParseGraphQLClassConfig {\n  className: string;\n  /* The `type` object contains options for how the class types are generated */\n  type: ?{\n    /* Fields that are allowed when creating or updating an object. */\n    inputFields: ?{\n      /* Leave blank to allow all available fields in the schema. */\n      create?: string[],\n      update?: string[],\n    },\n    /* Fields on the edges that can be resolved from a query, i.e. the Result Type. */\n    outputFields: ?(string[]),\n    /* Fields by which a query can be filtered, i.e. the `where` object. */\n    constraintFields: ?(string[]),\n    /* Fields by which a query can be sorted; */\n    sortFields: ?({\n      field: string,\n      asc: boolean,\n      desc: boolean,\n    }[]),\n  };\n  /* The `query` object contains options for which class queries are generated */\n  query: ?{\n    get: ?boolean,\n    find: ?boolean,\n    findAlias: ?String,\n    getAlias: ?String,\n  };\n  /* The `mutation` object contains options for which class mutations are generated */\n  mutation: ?{\n    create: ?boolean,\n    update: ?boolean,\n    // delete is a reserved key word in js\n    destroy: ?boolean,\n    createAlias: ?String,\n    updateAlias: ?String,\n    destroyAlias: ?String,\n  };\n}\n\nexport default ParseGraphQLController;\nexport { GraphQLConfigClassName, GraphQLConfigId, GraphQLConfigKey };\n"],"file":"ParseGraphQLController.js"}