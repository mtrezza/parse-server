{"version":3,"sources":["../src/AccountLockout.js"],"names":["AccountLockout","constructor","user","config","_user","_config","_setFailedLoginCount","value","query","username","updateFields","_failed_login_count","database","update","_isFailedLoginCountSet","$exists","find","then","users","Array","isArray","length","_initFailedLoginCount","failedLoginCountIsSet","_incrementFailedLoginCount","__op","amount","_setLockoutExpiration","$gte","accountLockout","threshold","now","Date","_account_lockout_expires_at","Parse","_encode","getTime","duration","catch","err","code","message","_notLocked","$gt","Error","OBJECT_NOT_FOUND","_handleFailedLoginAttempt","handleLoginAttempt","loginSuccessful","Promise","resolve","unlockAccount","unlockOnPasswordReset"],"mappings":"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","sourcesContent":["// This class handles the Account Lockout Policy settings.\nimport Parse from 'parse/node';\n\nexport class AccountLockout {\n  constructor(user, config) {\n    this._user = user;\n    this._config = config;\n  }\n\n  /**\n   * set _failed_login_count to value\n   */\n  _setFailedLoginCount(value) {\n    const query = {\n      username: this._user.username,\n    };\n\n    const updateFields = {\n      _failed_login_count: value,\n    };\n\n    return this._config.database.update('_User', query, updateFields);\n  }\n\n  /**\n   * check if the _failed_login_count field has been set\n   */\n  _isFailedLoginCountSet() {\n    const query = {\n      username: this._user.username,\n      _failed_login_count: { $exists: true },\n    };\n\n    return this._config.database.find('_User', query).then(users => {\n      if (Array.isArray(users) && users.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * if _failed_login_count is NOT set then set it to 0\n   * else do nothing\n   */\n  _initFailedLoginCount() {\n    return this._isFailedLoginCountSet().then(failedLoginCountIsSet => {\n      if (!failedLoginCountIsSet) {\n        return this._setFailedLoginCount(0);\n      }\n    });\n  }\n\n  /**\n   * increment _failed_login_count by 1\n   */\n  _incrementFailedLoginCount() {\n    const query = {\n      username: this._user.username,\n    };\n\n    const updateFields = {\n      _failed_login_count: { __op: 'Increment', amount: 1 },\n    };\n\n    return this._config.database.update('_User', query, updateFields);\n  }\n\n  /**\n   * if the failed login count is greater than the threshold\n   * then sets lockout expiration to 'currenttime + accountPolicy.duration', i.e., account is locked out for the next 'accountPolicy.duration' minutes\n   * else do nothing\n   */\n  _setLockoutExpiration() {\n    const query = {\n      username: this._user.username,\n      _failed_login_count: { $gte: this._config.accountLockout.threshold },\n    };\n\n    const now = new Date();\n\n    const updateFields = {\n      _account_lockout_expires_at: Parse._encode(\n        new Date(now.getTime() + this._config.accountLockout.duration * 60 * 1000)\n      ),\n    };\n\n    return this._config.database.update('_User', query, updateFields).catch(err => {\n      if (\n        err &&\n        err.code &&\n        err.message &&\n        err.code === 101 &&\n        err.message === 'Object not found.'\n      ) {\n        return; // nothing to update so we are good\n      } else {\n        throw err; // unknown error\n      }\n    });\n  }\n\n  /**\n   * if _account_lockout_expires_at > current_time and _failed_login_count > threshold\n   *   reject with account locked error\n   * else\n   *   resolve\n   */\n  _notLocked() {\n    const query = {\n      username: this._user.username,\n      _account_lockout_expires_at: { $gt: Parse._encode(new Date()) },\n      _failed_login_count: { $gte: this._config.accountLockout.threshold },\n    };\n\n    return this._config.database.find('_User', query).then(users => {\n      if (Array.isArray(users) && users.length > 0) {\n        throw new Parse.Error(\n          Parse.Error.OBJECT_NOT_FOUND,\n          'Your account is locked due to multiple failed login attempts. Please try again after ' +\n            this._config.accountLockout.duration +\n            ' minute(s)'\n        );\n      }\n    });\n  }\n\n  /**\n   * set and/or increment _failed_login_count\n   * if _failed_login_count > threshold\n   *   set the _account_lockout_expires_at to current_time + accountPolicy.duration\n   * else\n   *   do nothing\n   */\n  _handleFailedLoginAttempt() {\n    return this._initFailedLoginCount()\n      .then(() => {\n        return this._incrementFailedLoginCount();\n      })\n      .then(() => {\n        return this._setLockoutExpiration();\n      });\n  }\n\n  /**\n   * handle login attempt if the Account Lockout Policy is enabled\n   */\n  handleLoginAttempt(loginSuccessful) {\n    if (!this._config.accountLockout) {\n      return Promise.resolve();\n    }\n    return this._notLocked().then(() => {\n      if (loginSuccessful) {\n        return this._setFailedLoginCount(0);\n      } else {\n        return this._handleFailedLoginAttempt();\n      }\n    });\n  }\n\n  /**\n   * Removes the account lockout.\n   */\n  unlockAccount() {\n    if (!this._config.accountLockout || !this._config.accountLockout.unlockOnPasswordReset) {\n      return Promise.resolve();\n    }\n    return this._config.database.update(\n      '_User',\n      { username: this._user.username },\n      {\n        _failed_login_count: { __op: 'Delete' },\n        _account_lockout_expires_at: { __op: 'Delete' },\n      }\n    );\n  }\n}\n\nexport default AccountLockout;\n"],"file":"AccountLockout.js"}