{"version":3,"sources":["../../src/cloud-code/Parse.Cloud.js"],"names":["Config","require","isParseObjectConstructor","object","Object","prototype","hasOwnProperty","call","getClassName","parseClass","className","ParseCloud","define","functionName","handler","validationHandler","triggers","addFunction","Parse","applicationId","job","addJob","beforeSave","addTrigger","Types","beforeDelete","beforeLogin","arguments","afterLogin","afterLogout","afterSave","afterDelete","beforeFind","afterFind","beforeSaveFile","addFileTrigger","afterSaveFile","beforeDeleteFile","afterDeleteFile","beforeConnect","addConnectTrigger","sendEmail","data","config","get","emailAdapter","userController","adapter","loggerController","error","sendMail","beforeSubscribe","onLiveQueryEvent","addLiveQueryEventHandler","afterLiveQueryEvent","afterEvent","_removeAllHooks","_unregisterAll","useMasterKey","console","warn","httpRequest","module","exports"],"mappings":"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":["import { Parse } from 'parse/node';\nimport * as triggers from '../triggers';\nconst Config = require('../Config');\n\nfunction isParseObjectConstructor(object) {\n  return typeof object === 'function' && Object.prototype.hasOwnProperty.call(object, 'className');\n}\n\nfunction getClassName(parseClass) {\n  if (parseClass && parseClass.className) {\n    return parseClass.className;\n  }\n  return parseClass;\n}\n\n/** @namespace\n * @name Parse\n * @description The Parse SDK.\n *  see [api docs](https://docs.parseplatform.org/js/api) and [guide](https://docs.parseplatform.org/js/guide)\n */\n\n/** @namespace\n * @name Parse.Cloud\n * @memberof Parse\n * @description The Parse Cloud Code SDK.\n */\n\nvar ParseCloud = {};\n/**\n * Defines a Cloud Function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.define('functionName', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.define('functionName', (request) => {\n *   // code here\n * }, { ...validationObject });\n * ```\n *\n * @static\n * @memberof Parse.Cloud\n * @param {String} name The name of the Cloud Function\n * @param {Function} data The Cloud Function to register. This function can be an async function and should take one parameter a {@link Parse.Cloud.FunctionRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FunctionRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.define = function (functionName, handler, validationHandler) {\n  triggers.addFunction(functionName, handler, validationHandler, Parse.applicationId);\n};\n\n/**\n * Defines a Background Job.\n *\n * **Available in Cloud Code only.**\n *\n * @method job\n * @name Parse.Cloud.job\n * @param {String} name The name of the Background Job\n * @param {Function} func The Background Job to register. This function can be async should take a single parameters a {@link Parse.Cloud.JobRequest}\n *\n */\nParseCloud.job = function (functionName, handler) {\n  triggers.addJob(functionName, handler, Parse.applicationId);\n};\n\n/**\n *\n * Registers a before save function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeSave for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n *\n * ```\n * Parse.Cloud.beforeSave('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeSave(Parse.User, (request) => {\n *   // code here\n * }, { ...validationObject })\n * ```\n *\n * @method beforeSave\n * @name Parse.Cloud.beforeSave\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after save function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a save. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeSave = function (parseClass, handler, validationHandler) {\n  var className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.beforeSave,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before delete function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeDelete for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.beforeDelete('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeDelete(Parse.User, (request) => {\n *   // code here\n * }, { ...validationObject })\n *```\n *\n * @method beforeDelete\n * @name Parse.Cloud.beforeDelete\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before delete function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a delete. This function can be async and should take one parameter, a {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeDelete = function (parseClass, handler, validationHandler) {\n  var className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.beforeDelete,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n *\n * Registers the before login function.\n *\n * **Available in Cloud Code only.**\n *\n * This function provides further control\n * in validating a login attempt. Specifically,\n * it is triggered after a user enters\n * correct credentials (or other valid authData),\n * but prior to a session being generated.\n *\n * ```\n * Parse.Cloud.beforeLogin((request) => {\n *   // code here\n * })\n *\n * ```\n *\n * @method beforeLogin\n * @name Parse.Cloud.beforeLogin\n * @param {Function} func The function to run before a login. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n */\nParseCloud.beforeLogin = function (handler) {\n  let className = '_User';\n  if (typeof handler === 'string' || isParseObjectConstructor(handler)) {\n    // validation will occur downstream, this is to maintain internal\n    // code consistency with the other hook types.\n    className = getClassName(handler);\n    handler = arguments[1];\n  }\n  triggers.addTrigger(triggers.Types.beforeLogin, className, handler, Parse.applicationId);\n};\n\n/**\n *\n * Registers the after login function.\n *\n * **Available in Cloud Code only.**\n *\n * This function is triggered after a user logs in successfully,\n * and after a _Session object has been created.\n *\n * ```\n * Parse.Cloud.afterLogin((request) => {\n *   // code here\n * });\n * ```\n *\n * @method afterLogin\n * @name Parse.Cloud.afterLogin\n * @param {Function} func The function to run after a login. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n */\nParseCloud.afterLogin = function (handler) {\n  let className = '_User';\n  if (typeof handler === 'string' || isParseObjectConstructor(handler)) {\n    // validation will occur downstream, this is to maintain internal\n    // code consistency with the other hook types.\n    className = getClassName(handler);\n    handler = arguments[1];\n  }\n  triggers.addTrigger(triggers.Types.afterLogin, className, handler, Parse.applicationId);\n};\n\n/**\n *\n * Registers the after logout function.\n *\n * **Available in Cloud Code only.**\n *\n * This function is triggered after a user logs out.\n *\n * ```\n * Parse.Cloud.afterLogout((request) => {\n *   // code here\n * });\n * ```\n *\n * @method afterLogout\n * @name Parse.Cloud.afterLogout\n * @param {Function} func The function to run after a logout. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n */\nParseCloud.afterLogout = function (handler) {\n  let className = '_Session';\n  if (typeof handler === 'string' || isParseObjectConstructor(handler)) {\n    // validation will occur downstream, this is to maintain internal\n    // code consistency with the other hook types.\n    className = getClassName(handler);\n    handler = arguments[1];\n  }\n  triggers.addTrigger(triggers.Types.afterLogout, className, handler, Parse.applicationId);\n};\n\n/**\n * Registers an after save function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use afterSave for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n *\n * ```\n * Parse.Cloud.afterSave('MyCustomClass', async function(request) {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterSave(Parse.User, async function(request) {\n *   // code here\n * }, { ...validationObject });\n * ```\n *\n * @method afterSave\n * @name Parse.Cloud.afterSave\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after save function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run after a save. This function can be an async function and should take just one parameter, {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterSave = function (parseClass, handler, validationHandler) {\n  var className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.afterSave,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after delete function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use afterDelete for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.afterDelete('MyCustomClass', async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterDelete(Parse.User, async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterDelete\n * @name Parse.Cloud.afterDelete\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after delete function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run after a delete. This function can be async and should take just one parameter, {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterDelete = function (parseClass, handler, validationHandler) {\n  var className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.afterDelete,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before find function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeFind for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.beforeFind('MyCustomClass', async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeFind(Parse.User, async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeFind\n * @name Parse.Cloud.beforeFind\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before find function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a find. This function can be async and should take just one parameter, {@link Parse.Cloud.BeforeFindRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.BeforeFindRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeFind = function (parseClass, handler, validationHandler) {\n  var className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.beforeFind,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after find function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use afterFind for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.afterFind('MyCustomClass', async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterFind(Parse.User, async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterFind\n * @name Parse.Cloud.afterFind\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after find function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a find. This function can be async and should take just one parameter, {@link Parse.Cloud.AfterFindRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.AfterFindRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterFind = function (parseClass, handler, validationHandler) {\n  const className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.afterFind,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before save file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.beforeSaveFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeSaveFile(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeSaveFile\n * @name Parse.Cloud.beforeSaveFile\n * @param {Function} func The function to run before saving a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeSaveFile = function (handler, validationHandler) {\n  triggers.addFileTrigger(\n    triggers.Types.beforeSaveFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after save file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.afterSaveFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterSaveFile(async (request) => {\n *  // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterSaveFile\n * @name Parse.Cloud.afterSaveFile\n * @param {Function} func The function to run after saving a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterSaveFile = function (handler, validationHandler) {\n  triggers.addFileTrigger(\n    triggers.Types.afterSaveFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before delete file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.beforeDeleteFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeDeleteFile(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeDeleteFile\n * @name Parse.Cloud.beforeDeleteFile\n * @param {Function} func The function to run before deleting a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeDeleteFile = function (handler, validationHandler) {\n  triggers.addFileTrigger(\n    triggers.Types.beforeDeleteFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after delete file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.afterDeleteFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterDeleteFile(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterDeleteFile\n * @name Parse.Cloud.afterDeleteFile\n * @param {Function} func The function to after before deleting a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterDeleteFile = function (handler, validationHandler) {\n  triggers.addFileTrigger(\n    triggers.Types.afterDeleteFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before live query server connect function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.beforeConnect(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeConnect(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeConnect\n * @name Parse.Cloud.beforeConnect\n * @param {Function} func The function to before connection is made. This function can be async and should take just one parameter, {@link Parse.Cloud.ConnectTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.ConnectTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeConnect = function (handler, validationHandler) {\n  triggers.addConnectTrigger(\n    triggers.Types.beforeConnect,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Sends an email through the Parse Server mail adapter.\n *\n * **Available in Cloud Code only.**\n * **Requires a mail adapter to be configured for Parse Server.**\n *\n * ```\n * Parse.Cloud.sendEmail({\n *   from: 'Example <test@example.com>',\n *   to: 'contact@example.com',\n *   subject: 'Test email',\n *   text: 'This email is a test.'\n * });\n *```\n *\n * @method sendEmail\n * @name Parse.Cloud.sendEmail\n * @param {Object} data The object of the mail data to send.\n */\nParseCloud.sendEmail = function (data) {\n  const config = Config.get(Parse.applicationId);\n  const emailAdapter = config.userController.adapter;\n  if (!emailAdapter) {\n    config.loggerController.error(\n      'Failed to send email because no mail adapter is configured for Parse Server.'\n    );\n    return;\n  }\n  return emailAdapter.sendMail(data);\n};\n\n/**\n * Registers a before live query subscription function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeSubscribe for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.beforeSubscribe('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeSubscribe(Parse.User, (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeSubscribe\n * @name Parse.Cloud.beforeSubscribe\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before subscription function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a subscription. This function can be async and should take one parameter, a {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeSubscribe = function (parseClass, handler, validationHandler) {\n  var className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.beforeSubscribe,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\nParseCloud.onLiveQueryEvent = function (handler) {\n  triggers.addLiveQueryEventHandler(handler, Parse.applicationId);\n};\n\n/**\n * Registers an after live query server event function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.afterLiveQueryEvent('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterLiveQueryEvent('MyCustomClass', (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterLiveQueryEvent\n * @name Parse.Cloud.afterLiveQueryEvent\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after live query event function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run after a live query event. This function can be async and should take one parameter, a {@link Parse.Cloud.LiveQueryEventTrigger}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.LiveQueryEventTrigger}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterLiveQueryEvent = function (parseClass, handler, validationHandler) {\n  const className = getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.afterEvent,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\nParseCloud._removeAllHooks = () => {\n  triggers._unregisterAll();\n};\n\nParseCloud.useMasterKey = () => {\n  // eslint-disable-next-line\n  console.warn(\n    'Parse.Cloud.useMasterKey is deprecated (and has no effect anymore) on parse-server, please refer to the cloud code migration notes: http://docs.parseplatform.org/parse-server/guide/#master-key-must-be-passed-explicitly'\n  );\n};\n\nParseCloud.httpRequest = require('./httpRequest');\n\nmodule.exports = ParseCloud;\n\n/**\n * @interface Parse.Cloud.TriggerRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.Object} object The object triggering the hook.\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)\n * @property {Object} log The current logger inside Parse Server.\n * @property {Parse.Object} original If set, the object, as currently stored.\n */\n\n/**\n * @interface Parse.Cloud.FileTriggerRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.File} file The file that triggered the hook.\n * @property {Integer} fileSize The size of the file in bytes.\n * @property {Integer} contentLength The value from Content-Length header\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSaveFile`, `afterSaveFile`)\n * @property {Object} log The current logger inside Parse Server.\n */\n\n/**\n * @interface Parse.Cloud.ConnectTriggerRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} useMasterKey If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Integer} clients The number of clients connected.\n * @property {Integer} subscriptions The number of subscriptions connected.\n * @property {String} sessionToken If set, the session of the user that made the request.\n */\n\n/**\n * @interface Parse.Cloud.LiveQueryEventTrigger\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} useMasterKey If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {String} sessionToken If set, the session of the user that made the request.\n * @property {String} event The live query event that triggered the request.\n * @property {Parse.Object} object The object triggering the hook.\n * @property {Parse.Object} original If set, the object, as currently stored.\n * @property {Integer} clients The number of clients connected.\n * @property {Integer} subscriptions The number of subscriptions connected.\n * @property {Boolean} sendEvent If the LiveQuery event should be sent to the client. Set to false to prevent LiveQuery from pushing to the client.\n */\n\n/**\n * @interface Parse.Cloud.BeforeFindRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.Query} query The query triggering the hook.\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)\n * @property {Object} log The current logger inside Parse Server.\n * @property {Boolean} isGet wether the query a `get` or a `find`\n */\n\n/**\n * @interface Parse.Cloud.AfterFindRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.Query} query The query triggering the hook.\n * @property {Array<Parse.Object>} results The results the query yielded.\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)\n * @property {Object} log The current logger inside Parse Server.\n */\n\n/**\n * @interface Parse.Cloud.FunctionRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Object} params The params passed to the cloud function.\n */\n\n/**\n * @interface Parse.Cloud.JobRequest\n * @property {Object} params The params passed to the background job.\n * @property {function} message If message is called with a string argument, will update the current message to be stored in the job status.\n */\n\n/**\n * @interface Parse.Cloud.ValidatorObject\n * @property {Boolean} requireUser whether the cloud trigger requires a user.\n * @property {Boolean} requireMaster whether the cloud trigger requires a master key.\n * @property {Boolean} validateMasterKey whether the validator should run if masterKey is provided. Defaults to false.\n * @property {Boolean} skipWithMasterKey whether the cloud code function should be ignored using a masterKey.\n *\n * @property {Array<String>|Object} requireUserKeys If set, keys required on request.user to make the request.\n * @property {String} requireUserKeys.field If requireUserKeys is an object, name of field to validate on request user\n * @property {Array|function|Any} requireUserKeys.field.options array of options that the field can be, function to validate field, or single value. Throw an error if value is invalid.\n * @property {String} requireUserKeys.field.error custom error message if field is invalid.\n *\n * @property {Object|Array<String>} fields if an array of strings, validator will look for keys in request.params, and throw if not provided. If Object, fields to validate. If the trigger is a cloud function, `request.params` will be validated, otherwise `request.object`.\n * @property {String} fields.field name of field to validate.\n * @property {String} fields.field.type expected type of data for field.\n * @property {Boolean} fields.field.constant whether the field can be modified on the object.\n * @property {Any} fields.field.default default value if field is `null`, or initial value `constant` is `true`.\n * @property {Array|function|Any} fields.field.options array of options that the field can be, function to validate field, or single value. Throw an error if value is invalid.\n * @property {String} fields.field.error custom error message if field is invalid.\n */\n"],"file":"Parse.Cloud.js"}