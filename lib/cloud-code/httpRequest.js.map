{"version":3,"sources":["../../src/cloud-code/httpRequest.js"],"names":["clients","http","https","makeCallback","resolve","reject","response","chunks","on","chunk","push","body","Buffer","concat","httpResponse","HTTPResponse","status","encodeBody","headers","contentTypeKeys","Object","keys","filter","key","match","length","querystring","stringify","log","error","contentType","JSON","module","exports","httpRequest","options","url","e","Promise","assign","params","qs","parse","client","protocol","requestOptions","method","port","Number","path","pathname","hostname","encoding","followRedirects","forEach","search","query","auth","agent","req","request","write","end"],"mappings":"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","sourcesContent":["import HTTPResponse from './HTTPResponse';\nimport querystring from 'querystring';\nimport log from '../logger';\nimport { http, https } from 'follow-redirects';\nimport { parse } from 'url';\n\nconst clients = {\n  'http:': http,\n  'https:': https,\n};\n\nfunction makeCallback(resolve, reject) {\n  return function (response) {\n    const chunks = [];\n    response.on('data', chunk => {\n      chunks.push(chunk);\n    });\n    response.on('end', () => {\n      const body = Buffer.concat(chunks);\n      const httpResponse = new HTTPResponse(response, body);\n\n      // Consider <200 && >= 400 as errors\n      if (httpResponse.status < 200 || httpResponse.status >= 400) {\n        return reject(httpResponse);\n      } else {\n        return resolve(httpResponse);\n      }\n    });\n    response.on('error', reject);\n  };\n}\n\nconst encodeBody = function ({ body, headers = {} }) {\n  if (typeof body !== 'object') {\n    return { body, headers };\n  }\n  var contentTypeKeys = Object.keys(headers).filter(key => {\n    return key.match(/content-type/i) != null;\n  });\n\n  if (contentTypeKeys.length == 0) {\n    // no content type\n    //  As per https://parse.com/docs/cloudcode/guide#cloud-code-advanced-sending-a-post-request the default encoding is supposedly x-www-form-urlencoded\n\n    body = querystring.stringify(body);\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  } else {\n    /* istanbul ignore next */\n    if (contentTypeKeys.length > 1) {\n      log.error('Parse.Cloud.httpRequest', 'multiple content-type headers are set.');\n    }\n    // There maybe many, we'll just take the 1st one\n    var contentType = contentTypeKeys[0];\n    if (headers[contentType].match(/application\\/json/i)) {\n      body = JSON.stringify(body);\n    } else if (headers[contentType].match(/application\\/x-www-form-urlencoded/i)) {\n      body = querystring.stringify(body);\n    }\n  }\n  return { body, headers };\n};\n\n/**\n * Makes an HTTP Request.\n *\n * **Available in Cloud Code only.**\n *\n * By default, Parse.Cloud.httpRequest does not follow redirects caused by HTTP 3xx response codes. You can use the followRedirects option in the {@link Parse.Cloud.HTTPOptions} object to change this behavior.\n *\n * Sample request:\n * ```\n * Parse.Cloud.httpRequest({\n *   url: 'http://www.parse.com/'\n * }).then(function(httpResponse) {\n *   // success\n *   console.log(httpResponse.text);\n * },function(httpResponse) {\n *   // error\n *   console.error('Request failed with response code ' + httpResponse.status);\n * });\n * ```\n *\n * @method httpRequest\n * @name Parse.Cloud.httpRequest\n * @param {Parse.Cloud.HTTPOptions} options The Parse.Cloud.HTTPOptions object that makes the request.\n * @return {Promise<Parse.Cloud.HTTPResponse>} A promise that will be resolved with a {@link Parse.Cloud.HTTPResponse} object when the request completes.\n */\nmodule.exports = function httpRequest(options) {\n  let url;\n  try {\n    url = parse(options.url);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  options = Object.assign(options, encodeBody(options));\n  // support params options\n  if (typeof options.params === 'object') {\n    options.qs = options.params;\n  } else if (typeof options.params === 'string') {\n    options.qs = querystring.parse(options.params);\n  }\n  const client = clients[url.protocol];\n  if (!client) {\n    return Promise.reject(`Unsupported protocol ${url.protocol}`);\n  }\n  const requestOptions = {\n    method: options.method,\n    port: Number(url.port),\n    path: url.pathname,\n    hostname: url.hostname,\n    headers: options.headers,\n    encoding: null,\n    followRedirects: options.followRedirects === true,\n  };\n  if (requestOptions.headers) {\n    Object.keys(requestOptions.headers).forEach(key => {\n      if (typeof requestOptions.headers[key] === 'undefined') {\n        delete requestOptions.headers[key];\n      }\n    });\n  }\n  if (url.search) {\n    options.qs = Object.assign({}, options.qs, querystring.parse(url.query));\n  }\n  if (url.auth) {\n    requestOptions.auth = url.auth;\n  }\n  if (options.qs) {\n    requestOptions.path += `?${querystring.stringify(options.qs)}`;\n  }\n  if (options.agent) {\n    requestOptions.agent = options.agent;\n  }\n  return new Promise((resolve, reject) => {\n    const req = client.request(requestOptions, makeCallback(resolve, reject, options));\n    if (options.body) {\n      req.write(options.body);\n    }\n    req.on('error', error => {\n      reject(error);\n    });\n    req.end();\n  });\n};\n\n/**\n * @typedef Parse.Cloud.HTTPOptions\n * @property {String|Object} body The body of the request. If it is a JSON object, then the Content-Type set in the headers must be application/x-www-form-urlencoded or application/json. You can also set this to a {@link Buffer} object to send raw bytes. If you use a Buffer, you should also set the Content-Type header explicitly to describe what these bytes represent.\n * @property {function} error The function that is called when the request fails. It will be passed a Parse.Cloud.HTTPResponse object.\n * @property {Boolean} followRedirects Whether to follow redirects caused by HTTP 3xx responses. Defaults to false.\n * @property {Object} headers The headers for the request.\n * @property {String} method The method of the request. GET, POST, PUT, DELETE, HEAD, and OPTIONS are supported. Will default to GET if not specified.\n * @property {String|Object} params The query portion of the url. You can pass a JSON object of key value pairs like params: {q : 'Sean Plott'} or a raw string like params:q=Sean Plott.\n * @property {function} success The function that is called when the request successfully completes. It will be passed a Parse.Cloud.HTTPResponse object.\n * @property {string} url The url to send the request to.\n */\n\nmodule.exports.encodeBody = encodeBody;\n"],"file":"httpRequest.js"}