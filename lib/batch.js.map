{"version":3,"sources":["../src/batch.js"],"names":["Parse","require","url","path","batchPath","mountOnto","router","route","req","handleBatch","parseURL","URL","parse","undefined","makeBatchRoutingPathFunction","originalUrl","serverURL","publicServerURL","apiPrefixLength","length","apiPrefix","slice","makeRoutablePath","requestPath","Error","INVALID_JSON","posix","join","localPath","publicPath","startsWithLocal","startsWith","startsWithPublic","pathLengthToUse","Math","max","newPath","Array","isArray","body","requests","endsWith","config","initialPromise","Promise","resolve","transaction","database","createTransactionalSession","then","promises","map","restRequest","routablePath","request","auth","info","tryRouteRequest","method","response","success","error","code","message","all","results","find","result","abortTransactionalSession","reject","commitTransactionalSession","module","exports"],"mappings":"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","sourcesContent":["const Parse = require('parse/node').Parse;\nconst url = require('url');\nconst path = require('path');\n// These methods handle batch requests.\nconst batchPath = '/batch';\n\n// Mounts a batch-handler onto a PromiseRouter.\nfunction mountOnto(router) {\n  router.route('POST', batchPath, req => {\n    return handleBatch(router, req);\n  });\n}\n\nfunction parseURL(URL) {\n  if (typeof URL === 'string') {\n    return url.parse(URL);\n  }\n  return undefined;\n}\n\nfunction makeBatchRoutingPathFunction(originalUrl, serverURL, publicServerURL) {\n  serverURL = serverURL ? parseURL(serverURL) : undefined;\n  publicServerURL = publicServerURL ? parseURL(publicServerURL) : undefined;\n\n  const apiPrefixLength = originalUrl.length - batchPath.length;\n  let apiPrefix = originalUrl.slice(0, apiPrefixLength);\n\n  const makeRoutablePath = function (requestPath) {\n    // The routablePath is the path minus the api prefix\n    if (requestPath.slice(0, apiPrefix.length) != apiPrefix) {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'cannot route batch path ' + requestPath);\n    }\n    return path.posix.join('/', requestPath.slice(apiPrefix.length));\n  };\n\n  if (serverURL && publicServerURL && serverURL.path != publicServerURL.path) {\n    const localPath = serverURL.path;\n    const publicPath = publicServerURL.path;\n\n    // Override the api prefix\n    apiPrefix = localPath;\n    return function (requestPath) {\n      // Figure out which server url was used by figuring out which\n      // path more closely matches requestPath\n      const startsWithLocal = requestPath.startsWith(localPath);\n      const startsWithPublic = requestPath.startsWith(publicPath);\n      const pathLengthToUse =\n        startsWithLocal && startsWithPublic\n          ? Math.max(localPath.length, publicPath.length)\n          : startsWithLocal\n            ? localPath.length\n            : publicPath.length;\n\n      const newPath = path.posix.join('/', localPath, '/', requestPath.slice(pathLengthToUse));\n\n      // Use the method for local routing\n      return makeRoutablePath(newPath);\n    };\n  }\n\n  return makeRoutablePath;\n}\n\n// Returns a promise for a {response} object.\n// TODO: pass along auth correctly\nfunction handleBatch(router, req) {\n  if (!Array.isArray(req.body.requests)) {\n    throw new Parse.Error(Parse.Error.INVALID_JSON, 'requests must be an array');\n  }\n\n  // The batch paths are all from the root of our domain.\n  // That means they include the API prefix, that the API is mounted\n  // to. However, our promise router does not route the api prefix. So\n  // we need to figure out the API prefix, so that we can strip it\n  // from all the subrequests.\n  if (!req.originalUrl.endsWith(batchPath)) {\n    throw 'internal routing problem - expected url to end with batch';\n  }\n\n  const makeRoutablePath = makeBatchRoutingPathFunction(\n    req.originalUrl,\n    req.config.serverURL,\n    req.config.publicServerURL\n  );\n\n  let initialPromise = Promise.resolve();\n  if (req.body.transaction === true) {\n    initialPromise = req.config.database.createTransactionalSession();\n  }\n\n  return initialPromise.then(() => {\n    const promises = req.body.requests.map(restRequest => {\n      const routablePath = makeRoutablePath(restRequest.path);\n\n      // Construct a request that we can send to a handler\n      const request = {\n        body: restRequest.body,\n        config: req.config,\n        auth: req.auth,\n        info: req.info,\n      };\n\n      return router.tryRouteRequest(restRequest.method, routablePath, request).then(\n        response => {\n          return { success: response.response };\n        },\n        error => {\n          return { error: { code: error.code, error: error.message } };\n        }\n      );\n    });\n\n    return Promise.all(promises).then(results => {\n      if (req.body.transaction === true) {\n        if (results.find(result => typeof result.error === 'object')) {\n          return req.config.database.abortTransactionalSession().then(() => {\n            return Promise.reject({ response: results });\n          });\n        } else {\n          return req.config.database.commitTransactionalSession().then(() => {\n            return { response: results };\n          });\n        }\n      } else {\n        return { response: results };\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  mountOnto,\n  makeBatchRoutingPathFunction,\n};\n"],"file":"batch.js"}