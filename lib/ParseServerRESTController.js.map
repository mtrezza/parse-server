{"version":3,"sources":["../src/ParseServerRESTController.js"],"names":["Config","require","Auth","RESTController","URL","Parse","getSessionToken","options","sessionToken","Promise","resolve","getAuth","config","installationId","useMasterKey","isMaster","then","getAuthForSessionToken","ParseServerRESTController","applicationId","router","handleRequest","method","path","data","args","arguments","get","serverURL","parse","indexOf","slice","length","initialPromise","transaction","database","createTransactionalSession","promises","requests","map","request","body","response","returnStatus","status","_status","success","error","code","message","all","result","find","resultItem","abortTransactionalSession","reject","commitTransactionalSession","query","auth","info","context","tryRouteRequest","resp","err","Error","INVALID_JSON","apply","ajax"],"mappings":"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","sourcesContent":["const Config = require('./Config');\nconst Auth = require('./Auth');\nconst RESTController = require('parse/lib/node/RESTController');\nconst URL = require('url');\nconst Parse = require('parse/node');\n\nfunction getSessionToken(options) {\n  if (options && typeof options.sessionToken === 'string') {\n    return Promise.resolve(options.sessionToken);\n  }\n  return Promise.resolve(null);\n}\n\nfunction getAuth(options = {}, config) {\n  const installationId = options.installationId || 'cloud';\n  if (options.useMasterKey) {\n    return Promise.resolve(new Auth.Auth({ config, isMaster: true, installationId }));\n  }\n  return getSessionToken(options).then(sessionToken => {\n    if (sessionToken) {\n      options.sessionToken = sessionToken;\n      return Auth.getAuthForSessionToken({\n        config,\n        sessionToken: sessionToken,\n        installationId,\n      });\n    } else {\n      return Promise.resolve(new Auth.Auth({ config, installationId }));\n    }\n  });\n}\n\nfunction ParseServerRESTController(applicationId, router) {\n  function handleRequest(method, path, data = {}, options = {}, config) {\n    // Store the arguments, for later use if internal fails\n    const args = arguments;\n\n    if (!config) {\n      config = Config.get(applicationId);\n    }\n    const serverURL = URL.parse(config.serverURL);\n    if (path.indexOf(serverURL.path) === 0) {\n      path = path.slice(serverURL.path.length, path.length);\n    }\n\n    if (path[0] !== '/') {\n      path = '/' + path;\n    }\n\n    if (path === '/batch') {\n      let initialPromise = Promise.resolve();\n      if (data.transaction === true) {\n        initialPromise = config.database.createTransactionalSession();\n      }\n      return initialPromise.then(() => {\n        const promises = data.requests.map(request => {\n          return handleRequest(request.method, request.path, request.body, options, config).then(\n            response => {\n              if (options.returnStatus) {\n                const status = response._status;\n                delete response._status;\n                return { success: response, _status: status };\n              }\n              return { success: response };\n            },\n            error => {\n              return {\n                error: { code: error.code, error: error.message },\n              };\n            }\n          );\n        });\n        return Promise.all(promises).then(result => {\n          if (data.transaction === true) {\n            if (result.find(resultItem => typeof resultItem.error === 'object')) {\n              return config.database.abortTransactionalSession().then(() => {\n                return Promise.reject(result);\n              });\n            } else {\n              return config.database.commitTransactionalSession().then(() => {\n                return result;\n              });\n            }\n          } else {\n            return result;\n          }\n        });\n      });\n    }\n\n    let query;\n    if (method === 'GET') {\n      query = data;\n    }\n\n    return new Promise((resolve, reject) => {\n      getAuth(options, config).then(auth => {\n        const request = {\n          body: data,\n          config,\n          auth,\n          info: {\n            applicationId: applicationId,\n            sessionToken: options.sessionToken,\n            installationId: options.installationId,\n            context: options.context || {}, // Add context\n          },\n          query,\n        };\n        return Promise.resolve()\n          .then(() => {\n            return router.tryRouteRequest(method, path, request);\n          })\n          .then(\n            resp => {\n              const { response, status } = resp;\n              if (options.returnStatus) {\n                resolve({ ...response, _status: status });\n              } else {\n                resolve(response);\n              }\n            },\n            err => {\n              if (\n                err instanceof Parse.Error &&\n                err.code == Parse.Error.INVALID_JSON &&\n                err.message == `cannot route ${method} ${path}`\n              ) {\n                RESTController.request.apply(null, args).then(resolve, reject);\n              } else {\n                reject(err);\n              }\n            }\n          );\n      }, reject);\n    });\n  }\n\n  return {\n    request: handleRequest,\n    ajax: RESTController.ajax,\n  };\n}\n\nexport default ParseServerRESTController;\nexport { ParseServerRESTController };\n"],"file":"ParseServerRESTController.js"}