{"version":3,"sources":["../src/RestQuery.js"],"names":["SchemaController","require","Parse","triggers","continueWhile","AlwaysSelectedKeys","RestQuery","config","auth","className","restWhere","restOptions","clientSDK","runAfterFind","context","response","findOptions","isMaster","user","Error","INVALID_SESSION_TOKEN","$and","__type","objectId","id","doCount","includeAll","include","Object","prototype","hasOwnProperty","call","keysForInclude","keys","split","filter","key","length","map","slice","lastIndexOf","join","option","concat","Array","from","Set","exclude","excludeKeys","k","indexOf","fields","order","sort","reduce","sortMap","field","trim","score","$meta","paths","includes","pathSet","memo","path","index","parts","s","a","b","redirectKey","redirectClassNameForKey","redirectClassName","INVALID_JSON","execute","executeOptions","Promise","resolve","then","buildRestWhere","handleIncludeAll","handleExcludeKeys","runFind","runCount","handleInclude","runAfterFindTrigger","each","callback","limit","finished","query","results","forEach","assign","$gt","getUserAndRoleACL","validateClientClassCreation","replaceSelect","replaceDontSelect","replaceInQuery","replaceNotInQuery","replaceEquality","acl","getUserRoles","roles","database","newClassName","allowClientClassCreation","systemClasses","loadSchema","schemaController","hasClass","OPERATION_FORBIDDEN","transformInQuery","inQueryObject","values","result","push","isArray","findObjectWithKey","inQueryValue","where","INVALID_QUERY","additionalOptions","subqueryReadPreference","readPreference","subquery","transformNotInQuery","notInQueryObject","notInQueryValue","getDeepestObjectFromKey","json","idx","src","splice","transformSelect","selectObject","objects","selectValue","transformDontSelect","dontSelectObject","dontSelectValue","cleanResultAuthData","password","authData","provider","replaceEqualityConstraint","constraint","equalToObject","hasDirectConstraint","hasOperatorConstraint","options","op","find","explain","filesController","expandFilesInObject","r","count","skip","c","getOneSchema","schema","includeFields","keyFields","type","pathResponse","includePath","newResponse","hasAfterFindHook","triggerExists","Types","afterFind","applicationId","pipeline","distinct","parseQuery","Query","withJSON","maybeRunAfterFindTrigger","object","toJSON","pointers","findPointers","pointersHash","pointer","add","includeRestOptions","keySet","set","keyPath","i","size","includeReadPreference","queryPromises","objectIds","$in","all","responses","replace","includeResponse","obj","sessionToken","resp","replacePointers","answer","x","subobject","newsub","root","item","subkey","module","exports"],"mappings":"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","sourcesContent":["// An object that encapsulates everything we need to run a 'find'\n// operation, encoded in the REST API format.\n\nvar SchemaController = require('./Controllers/SchemaController');\nvar Parse = require('parse/node').Parse;\nconst triggers = require('./triggers');\nconst { continueWhile } = require('parse/lib/node/promiseUtils');\nconst AlwaysSelectedKeys = ['objectId', 'createdAt', 'updatedAt', 'ACL'];\n// restOptions can include:\n//   skip\n//   limit\n//   order\n//   count\n//   include\n//   keys\n//   excludeKeys\n//   redirectClassNameForKey\n//   readPreference\n//   includeReadPreference\n//   subqueryReadPreference\nfunction RestQuery(\n  config,\n  auth,\n  className,\n  restWhere = {},\n  restOptions = {},\n  clientSDK,\n  runAfterFind = true,\n  context\n) {\n  this.config = config;\n  this.auth = auth;\n  this.className = className;\n  this.restWhere = restWhere;\n  this.restOptions = restOptions;\n  this.clientSDK = clientSDK;\n  this.runAfterFind = runAfterFind;\n  this.response = null;\n  this.findOptions = {};\n  this.context = context || {};\n\n  if (!this.auth.isMaster) {\n    if (this.className == '_Session') {\n      if (!this.auth.user) {\n        throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n      }\n      this.restWhere = {\n        $and: [\n          this.restWhere,\n          {\n            user: {\n              __type: 'Pointer',\n              className: '_User',\n              objectId: this.auth.user.id,\n            },\n          },\n        ],\n      };\n    }\n  }\n\n  this.doCount = false;\n  this.includeAll = false;\n\n  // The format for this.include is not the same as the format for the\n  // include option - it's the paths we should include, in order,\n  // stored as arrays, taking into account that we need to include foo\n  // before including foo.bar. Also it should dedupe.\n  // For example, passing an arg of include=foo.bar,foo.baz could lead to\n  // this.include = [['foo'], ['foo', 'baz'], ['foo', 'bar']]\n  this.include = [];\n\n  // If we have keys, we probably want to force some includes (n-1 level)\n  // See issue: https://github.com/parse-community/parse-server/issues/3185\n  if (Object.prototype.hasOwnProperty.call(restOptions, 'keys')) {\n    const keysForInclude = restOptions.keys\n      .split(',')\n      .filter(key => {\n        // At least 2 components\n        return key.split('.').length > 1;\n      })\n      .map(key => {\n        // Slice the last component (a.b.c -> a.b)\n        // Otherwise we'll include one level too much.\n        return key.slice(0, key.lastIndexOf('.'));\n      })\n      .join(',');\n\n    // Concat the possibly present include string with the one from the keys\n    // Dedup / sorting is handle in 'include' case.\n    if (keysForInclude.length > 0) {\n      if (!restOptions.include || restOptions.include.length == 0) {\n        restOptions.include = keysForInclude;\n      } else {\n        restOptions.include += ',' + keysForInclude;\n      }\n    }\n  }\n\n  for (var option in restOptions) {\n    switch (option) {\n      case 'keys': {\n        const keys = restOptions.keys.split(',').filter(key => key.length > 0).concat(AlwaysSelectedKeys);\n        this.keys = Array.from(new Set(keys));\n        break;\n      }\n      case 'excludeKeys': {\n        const exclude = restOptions.excludeKeys\n          .split(',')\n          .filter(k => AlwaysSelectedKeys.indexOf(k) < 0);\n        this.excludeKeys = Array.from(new Set(exclude));\n        break;\n      }\n      case 'count':\n        this.doCount = true;\n        break;\n      case 'includeAll':\n        this.includeAll = true;\n        break;\n      case 'explain':\n      case 'hint':\n      case 'distinct':\n      case 'pipeline':\n      case 'skip':\n      case 'limit':\n      case 'readPreference':\n        this.findOptions[option] = restOptions[option];\n        break;\n      case 'order':\n        var fields = restOptions.order.split(',');\n        this.findOptions.sort = fields.reduce((sortMap, field) => {\n          field = field.trim();\n          if (field === '$score') {\n            sortMap.score = { $meta: 'textScore' };\n          } else if (field[0] == '-') {\n            sortMap[field.slice(1)] = -1;\n          } else {\n            sortMap[field] = 1;\n          }\n          return sortMap;\n        }, {});\n        break;\n      case 'include': {\n        const paths = restOptions.include.split(',');\n        if (paths.includes('*')) {\n          this.includeAll = true;\n          break;\n        }\n        // Load the existing includes (from keys)\n        const pathSet = paths.reduce((memo, path) => {\n          // Split each paths on . (a.b.c -> [a,b,c])\n          // reduce to create all paths\n          // ([a,b,c] -> {a: true, 'a.b': true, 'a.b.c': true})\n          return path.split('.').reduce((memo, path, index, parts) => {\n            memo[parts.slice(0, index + 1).join('.')] = true;\n            return memo;\n          }, memo);\n        }, {});\n\n        this.include = Object.keys(pathSet)\n          .map(s => {\n            return s.split('.');\n          })\n          .sort((a, b) => {\n            return a.length - b.length; // Sort by number of components\n          });\n        break;\n      }\n      case 'redirectClassNameForKey':\n        this.redirectKey = restOptions.redirectClassNameForKey;\n        this.redirectClassName = null;\n        break;\n      case 'includeReadPreference':\n      case 'subqueryReadPreference':\n        break;\n      default:\n        throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad option: ' + option);\n    }\n  }\n}\n\n// A convenient method to perform all the steps of processing a query\n// in order.\n// Returns a promise for the response - an object with optional keys\n// 'results' and 'count'.\n// TODO: consolidate the replaceX functions\nRestQuery.prototype.execute = function (executeOptions) {\n  return Promise.resolve()\n    .then(() => {\n      return this.buildRestWhere();\n    })\n    .then(() => {\n      return this.handleIncludeAll();\n    })\n    .then(() => {\n      return this.handleExcludeKeys();\n    })\n    .then(() => {\n      return this.runFind(executeOptions);\n    })\n    .then(() => {\n      return this.runCount();\n    })\n    .then(() => {\n      return this.handleInclude();\n    })\n    .then(() => {\n      return this.runAfterFindTrigger();\n    })\n    .then(() => {\n      return this.response;\n    });\n};\n\nRestQuery.prototype.each = function (callback) {\n  const { config, auth, className, restWhere, restOptions, clientSDK } = this;\n  // if the limit is set, use it\n  restOptions.limit = restOptions.limit || 100;\n  restOptions.order = 'objectId';\n  let finished = false;\n\n  return continueWhile(\n    () => {\n      return !finished;\n    },\n    async () => {\n      const query = new RestQuery(\n        config,\n        auth,\n        className,\n        restWhere,\n        restOptions,\n        clientSDK,\n        this.runAfterFind,\n        this.context\n      );\n      const { results } = await query.execute();\n      results.forEach(callback);\n      finished = results.length < restOptions.limit;\n      if (!finished) {\n        restWhere.objectId = Object.assign({}, restWhere.objectId, {\n          $gt: results[results.length - 1].objectId,\n        });\n      }\n    }\n  );\n};\n\nRestQuery.prototype.buildRestWhere = function () {\n  return Promise.resolve()\n    .then(() => {\n      return this.getUserAndRoleACL();\n    })\n    .then(() => {\n      return this.redirectClassNameForKey();\n    })\n    .then(() => {\n      return this.validateClientClassCreation();\n    })\n    .then(() => {\n      return this.replaceSelect();\n    })\n    .then(() => {\n      return this.replaceDontSelect();\n    })\n    .then(() => {\n      return this.replaceInQuery();\n    })\n    .then(() => {\n      return this.replaceNotInQuery();\n    })\n    .then(() => {\n      return this.replaceEquality();\n    });\n};\n\n// Uses the Auth object to get the list of roles, adds the user id\nRestQuery.prototype.getUserAndRoleACL = function () {\n  if (this.auth.isMaster) {\n    return Promise.resolve();\n  }\n\n  this.findOptions.acl = ['*'];\n\n  if (this.auth.user) {\n    return this.auth.getUserRoles().then(roles => {\n      this.findOptions.acl = this.findOptions.acl.concat(roles, [this.auth.user.id]);\n      return;\n    });\n  } else {\n    return Promise.resolve();\n  }\n};\n\n// Changes the className if redirectClassNameForKey is set.\n// Returns a promise.\nRestQuery.prototype.redirectClassNameForKey = function () {\n  if (!this.redirectKey) {\n    return Promise.resolve();\n  }\n\n  // We need to change the class name based on the schema\n  return this.config.database\n    .redirectClassNameForKey(this.className, this.redirectKey)\n    .then(newClassName => {\n      this.className = newClassName;\n      this.redirectClassName = newClassName;\n    });\n};\n\n// Validates this operation against the allowClientClassCreation config.\nRestQuery.prototype.validateClientClassCreation = function () {\n  if (\n    this.config.allowClientClassCreation === false &&\n    !this.auth.isMaster &&\n    SchemaController.systemClasses.indexOf(this.className) === -1\n  ) {\n    return this.config.database\n      .loadSchema()\n      .then(schemaController => schemaController.hasClass(this.className))\n      .then(hasClass => {\n        if (hasClass !== true) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            'This user is not allowed to access ' + 'non-existent class: ' + this.className\n          );\n        }\n      });\n  } else {\n    return Promise.resolve();\n  }\n};\n\nfunction transformInQuery(inQueryObject, className, results) {\n  var values = [];\n  for (var result of results) {\n    values.push({\n      __type: 'Pointer',\n      className: className,\n      objectId: result.objectId,\n    });\n  }\n  delete inQueryObject['$inQuery'];\n  if (Array.isArray(inQueryObject['$in'])) {\n    inQueryObject['$in'] = inQueryObject['$in'].concat(values);\n  } else {\n    inQueryObject['$in'] = values;\n  }\n}\n\n// Replaces a $inQuery clause by running the subquery, if there is an\n// $inQuery clause.\n// The $inQuery clause turns into an $in with values that are just\n// pointers to the objects returned in the subquery.\nRestQuery.prototype.replaceInQuery = function () {\n  var inQueryObject = findObjectWithKey(this.restWhere, '$inQuery');\n  if (!inQueryObject) {\n    return;\n  }\n\n  // The inQuery value must have precisely two keys - where and className\n  var inQueryValue = inQueryObject['$inQuery'];\n  if (!inQueryValue.where || !inQueryValue.className) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $inQuery');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: inQueryValue.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    inQueryValue.className,\n    inQueryValue.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformInQuery(inQueryObject, subquery.className, response.results);\n    // Recurse to repeat\n    return this.replaceInQuery();\n  });\n};\n\nfunction transformNotInQuery(notInQueryObject, className, results) {\n  var values = [];\n  for (var result of results) {\n    values.push({\n      __type: 'Pointer',\n      className: className,\n      objectId: result.objectId,\n    });\n  }\n  delete notInQueryObject['$notInQuery'];\n  if (Array.isArray(notInQueryObject['$nin'])) {\n    notInQueryObject['$nin'] = notInQueryObject['$nin'].concat(values);\n  } else {\n    notInQueryObject['$nin'] = values;\n  }\n}\n\n// Replaces a $notInQuery clause by running the subquery, if there is an\n// $notInQuery clause.\n// The $notInQuery clause turns into a $nin with values that are just\n// pointers to the objects returned in the subquery.\nRestQuery.prototype.replaceNotInQuery = function () {\n  var notInQueryObject = findObjectWithKey(this.restWhere, '$notInQuery');\n  if (!notInQueryObject) {\n    return;\n  }\n\n  // The notInQuery value must have precisely two keys - where and className\n  var notInQueryValue = notInQueryObject['$notInQuery'];\n  if (!notInQueryValue.where || !notInQueryValue.className) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $notInQuery');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: notInQueryValue.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    notInQueryValue.className,\n    notInQueryValue.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformNotInQuery(notInQueryObject, subquery.className, response.results);\n    // Recurse to repeat\n    return this.replaceNotInQuery();\n  });\n};\n\n// Used to get the deepest object from json using dot notation.\nconst getDeepestObjectFromKey = (json, key, idx, src) => {\n  if (key in json) {\n    return json[key];\n  }\n  src.splice(1); // Exit Early\n};\n\nconst transformSelect = (selectObject, key, objects) => {\n  var values = [];\n  for (var result of objects) {\n    values.push(key.split('.').reduce(getDeepestObjectFromKey, result));\n  }\n  delete selectObject['$select'];\n  if (Array.isArray(selectObject['$in'])) {\n    selectObject['$in'] = selectObject['$in'].concat(values);\n  } else {\n    selectObject['$in'] = values;\n  }\n};\n\n// Replaces a $select clause by running the subquery, if there is a\n// $select clause.\n// The $select clause turns into an $in with values selected out of\n// the subquery.\n// Returns a possible-promise.\nRestQuery.prototype.replaceSelect = function () {\n  var selectObject = findObjectWithKey(this.restWhere, '$select');\n  if (!selectObject) {\n    return;\n  }\n\n  // The select value must have precisely two keys - query and key\n  var selectValue = selectObject['$select'];\n  // iOS SDK don't send where if not set, let it pass\n  if (\n    !selectValue.query ||\n    !selectValue.key ||\n    typeof selectValue.query !== 'object' ||\n    !selectValue.query.className ||\n    Object.keys(selectValue).length !== 2\n  ) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $select');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: selectValue.query.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    selectValue.query.className,\n    selectValue.query.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformSelect(selectObject, selectValue.key, response.results);\n    // Keep replacing $select clauses\n    return this.replaceSelect();\n  });\n};\n\nconst transformDontSelect = (dontSelectObject, key, objects) => {\n  var values = [];\n  for (var result of objects) {\n    values.push(key.split('.').reduce(getDeepestObjectFromKey, result));\n  }\n  delete dontSelectObject['$dontSelect'];\n  if (Array.isArray(dontSelectObject['$nin'])) {\n    dontSelectObject['$nin'] = dontSelectObject['$nin'].concat(values);\n  } else {\n    dontSelectObject['$nin'] = values;\n  }\n};\n\n// Replaces a $dontSelect clause by running the subquery, if there is a\n// $dontSelect clause.\n// The $dontSelect clause turns into an $nin with values selected out of\n// the subquery.\n// Returns a possible-promise.\nRestQuery.prototype.replaceDontSelect = function () {\n  var dontSelectObject = findObjectWithKey(this.restWhere, '$dontSelect');\n  if (!dontSelectObject) {\n    return;\n  }\n\n  // The dontSelect value must have precisely two keys - query and key\n  var dontSelectValue = dontSelectObject['$dontSelect'];\n  if (\n    !dontSelectValue.query ||\n    !dontSelectValue.key ||\n    typeof dontSelectValue.query !== 'object' ||\n    !dontSelectValue.query.className ||\n    Object.keys(dontSelectValue).length !== 2\n  ) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $dontSelect');\n  }\n  const additionalOptions = {\n    redirectClassNameForKey: dontSelectValue.query.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    dontSelectValue.query.className,\n    dontSelectValue.query.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformDontSelect(dontSelectObject, dontSelectValue.key, response.results);\n    // Keep replacing $dontSelect clauses\n    return this.replaceDontSelect();\n  });\n};\n\nconst cleanResultAuthData = function (result) {\n  delete result.password;\n  if (result.authData) {\n    Object.keys(result.authData).forEach(provider => {\n      if (result.authData[provider] === null) {\n        delete result.authData[provider];\n      }\n    });\n\n    if (Object.keys(result.authData).length == 0) {\n      delete result.authData;\n    }\n  }\n};\n\nconst replaceEqualityConstraint = constraint => {\n  if (typeof constraint !== 'object') {\n    return constraint;\n  }\n  const equalToObject = {};\n  let hasDirectConstraint = false;\n  let hasOperatorConstraint = false;\n  for (const key in constraint) {\n    if (key.indexOf('$') !== 0) {\n      hasDirectConstraint = true;\n      equalToObject[key] = constraint[key];\n    } else {\n      hasOperatorConstraint = true;\n    }\n  }\n  if (hasDirectConstraint && hasOperatorConstraint) {\n    constraint['$eq'] = equalToObject;\n    Object.keys(equalToObject).forEach(key => {\n      delete constraint[key];\n    });\n  }\n  return constraint;\n};\n\nRestQuery.prototype.replaceEquality = function () {\n  if (typeof this.restWhere !== 'object') {\n    return;\n  }\n  for (const key in this.restWhere) {\n    this.restWhere[key] = replaceEqualityConstraint(this.restWhere[key]);\n  }\n};\n\n// Returns a promise for whether it was successful.\n// Populates this.response with an object that only has 'results'.\nRestQuery.prototype.runFind = function (options = {}) {\n  if (this.findOptions.limit === 0) {\n    this.response = { results: [] };\n    return Promise.resolve();\n  }\n  const findOptions = Object.assign({}, this.findOptions);\n  if (this.keys) {\n    findOptions.keys = this.keys.map(key => {\n      return key.split('.')[0];\n    });\n  }\n  if (options.op) {\n    findOptions.op = options.op;\n  }\n  return this.config.database\n    .find(this.className, this.restWhere, findOptions, this.auth)\n    .then(results => {\n      if (this.className === '_User' && findOptions.explain !== true) {\n        for (var result of results) {\n          cleanResultAuthData(result);\n        }\n      }\n\n      this.config.filesController.expandFilesInObject(this.config, results);\n\n      if (this.redirectClassName) {\n        for (var r of results) {\n          r.className = this.redirectClassName;\n        }\n      }\n      this.response = { results: results };\n    });\n};\n\n// Returns a promise for whether it was successful.\n// Populates this.response.count with the count\nRestQuery.prototype.runCount = function () {\n  if (!this.doCount) {\n    return;\n  }\n  this.findOptions.count = true;\n  delete this.findOptions.skip;\n  delete this.findOptions.limit;\n  return this.config.database.find(this.className, this.restWhere, this.findOptions).then(c => {\n    this.response.count = c;\n  });\n};\n\n// Augments this.response with all pointers on an object\nRestQuery.prototype.handleIncludeAll = function () {\n  if (!this.includeAll) {\n    return;\n  }\n  return this.config.database\n    .loadSchema()\n    .then(schemaController => schemaController.getOneSchema(this.className))\n    .then(schema => {\n      const includeFields = [];\n      const keyFields = [];\n      for (const field in schema.fields) {\n        if (\n          (schema.fields[field].type && schema.fields[field].type === 'Pointer') ||\n          (schema.fields[field].type && schema.fields[field].type === 'Array')\n        ) {\n          includeFields.push([field]);\n          keyFields.push(field);\n        }\n      }\n      // Add fields to include, keys, remove dups\n      this.include = [...new Set([...this.include, ...includeFields])];\n      // if this.keys not set, then all keys are already included\n      if (this.keys) {\n        this.keys = [...new Set([...this.keys, ...keyFields])];\n      }\n    });\n};\n\n// Updates property `this.keys` to contain all keys but the ones unselected.\nRestQuery.prototype.handleExcludeKeys = function () {\n  if (!this.excludeKeys) {\n    return;\n  }\n  if (this.keys) {\n    this.keys = this.keys.filter(k => !this.excludeKeys.includes(k));\n    return;\n  }\n  return this.config.database\n    .loadSchema()\n    .then(schemaController => schemaController.getOneSchema(this.className))\n    .then(schema => {\n      const fields = Object.keys(schema.fields);\n      this.keys = fields.filter(k => !this.excludeKeys.includes(k));\n    });\n};\n\n// Augments this.response with data at the paths provided in this.include.\nRestQuery.prototype.handleInclude = function () {\n  if (this.include.length == 0) {\n    return;\n  }\n\n  var pathResponse = includePath(\n    this.config,\n    this.auth,\n    this.response,\n    this.include[0],\n    this.restOptions\n  );\n  if (pathResponse.then) {\n    return pathResponse.then(newResponse => {\n      this.response = newResponse;\n      this.include = this.include.slice(1);\n      return this.handleInclude();\n    });\n  } else if (this.include.length > 0) {\n    this.include = this.include.slice(1);\n    return this.handleInclude();\n  }\n\n  return pathResponse;\n};\n\n//Returns a promise of a processed set of results\nRestQuery.prototype.runAfterFindTrigger = function () {\n  if (!this.response) {\n    return;\n  }\n  if (!this.runAfterFind) {\n    return;\n  }\n  // Avoid doing any setup for triggers if there is no 'afterFind' trigger for this class.\n  const hasAfterFindHook = triggers.triggerExists(\n    this.className,\n    triggers.Types.afterFind,\n    this.config.applicationId\n  );\n  if (!hasAfterFindHook) {\n    return Promise.resolve();\n  }\n  // Skip Aggregate and Distinct Queries\n  if (this.findOptions.pipeline || this.findOptions.distinct) {\n    return Promise.resolve();\n  }\n\n  const json = Object.assign({}, this.restOptions);\n  json.where = this.restWhere;\n  const parseQuery = new Parse.Query(this.className);\n  parseQuery.withJSON(json);\n  // Run afterFind trigger and set the new results\n  return triggers\n    .maybeRunAfterFindTrigger(\n      triggers.Types.afterFind,\n      this.auth,\n      this.className,\n      this.response.results,\n      this.config,\n      parseQuery,\n      this.context\n    )\n    .then(results => {\n      // Ensure we properly set the className back\n      if (this.redirectClassName) {\n        this.response.results = results.map(object => {\n          if (object instanceof Parse.Object) {\n            object = object.toJSON();\n          }\n          object.className = this.redirectClassName;\n          return object;\n        });\n      } else {\n        this.response.results = results;\n      }\n    });\n};\n\n// Adds included values to the response.\n// Path is a list of field names.\n// Returns a promise for an augmented response.\nfunction includePath(config, auth, response, path, restOptions = {}) {\n  var pointers = findPointers(response.results, path);\n  if (pointers.length == 0) {\n    return response;\n  }\n  const pointersHash = {};\n  for (var pointer of pointers) {\n    if (!pointer) {\n      continue;\n    }\n    const className = pointer.className;\n    // only include the good pointers\n    if (className) {\n      pointersHash[className] = pointersHash[className] || new Set();\n      pointersHash[className].add(pointer.objectId);\n    }\n  }\n  const includeRestOptions = {};\n  if (restOptions.keys) {\n    const keys = new Set(restOptions.keys.split(','));\n    const keySet = Array.from(keys).reduce((set, key) => {\n      const keyPath = key.split('.');\n      let i = 0;\n      for (i; i < path.length; i++) {\n        if (path[i] != keyPath[i]) {\n          return set;\n        }\n      }\n      if (i < keyPath.length) {\n        set.add(keyPath[i]);\n      }\n      return set;\n    }, new Set());\n    if (keySet.size > 0) {\n      includeRestOptions.keys = Array.from(keySet).join(',');\n    }\n  }\n\n  if (restOptions.includeReadPreference) {\n    includeRestOptions.readPreference = restOptions.includeReadPreference;\n    includeRestOptions.includeReadPreference = restOptions.includeReadPreference;\n  } else if (restOptions.readPreference) {\n    includeRestOptions.readPreference = restOptions.readPreference;\n  }\n\n  const queryPromises = Object.keys(pointersHash).map(className => {\n    const objectIds = Array.from(pointersHash[className]);\n    let where;\n    if (objectIds.length === 1) {\n      where = { objectId: objectIds[0] };\n    } else {\n      where = { objectId: { $in: objectIds } };\n    }\n    var query = new RestQuery(config, auth, className, where, includeRestOptions);\n    return query.execute({ op: 'get' }).then(results => {\n      results.className = className;\n      return Promise.resolve(results);\n    });\n  });\n\n  // Get the objects for all these object ids\n  return Promise.all(queryPromises).then(responses => {\n    var replace = responses.reduce((replace, includeResponse) => {\n      for (var obj of includeResponse.results) {\n        obj.__type = 'Object';\n        obj.className = includeResponse.className;\n\n        if (obj.className == '_User' && !auth.isMaster) {\n          delete obj.sessionToken;\n          delete obj.authData;\n        }\n        replace[obj.objectId] = obj;\n      }\n      return replace;\n    }, {});\n\n    var resp = {\n      results: replacePointers(response.results, path, replace),\n    };\n    if (response.count) {\n      resp.count = response.count;\n    }\n    return resp;\n  });\n}\n\n// Object may be a list of REST-format object to find pointers in, or\n// it may be a single object.\n// If the path yields things that aren't pointers, this throws an error.\n// Path is a list of fields to search into.\n// Returns a list of pointers in REST format.\nfunction findPointers(object, path) {\n  if (object instanceof Array) {\n    var answer = [];\n    for (var x of object) {\n      answer = answer.concat(findPointers(x, path));\n    }\n    return answer;\n  }\n\n  if (typeof object !== 'object' || !object) {\n    return [];\n  }\n\n  if (path.length == 0) {\n    if (object === null || object.__type == 'Pointer') {\n      return [object];\n    }\n    return [];\n  }\n\n  var subobject = object[path[0]];\n  if (!subobject) {\n    return [];\n  }\n  return findPointers(subobject, path.slice(1));\n}\n\n// Object may be a list of REST-format objects to replace pointers\n// in, or it may be a single object.\n// Path is a list of fields to search into.\n// replace is a map from object id -> object.\n// Returns something analogous to object, but with the appropriate\n// pointers inflated.\nfunction replacePointers(object, path, replace) {\n  if (object instanceof Array) {\n    return object\n      .map(obj => replacePointers(obj, path, replace))\n      .filter(obj => typeof obj !== 'undefined');\n  }\n\n  if (typeof object !== 'object' || !object) {\n    return object;\n  }\n\n  if (path.length === 0) {\n    if (object && object.__type === 'Pointer') {\n      return replace[object.objectId];\n    }\n    return object;\n  }\n\n  var subobject = object[path[0]];\n  if (!subobject) {\n    return object;\n  }\n  var newsub = replacePointers(subobject, path.slice(1), replace);\n  var answer = {};\n  for (var key in object) {\n    if (key == path[0]) {\n      answer[key] = newsub;\n    } else {\n      answer[key] = object[key];\n    }\n  }\n  return answer;\n}\n\n// Finds a subobject that has the given key, if there is one.\n// Returns undefined otherwise.\nfunction findObjectWithKey(root, key) {\n  if (typeof root !== 'object') {\n    return;\n  }\n  if (root instanceof Array) {\n    for (var item of root) {\n      const answer = findObjectWithKey(item, key);\n      if (answer) {\n        return answer;\n      }\n    }\n  }\n  if (root && root[key]) {\n    return root;\n  }\n  for (var subkey in root) {\n    const answer = findObjectWithKey(root[subkey], key);\n    if (answer) {\n      return answer;\n    }\n  }\n}\n\nmodule.exports = RestQuery;\n"],"file":"RestQuery.js"}