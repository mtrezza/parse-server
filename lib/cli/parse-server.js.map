{"version":3,"sources":["../../src/cli/parse-server.js"],"names":["help","console","log","definitions","usage","start","program","options","logOptions","appId","masterKey","outputHelp","error","process","exit","liveQuery","classNames","redisURL","redisOptions","cluster","numCPUs","os","cpus","length","isMaster","i","fork","on","worker","code","pid","ParseServer","printSuccessMessage","serverURL","mountGraphQL","port","graphQLPath","mountPlayground","playgroundPath"],"mappings":";;AACA;;AACA;;AACA;;AACA;;AACA;;;;AALA;AAOA,MAAMA,IAAI,GAAG,YAAY;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,gFAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,gFAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACD,CApBD;;AAsBA,qBAAO;AACLC,EAAAA,WAAW,EAAXA,oBADK;AAELH,EAAAA,IAFK;AAGLI,EAAAA,KAAK,EAAE,wCAHF;AAILC,EAAAA,KAAK,EAAE,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,UAA5B,EAAwC;AAC7C,QAAI,CAACD,OAAO,CAACE,KAAT,IAAkB,CAACF,OAAO,CAACG,SAA/B,EAA0C;AACxCJ,MAAAA,OAAO,CAACK,UAAR;AACAV,MAAAA,OAAO,CAACW,KAAR,CAAc,EAAd;AACAX,MAAAA,OAAO,CAACW,KAAR,CAAc,4DAAd;AACAX,MAAAA,OAAO,CAACW,KAAR,CAAc,EAAd;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,QAAIP,OAAO,CAAC,sBAAD,CAAX,EAAqC;AACnCA,MAAAA,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAAR,IAAqB,EAAzC;AACAR,MAAAA,OAAO,CAACQ,SAAR,CAAkBC,UAAlB,GAA+BT,OAAO,CAAC,sBAAD,CAAtC;AACA,aAAOA,OAAO,CAAC,sBAAD,CAAd;AACD;;AACD,QAAIA,OAAO,CAAC,oBAAD,CAAX,EAAmC;AACjCA,MAAAA,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAAR,IAAqB,EAAzC;AACAR,MAAAA,OAAO,CAACQ,SAAR,CAAkBE,QAAlB,GAA6BV,OAAO,CAAC,oBAAD,CAApC;AACA,aAAOA,OAAO,CAAC,oBAAD,CAAd;AACD;;AACD,QAAIA,OAAO,CAAC,wBAAD,CAAX,EAAuC;AACrCA,MAAAA,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACQ,SAAR,IAAqB,EAAzC;AACAR,MAAAA,OAAO,CAACQ,SAAR,CAAkBG,YAAlB,GAAiCX,OAAO,CAAC,wBAAD,CAAxC;AACA,aAAOA,OAAO,CAAC,wBAAD,CAAd;AACD;;AAED,QAAIA,OAAO,CAACY,OAAZ,EAAqB;AACnB,YAAMC,OAAO,GAAG,OAAOb,OAAO,CAACY,OAAf,KAA2B,QAA3B,GAAsCZ,OAAO,CAACY,OAA9C,GAAwDE,YAAGC,IAAH,GAAUC,MAAlF;;AACA,UAAIJ,iBAAQK,QAAZ,EAAsB;AACpBhB,QAAAA,UAAU;;AACV,aAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAApB,EAA6BK,CAAC,EAA9B,EAAkC;AAChCN,2BAAQO,IAAR;AACD;;AACDP,yBAAQQ,EAAR,CAAW,MAAX,EAAmB,CAACC,MAAD,EAASC,IAAT,KAAkB;AACnC5B,UAAAA,OAAO,CAACC,GAAR,CAAa,UAAS0B,MAAM,CAACf,OAAP,CAAeiB,GAAI,UAASD,IAAK,iBAAvD;;AACAV,2BAAQO,IAAR;AACD,SAHD;AAID,OATD,MASO;AACLK,uBAAY1B,KAAZ,CAAkBE,OAAlB,EAA2B,MAAM;AAC/ByB,UAAAA,mBAAmB;AACpB,SAFD;AAGD;AACF,KAhBD,MAgBO;AACLD,qBAAY1B,KAAZ,CAAkBE,OAAlB,EAA2B,MAAM;AAC/BC,QAAAA,UAAU;AACVP,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACA8B,QAAAA,mBAAmB;AACpB,OAJD;AAKD;;AAED,aAASA,mBAAT,GAA+B;AAC7B/B,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAMW,OAAO,CAACiB,GAAd,GAAoB,4BAApB,GAAmDvB,OAAO,CAAC0B,SAAvE;;AACA,UAAI1B,OAAO,CAAC2B,YAAZ,EAA0B;AACxBjC,QAAAA,OAAO,CAACC,GAAR,CACE,MACEW,OAAO,CAACiB,GADV,GAEE,wCAFF,GAGEvB,OAAO,CAAC4B,IAHV,GAIE5B,OAAO,CAAC6B,WALZ;AAOD;;AACD,UAAI7B,OAAO,CAAC8B,eAAZ,EAA6B;AAC3BpC,QAAAA,OAAO,CAACC,GAAR,CACE,MACEW,OAAO,CAACiB,GADV,GAEE,2CAFF,GAGEvB,OAAO,CAAC4B,IAHV,GAIE5B,OAAO,CAAC+B,cALZ;AAOD;AACF;AACF;AA1EI,CAAP;AA6EA","sourcesContent":["/* eslint-disable no-console */\nimport ParseServer from '../index';\nimport definitions from './definitions/parse-server';\nimport cluster from 'cluster';\nimport os from 'os';\nimport runner from './utils/runner';\n\nconst help = function () {\n  console.log('  Get Started guide:');\n  console.log('');\n  console.log('    Please have a look at the get started guide!');\n  console.log('    http://docs.parseplatform.org/parse-server/guide/');\n  console.log('');\n  console.log('');\n  console.log('  Usage with npm start');\n  console.log('');\n  console.log('    $ npm start -- path/to/config.json');\n  console.log('    $ npm start -- --appId APP_ID --masterKey MASTER_KEY --serverURL serverURL');\n  console.log('    $ npm start -- --appId APP_ID --masterKey MASTER_KEY --serverURL serverURL');\n  console.log('');\n  console.log('');\n  console.log('  Usage:');\n  console.log('');\n  console.log('    $ parse-server path/to/config.json');\n  console.log('    $ parse-server -- --appId APP_ID --masterKey MASTER_KEY --serverURL serverURL');\n  console.log('    $ parse-server -- --appId APP_ID --masterKey MASTER_KEY --serverURL serverURL');\n  console.log('');\n};\n\nrunner({\n  definitions,\n  help,\n  usage: '[options] <path/to/configuration.json>',\n  start: function (program, options, logOptions) {\n    if (!options.appId || !options.masterKey) {\n      program.outputHelp();\n      console.error('');\n      console.error('\\u001b[31mERROR: appId and masterKey are required\\u001b[0m');\n      console.error('');\n      process.exit(1);\n    }\n\n    if (options['liveQuery.classNames']) {\n      options.liveQuery = options.liveQuery || {};\n      options.liveQuery.classNames = options['liveQuery.classNames'];\n      delete options['liveQuery.classNames'];\n    }\n    if (options['liveQuery.redisURL']) {\n      options.liveQuery = options.liveQuery || {};\n      options.liveQuery.redisURL = options['liveQuery.redisURL'];\n      delete options['liveQuery.redisURL'];\n    }\n    if (options['liveQuery.redisOptions']) {\n      options.liveQuery = options.liveQuery || {};\n      options.liveQuery.redisOptions = options['liveQuery.redisOptions'];\n      delete options['liveQuery.redisOptions'];\n    }\n\n    if (options.cluster) {\n      const numCPUs = typeof options.cluster === 'number' ? options.cluster : os.cpus().length;\n      if (cluster.isMaster) {\n        logOptions();\n        for (let i = 0; i < numCPUs; i++) {\n          cluster.fork();\n        }\n        cluster.on('exit', (worker, code) => {\n          console.log(`worker ${worker.process.pid} died (${code})... Restarting`);\n          cluster.fork();\n        });\n      } else {\n        ParseServer.start(options, () => {\n          printSuccessMessage();\n        });\n      }\n    } else {\n      ParseServer.start(options, () => {\n        logOptions();\n        console.log('');\n        printSuccessMessage();\n      });\n    }\n\n    function printSuccessMessage() {\n      console.log('[' + process.pid + '] parse-server running on ' + options.serverURL);\n      if (options.mountGraphQL) {\n        console.log(\n          '[' +\n            process.pid +\n            '] GraphQL running on http://localhost:' +\n            options.port +\n            options.graphQLPath\n        );\n      }\n      if (options.mountPlayground) {\n        console.log(\n          '[' +\n            process.pid +\n            '] Playground running on http://localhost:' +\n            options.port +\n            options.playgroundPath\n        );\n      }\n    }\n  },\n});\n\n/* eslint-enable no-console */\n"],"file":"parse-server.js"}