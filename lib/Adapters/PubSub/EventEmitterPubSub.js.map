{"version":3,"sources":["../../../src/Adapters/PubSub/EventEmitterPubSub.js"],"names":["emitter","events","EventEmitter","Publisher","constructor","publish","channel","message","emit","Subscriber","subscriptions","Map","subscribe","handler","set","on","unsubscribe","has","removeListener","get","delete","createPublisher","createSubscriber","removeAllListeners","EventEmitterPubSub"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,OAAO,GAAG,IAAIC,gBAAOC,YAAX,EAAhB;;AAEA,MAAMC,SAAN,CAAgB;AAGdC,EAAAA,WAAW,CAACJ,OAAD,EAAe;AACxB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDK,EAAAA,OAAO,CAACC,OAAD,EAAkBC,OAAlB,EAAyC;AAC9C,SAAKP,OAAL,CAAaQ,IAAb,CAAkBF,OAAlB,EAA2BC,OAA3B;AACD;;AATa;;AAYhB,MAAME,UAAN,SAAyBR,gBAAOC,YAAhC,CAA6C;AAI3CE,EAAAA,WAAW,CAACJ,OAAD,EAAe;AACxB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKU,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACD;;AAEDC,EAAAA,SAAS,CAACN,OAAD,EAAwB;AAC/B,UAAMO,OAAO,GAAGN,OAAO,IAAI;AACzB,WAAKC,IAAL,CAAU,SAAV,EAAqBF,OAArB,EAA8BC,OAA9B;AACD,KAFD;;AAGA,SAAKG,aAAL,CAAmBI,GAAnB,CAAuBR,OAAvB,EAAgCO,OAAhC;AACA,SAAKb,OAAL,CAAae,EAAb,CAAgBT,OAAhB,EAAyBO,OAAzB;AACD;;AAEDG,EAAAA,WAAW,CAACV,OAAD,EAAwB;AACjC,QAAI,CAAC,KAAKI,aAAL,CAAmBO,GAAnB,CAAuBX,OAAvB,CAAL,EAAsC;AACpC;AACD;;AACD,SAAKN,OAAL,CAAakB,cAAb,CAA4BZ,OAA5B,EAAqC,KAAKI,aAAL,CAAmBS,GAAnB,CAAuBb,OAAvB,CAArC;AACA,SAAKI,aAAL,CAAmBU,MAAnB,CAA0Bd,OAA1B;AACD;;AAxB0C;;AA2B7C,SAASe,eAAT,GAAgC;AAC9B,SAAO,IAAIlB,SAAJ,CAAcH,OAAd,CAAP;AACD;;AAED,SAASsB,gBAAT,GAAiC;AAC/B;AACA;AACA;AACAtB,EAAAA,OAAO,CAACuB,kBAAR;AACA,SAAO,IAAId,UAAJ,CAAeT,OAAf,CAAP;AACD;;AAED,MAAMwB,kBAAkB,GAAG;AACzBH,EAAAA,eADyB;AAEzBC,EAAAA;AAFyB,CAA3B","sourcesContent":["import events from 'events';\n\nconst emitter = new events.EventEmitter();\n\nclass Publisher {\n  emitter: any;\n\n  constructor(emitter: any) {\n    this.emitter = emitter;\n  }\n\n  publish(channel: string, message: string): void {\n    this.emitter.emit(channel, message);\n  }\n}\n\nclass Subscriber extends events.EventEmitter {\n  emitter: any;\n  subscriptions: any;\n\n  constructor(emitter: any) {\n    super();\n    this.emitter = emitter;\n    this.subscriptions = new Map();\n  }\n\n  subscribe(channel: string): void {\n    const handler = message => {\n      this.emit('message', channel, message);\n    };\n    this.subscriptions.set(channel, handler);\n    this.emitter.on(channel, handler);\n  }\n\n  unsubscribe(channel: string): void {\n    if (!this.subscriptions.has(channel)) {\n      return;\n    }\n    this.emitter.removeListener(channel, this.subscriptions.get(channel));\n    this.subscriptions.delete(channel);\n  }\n}\n\nfunction createPublisher(): any {\n  return new Publisher(emitter);\n}\n\nfunction createSubscriber(): any {\n  // createSubscriber is called once at live query server start\n  // to avoid max listeners warning, we should clean up the event emitter\n  // each time this function is called\n  emitter.removeAllListeners();\n  return new Subscriber(emitter);\n}\n\nconst EventEmitterPubSub = {\n  createPublisher,\n  createSubscriber,\n};\n\nexport { EventEmitterPubSub };\n"],"file":"EventEmitterPubSub.js"}