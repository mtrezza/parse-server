{"version":3,"sources":["../../../src/Adapters/Cache/InMemoryCache.js"],"names":["DEFAULT_CACHE_TTL","InMemoryCache","constructor","ttl","cache","Object","create","get","key","record","isNaN","expire","Date","now","value","put","NaN","timeout","setTimeout","del","clearTimeout","clear"],"mappings":";;;;;;AAAA,MAAMA,iBAAiB,GAAG,IAAI,IAA9B;;AAEO,MAAMC,aAAN,CAAoB;AACzBC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,GAAG,GAAGH;AAAR,GAAD,EAA8B;AACvC,SAAKG,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACP,UAAMC,MAAM,GAAG,KAAKL,KAAL,CAAWI,GAAX,CAAf;;AACA,QAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD,KAJM,CAMP;;;AACA,QAAIC,KAAK,CAACD,MAAM,CAACE,MAAR,CAAL,IAAwBF,MAAM,CAACE,MAAP,IAAiBC,IAAI,CAACC,GAAL,EAA7C,EAAyD;AACvD,aAAOJ,MAAM,CAACK,KAAd;AACD,KATM,CAWP;;;AACA,WAAO,KAAKV,KAAL,CAAWI,GAAX,CAAP;AACA,WAAO,IAAP;AACD;;AAEDO,EAAAA,GAAG,CAACP,GAAD,EAAMM,KAAN,EAAaX,GAAG,GAAG,KAAKA,GAAxB,EAA6B;AAC9B,QAAIA,GAAG,GAAG,CAAN,IAAWO,KAAK,CAACP,GAAD,CAApB,EAA2B;AACzBA,MAAAA,GAAG,GAAGa,GAAN;AACD;;AAED,QAAIP,MAAM,GAAG;AACXK,MAAAA,KAAK,EAAEA,KADI;AAEXH,MAAAA,MAAM,EAAER,GAAG,GAAGS,IAAI,CAACC,GAAL;AAFH,KAAb;;AAKA,QAAI,CAACH,KAAK,CAACD,MAAM,CAACE,MAAR,CAAV,EAA2B;AACzBF,MAAAA,MAAM,CAACQ,OAAP,GAAiBC,UAAU,CAAC,MAAM;AAChC,aAAKC,GAAL,CAASX,GAAT;AACD,OAF0B,EAExBL,GAFwB,CAA3B;AAGD;;AAED,SAAKC,KAAL,CAAWI,GAAX,IAAkBC,MAAlB;AACD;;AAEDU,EAAAA,GAAG,CAACX,GAAD,EAAM;AACP,QAAIC,MAAM,GAAG,KAAKL,KAAL,CAAWI,GAAX,CAAb;;AACA,QAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB;AACD;;AAED,QAAIA,MAAM,CAACQ,OAAX,EAAoB;AAClBG,MAAAA,YAAY,CAACX,MAAM,CAACQ,OAAR,CAAZ;AACD;;AACD,WAAO,KAAKb,KAAL,CAAWI,GAAX,CAAP;AACD;;AAEDa,EAAAA,KAAK,GAAG;AACN,SAAKjB,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;AACD;;AAvDwB;;;eA0DZL,a","sourcesContent":["const DEFAULT_CACHE_TTL = 5 * 1000;\n\nexport class InMemoryCache {\n  constructor({ ttl = DEFAULT_CACHE_TTL }) {\n    this.ttl = ttl;\n    this.cache = Object.create(null);\n  }\n\n  get(key) {\n    const record = this.cache[key];\n    if (record == null) {\n      return null;\n    }\n\n    // Has Record and isnt expired\n    if (isNaN(record.expire) || record.expire >= Date.now()) {\n      return record.value;\n    }\n\n    // Record has expired\n    delete this.cache[key];\n    return null;\n  }\n\n  put(key, value, ttl = this.ttl) {\n    if (ttl < 0 || isNaN(ttl)) {\n      ttl = NaN;\n    }\n\n    var record = {\n      value: value,\n      expire: ttl + Date.now(),\n    };\n\n    if (!isNaN(record.expire)) {\n      record.timeout = setTimeout(() => {\n        this.del(key);\n      }, ttl);\n    }\n\n    this.cache[key] = record;\n  }\n\n  del(key) {\n    var record = this.cache[key];\n    if (record == null) {\n      return;\n    }\n\n    if (record.timeout) {\n      clearTimeout(record.timeout);\n    }\n    delete this.cache[key];\n  }\n\n  clear() {\n    this.cache = Object.create(null);\n  }\n}\n\nexport default InMemoryCache;\n"],"file":"InMemoryCache.js"}