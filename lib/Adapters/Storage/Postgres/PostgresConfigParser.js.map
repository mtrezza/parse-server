{"version":3,"sources":["../../../../src/Adapters/Storage/Postgres/PostgresConfigParser.js"],"names":["url","require","fs","getDatabaseOptionsFromURI","uri","databaseOptions","parsedURI","parse","queryParams","parseQueryParams","query","authParts","auth","split","host","hostname","port","parseInt","database","pathname","substr","undefined","user","length","password","ssl","toLowerCase","ca","pfx","cert","key","passphrase","rejectUnauthorized","secureOptions","readFileSync","toString","binary","client_encoding","application_name","fallback_application_name","poolSize","max","query_timeout","idleTimeoutMillis","keepAlive","queryString","reduce","p","c","parts","decodeURIComponent","slice","join","module","exports"],"mappings":"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","sourcesContent":["const url = require('url');\nconst fs = require('fs');\nfunction getDatabaseOptionsFromURI(uri) {\n  const databaseOptions = {};\n\n  const parsedURI = url.parse(uri);\n  const queryParams = parseQueryParams(parsedURI.query);\n  const authParts = parsedURI.auth ? parsedURI.auth.split(':') : [];\n\n  databaseOptions.host = parsedURI.hostname || 'localhost';\n  databaseOptions.port = parsedURI.port ? parseInt(parsedURI.port) : 5432;\n  databaseOptions.database = parsedURI.pathname ? parsedURI.pathname.substr(1) : undefined;\n\n  databaseOptions.user = authParts.length > 0 ? authParts[0] : '';\n  databaseOptions.password = authParts.length > 1 ? authParts[1] : '';\n\n  if (queryParams.ssl && queryParams.ssl.toLowerCase() === 'true') {\n    databaseOptions.ssl = true;\n  }\n\n  if (\n    queryParams.ca ||\n    queryParams.pfx ||\n    queryParams.cert ||\n    queryParams.key ||\n    queryParams.passphrase ||\n    queryParams.rejectUnauthorized ||\n    queryParams.secureOptions\n  ) {\n    databaseOptions.ssl = {};\n    if (queryParams.ca) {\n      databaseOptions.ssl.ca = fs.readFileSync(queryParams.ca).toString();\n    }\n    if (queryParams.pfx) {\n      databaseOptions.ssl.pfx = fs.readFileSync(queryParams.pfx).toString();\n    }\n    if (queryParams.cert) {\n      databaseOptions.ssl.cert = fs.readFileSync(queryParams.cert).toString();\n    }\n    if (queryParams.key) {\n      databaseOptions.ssl.key = fs.readFileSync(queryParams.key).toString();\n    }\n    if (queryParams.passphrase) {\n      databaseOptions.ssl.passphrase = queryParams.passphrase;\n    }\n    if (queryParams.rejectUnauthorized) {\n      databaseOptions.ssl.rejectUnauthorized =\n        queryParams.rejectUnauthorized.toLowerCase() === 'true' ? true : false;\n    }\n    if (queryParams.secureOptions) {\n      databaseOptions.ssl.secureOptions = parseInt(queryParams.secureOptions);\n    }\n  }\n\n  databaseOptions.binary =\n    queryParams.binary && queryParams.binary.toLowerCase() === 'true' ? true : false;\n\n  databaseOptions.client_encoding = queryParams.client_encoding;\n  databaseOptions.application_name = queryParams.application_name;\n  databaseOptions.fallback_application_name = queryParams.fallback_application_name;\n\n  if (queryParams.poolSize) {\n    databaseOptions.poolSize = parseInt(queryParams.poolSize) || 10;\n  }\n  if (queryParams.max) {\n    databaseOptions.max = parseInt(queryParams.max) || 10;\n  }\n  if (queryParams.query_timeout) {\n    databaseOptions.query_timeout = parseInt(queryParams.query_timeout);\n  }\n  if (queryParams.idleTimeoutMillis) {\n    databaseOptions.idleTimeoutMillis = parseInt(queryParams.idleTimeoutMillis);\n  }\n  if (queryParams.keepAlive) {\n    databaseOptions.keepAlive = queryParams.keepAlive.toLowerCase() === 'true' ? true : false;\n  }\n\n  return databaseOptions;\n}\n\nfunction parseQueryParams(queryString) {\n  queryString = queryString || '';\n\n  return queryString.split('&').reduce((p, c) => {\n    const parts = c.split('=');\n    p[decodeURIComponent(parts[0])] =\n      parts.length > 1 ? decodeURIComponent(parts.slice(1).join('=')) : '';\n    return p;\n  }, {});\n}\n\nmodule.exports = {\n  parseQueryParams: parseQueryParams,\n  getDatabaseOptionsFromURI: getDatabaseOptionsFromURI,\n};\n"],"file":"PostgresConfigParser.js"}