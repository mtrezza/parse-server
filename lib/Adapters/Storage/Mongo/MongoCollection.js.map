{"version":3,"sources":["../../../../src/Adapters/Storage/Mongo/MongoCollection.js"],"names":["mongodb","require","Collection","MongoCollection","constructor","mongoCollection","_mongoCollection","find","query","skip","limit","sort","keys","maxTimeMS","readPreference","hint","caseInsensitive","explain","$score","score","$meta","_rawFind","catch","error","code","message","match","key","index","createIndex","then","caseInsensitiveCollation","locale","strength","findOperation","project","collation","toArray","count","Object","length","estimatedDocumentCount","countOperation","countDocuments","distinct","field","aggregate","pipeline","insertOne","object","session","upsertOne","update","updateOne","upsert","updateMany","deleteMany","_ensureSparseUniqueIndexInBackground","indexRequest","Promise","resolve","reject","unique","background","sparse","drop"],"mappings":"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","sourcesContent":["const mongodb = require('mongodb');\nconst Collection = mongodb.Collection;\n\nexport default class MongoCollection {\n  _mongoCollection: Collection;\n\n  constructor(mongoCollection: Collection) {\n    this._mongoCollection = mongoCollection;\n  }\n\n  // Does a find with \"smart indexing\".\n  // Currently this just means, if it needs a geoindex and there is\n  // none, then build the geoindex.\n  // This could be improved a lot but it's not clear if that's a good\n  // idea. Or even if this behavior is a good idea.\n  find(\n    query,\n    { skip, limit, sort, keys, maxTimeMS, readPreference, hint, caseInsensitive, explain } = {}\n  ) {\n    // Support for Full Text Search - $text\n    if (keys && keys.$score) {\n      delete keys.$score;\n      keys.score = { $meta: 'textScore' };\n    }\n    return this._rawFind(query, {\n      skip,\n      limit,\n      sort,\n      keys,\n      maxTimeMS,\n      readPreference,\n      hint,\n      caseInsensitive,\n      explain,\n    }).catch(error => {\n      // Check for \"no geoindex\" error\n      if (error.code != 17007 && !error.message.match(/unable to find index for .geoNear/)) {\n        throw error;\n      }\n      // Figure out what key needs an index\n      const key = error.message.match(/field=([A-Za-z_0-9]+) /)[1];\n      if (!key) {\n        throw error;\n      }\n\n      var index = {};\n      index[key] = '2d';\n      return (\n        this._mongoCollection\n          .createIndex(index)\n          // Retry, but just once.\n          .then(() =>\n            this._rawFind(query, {\n              skip,\n              limit,\n              sort,\n              keys,\n              maxTimeMS,\n              readPreference,\n              hint,\n              caseInsensitive,\n              explain,\n            })\n          )\n      );\n    });\n  }\n\n  /**\n   * Collation to support case insensitive queries\n   */\n  static caseInsensitiveCollation() {\n    return { locale: 'en_US', strength: 2 };\n  }\n\n  _rawFind(\n    query,\n    { skip, limit, sort, keys, maxTimeMS, readPreference, hint, caseInsensitive, explain } = {}\n  ) {\n    let findOperation = this._mongoCollection.find(query, {\n      skip,\n      limit,\n      sort,\n      readPreference,\n      hint,\n    });\n\n    if (keys) {\n      findOperation = findOperation.project(keys);\n    }\n\n    if (caseInsensitive) {\n      findOperation = findOperation.collation(MongoCollection.caseInsensitiveCollation());\n    }\n\n    if (maxTimeMS) {\n      findOperation = findOperation.maxTimeMS(maxTimeMS);\n    }\n\n    return explain ? findOperation.explain(explain) : findOperation.toArray();\n  }\n\n  count(query, { skip, limit, sort, maxTimeMS, readPreference, hint } = {}) {\n    // If query is empty, then use estimatedDocumentCount instead.\n    // This is due to countDocuments performing a scan,\n    // which greatly increases execution time when being run on large collections.\n    // See https://github.com/Automattic/mongoose/issues/6713 for more info regarding this problem.\n    if (typeof query !== 'object' || !Object.keys(query).length) {\n      return this._mongoCollection.estimatedDocumentCount({\n        maxTimeMS,\n      });\n    }\n\n    const countOperation = this._mongoCollection.countDocuments(query, {\n      skip,\n      limit,\n      sort,\n      maxTimeMS,\n      readPreference,\n      hint,\n    });\n\n    return countOperation;\n  }\n\n  distinct(field, query) {\n    return this._mongoCollection.distinct(field, query);\n  }\n\n  aggregate(pipeline, { maxTimeMS, readPreference, hint, explain } = {}) {\n    return this._mongoCollection\n      .aggregate(pipeline, { maxTimeMS, readPreference, hint, explain })\n      .toArray();\n  }\n\n  insertOne(object, session) {\n    return this._mongoCollection.insertOne(object, { session });\n  }\n\n  // Atomically updates data in the database for a single (first) object that matched the query\n  // If there is nothing that matches the query - does insert\n  // Postgres Note: `INSERT ... ON CONFLICT UPDATE` that is available since 9.5.\n  upsertOne(query, update, session) {\n    return this._mongoCollection.updateOne(query, update, {\n      upsert: true,\n      session,\n    });\n  }\n\n  updateOne(query, update) {\n    return this._mongoCollection.updateOne(query, update);\n  }\n\n  updateMany(query, update, session) {\n    return this._mongoCollection.updateMany(query, update, { session });\n  }\n\n  deleteMany(query, session) {\n    return this._mongoCollection.deleteMany(query, { session });\n  }\n\n  _ensureSparseUniqueIndexInBackground(indexRequest) {\n    return new Promise((resolve, reject) => {\n      this._mongoCollection.createIndex(\n        indexRequest,\n        { unique: true, background: true, sparse: true },\n        error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        }\n      );\n    });\n  }\n\n  drop() {\n    return this._mongoCollection.drop();\n  }\n}\n"],"file":"MongoCollection.js"}