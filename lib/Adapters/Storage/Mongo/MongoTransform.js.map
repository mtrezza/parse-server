{"version":3,"sources":["../../../../src/Adapters/Storage/Mongo/MongoTransform.js"],"names":["mongodb","require","Parse","transformKey","className","fieldName","schema","fields","__type","type","transformKeyValueForUpdate","restKey","restValue","parseFormatSchema","key","timeField","includes","value","parseInt","transformTopLevelAtom","CannotTransform","Date","indexOf","Array","map","transformInteriorValue","transformUpdateOperator","mapValues","isRegex","RegExp","isStartsWithRegex","matches","toString","match","isAllValuesRegexOrNone","values","isArray","length","firstValuesIsRegex","i","isAnyValueRegex","some","Object","keys","Error","INVALID_NESTED_KEY","transformInteriorAtom","valueAsDate","transformQueryKeyValue","count","subQuery","transformWhere","authDataMatch","provider","expectedTypeIsArray","expectedTypeIsPointer","field","transformedConstraint","transformConstraint","$text","$elemMatch","$all","INVALID_JSON","restWhere","mongoWhere","out","parseObjectKeyValueToMongoObjectKeyValue","transformedValue","coercedToDate","INVALID_KEY_NAME","parseObjectToMongoObjectForCreate","restCreate","addLegacyACL","mongoCreate","undefined","createdAt","_created_at","iso","updatedAt","_updated_at","transformUpdate","restUpdate","mongoUpdate","acl","_rperm","_wperm","_acl","$set","__op","arg","restObject","restObjectCopy","forEach","entry","w","r","atom","objectId","DateCoder","isValidJSON","JSONToDatabase","BytesCoder","$regex","targetClass","GeoPointCoder","PolygonCoder","FileCoder","INTERNAL_SERVER_ERROR","relativeTimeToDate","text","now","toLowerCase","parts","split","filter","part","future","past","status","info","slice","pairs","push","shift","seconds","num","interval","val","Number","isInteger","milliseconds","result","valueOf","constraint","inArray","transformFunction","transformer","JSON","stringify","sort","reverse","answer","$relativeTime","parserResult","log","arr","_","flatMap","s","$nin","search","$search","$term","$language","$caseSensitive","$diacriticSensitive","point","$geoWithin","$centerSphere","longitude","latitude","$maxDistance","COMMAND_UNAVAILABLE","box","$box","polygon","centerSphere","points","coordinates","GeoPoint","_validate","$polygon","distance","isNaN","$geometry","amount","objects","flatten","toAdd","mongoOp","Add","AddUnique","$each","toRemove","object","iterator","nestedMongoObjectToNestedParseObject","mongoObject","_encode","Long","toNumber","Double","isValidDatabaseObject","databaseToJSON","prototype","hasOwnProperty","call","toJSON","transformPointerString","pointerString","objData","mongoObjectToParseObject","_hashed_password","warn","newKey","substring","relationFieldNames","relationFields","relationFieldName","json","base64Pattern","isBase64Value","test","buffer","base64","Binary","Buffer","from","coords","coord","parseFloat","unique","item","index","ar","foundIndex","pt","name","module","exports"],"mappings":";;AAAA;;AACA;;;;;;;;;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAlC;;AAEA,MAAMC,YAAY,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,MAAvB,KAAkC;AACrD;AACA,UAAQD,SAAR;AACE,SAAK,UAAL;AACE,aAAO,KAAP;;AACF,SAAK,WAAL;AACE,aAAO,aAAP;;AACF,SAAK,WAAL;AACE,aAAO,aAAP;;AACF,SAAK,cAAL;AACE,aAAO,gBAAP;;AACF,SAAK,UAAL;AACE,aAAO,YAAP;;AACF,SAAK,WAAL;AACE,aAAO,YAAP;AAZJ;;AAeA,MAAIC,MAAM,CAACC,MAAP,CAAcF,SAAd,KAA4BC,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBG,MAAzB,IAAmC,SAAnE,EAA8E;AAC5EH,IAAAA,SAAS,GAAG,QAAQA,SAApB;AACD,GAFD,MAEO,IAAIC,MAAM,CAACC,MAAP,CAAcF,SAAd,KAA4BC,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBI,IAAzB,IAAiC,SAAjE,EAA4E;AACjFJ,IAAAA,SAAS,GAAG,QAAQA,SAApB;AACD;;AAED,SAAOA,SAAP;AACD,CAxBD;;AA0BA,MAAMK,0BAA0B,GAAG,CAACN,SAAD,EAAYO,OAAZ,EAAqBC,SAArB,EAAgCC,iBAAhC,KAAsD;AACvF;AACA,MAAIC,GAAG,GAAGH,OAAV;AACA,MAAII,SAAS,GAAG,KAAhB;;AACA,UAAQD,GAAR;AACE,SAAK,UAAL;AACA,SAAK,KAAL;AACE,UAAI,CAAC,eAAD,EAAkB,gBAAlB,EAAoCE,QAApC,CAA6CZ,SAA7C,CAAJ,EAA6D;AAC3D,eAAO;AACLU,UAAAA,GAAG,EAAEA,GADA;AAELG,UAAAA,KAAK,EAAEC,QAAQ,CAACN,SAAD;AAFV,SAAP;AAID;;AACDE,MAAAA,GAAG,GAAG,KAAN;AACA;;AACF,SAAK,WAAL;AACA,SAAK,aAAL;AACEA,MAAAA,GAAG,GAAG,aAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,WAAL;AACA,SAAK,aAAL;AACED,MAAAA,GAAG,GAAG,aAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,cAAL;AACA,SAAK,gBAAL;AACED,MAAAA,GAAG,GAAG,gBAAN;AACA;;AACF,SAAK,WAAL;AACA,SAAK,YAAL;AACEA,MAAAA,GAAG,GAAG,WAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,gCAAL;AACED,MAAAA,GAAG,GAAG,gCAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,6BAAL;AACED,MAAAA,GAAG,GAAG,6BAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,qBAAL;AACED,MAAAA,GAAG,GAAG,qBAAN;AACA;;AACF,SAAK,8BAAL;AACEA,MAAAA,GAAG,GAAG,8BAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,sBAAL;AACED,MAAAA,GAAG,GAAG,sBAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,QAAL;AACA,SAAK,QAAL;AACE,aAAO;AAAED,QAAAA,GAAG,EAAEA,GAAP;AAAYG,QAAAA,KAAK,EAAEL;AAAnB,OAAP;;AACF,SAAK,UAAL;AACA,SAAK,YAAL;AACEE,MAAAA,GAAG,GAAG,YAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAK,WAAL;AACA,SAAK,YAAL;AACED,MAAAA,GAAG,GAAG,YAAN;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACA;AA7DJ;;AAgEA,MACGF,iBAAiB,CAACN,MAAlB,CAAyBO,GAAzB,KAAiCD,iBAAiB,CAACN,MAAlB,CAAyBO,GAAzB,EAA8BL,IAA9B,KAAuC,SAAzE,IACC,CAACI,iBAAiB,CAACN,MAAlB,CAAyBO,GAAzB,CAAD,IAAkCF,SAAlC,IAA+CA,SAAS,CAACJ,MAAV,IAAoB,SAFtE,EAGE;AACAM,IAAAA,GAAG,GAAG,QAAQA,GAAd;AACD,GAzEsF,CA2EvF;;;AACA,MAAIG,KAAK,GAAGE,qBAAqB,CAACP,SAAD,CAAjC;;AACA,MAAIK,KAAK,KAAKG,eAAd,EAA+B;AAC7B,QAAIL,SAAS,IAAI,OAAOE,KAAP,KAAiB,QAAlC,EAA4C;AAC1CA,MAAAA,KAAK,GAAG,IAAII,IAAJ,CAASJ,KAAT,CAAR;AACD;;AACD,QAAIN,OAAO,CAACW,OAAR,CAAgB,GAAhB,IAAuB,CAA3B,EAA8B;AAC5B,aAAO;AAAER,QAAAA,GAAF;AAAOG,QAAAA,KAAK,EAAEL;AAAd,OAAP;AACD;;AACD,WAAO;AAAEE,MAAAA,GAAF;AAAOG,MAAAA;AAAP,KAAP;AACD,GArFsF,CAuFvF;;;AACA,MAAIL,SAAS,YAAYW,KAAzB,EAAgC;AAC9BN,IAAAA,KAAK,GAAGL,SAAS,CAACY,GAAV,CAAcC,sBAAd,CAAR;AACA,WAAO;AAAEX,MAAAA,GAAF;AAAOG,MAAAA;AAAP,KAAP;AACD,GA3FsF,CA6FvF;;;AACA,MAAI,OAAOL,SAAP,KAAqB,QAArB,IAAiC,UAAUA,SAA/C,EAA0D;AACxD,WAAO;AAAEE,MAAAA,GAAF;AAAOG,MAAAA,KAAK,EAAES,uBAAuB,CAACd,SAAD,EAAY,KAAZ;AAArC,KAAP;AACD,GAhGsF,CAkGvF;;;AACAK,EAAAA,KAAK,GAAGU,SAAS,CAACf,SAAD,EAAYa,sBAAZ,CAAjB;AACA,SAAO;AAAEX,IAAAA,GAAF;AAAOG,IAAAA;AAAP,GAAP;AACD,CArGD;;AAuGA,MAAMW,OAAO,GAAGX,KAAK,IAAI;AACvB,SAAOA,KAAK,IAAIA,KAAK,YAAYY,MAAjC;AACD,CAFD;;AAIA,MAAMC,iBAAiB,GAAGb,KAAK,IAAI;AACjC,MAAI,CAACW,OAAO,CAACX,KAAD,CAAZ,EAAqB;AACnB,WAAO,KAAP;AACD;;AAED,QAAMc,OAAO,GAAGd,KAAK,CAACe,QAAN,GAAiBC,KAAjB,CAAuB,gBAAvB,CAAhB;AACA,SAAO,CAAC,CAACF,OAAT;AACD,CAPD;;AASA,MAAMG,sBAAsB,GAAGC,MAAM,IAAI;AACvC,MAAI,CAACA,MAAD,IAAW,CAACZ,KAAK,CAACa,OAAN,CAAcD,MAAd,CAAZ,IAAqCA,MAAM,CAACE,MAAP,KAAkB,CAA3D,EAA8D;AAC5D,WAAO,IAAP;AACD;;AAED,QAAMC,kBAAkB,GAAGR,iBAAiB,CAACK,MAAM,CAAC,CAAD,CAAP,CAA5C;;AACA,MAAIA,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAOC,kBAAP;AACD;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWF,MAAM,GAAGF,MAAM,CAACE,MAAhC,EAAwCE,CAAC,GAAGF,MAA5C,EAAoD,EAAEE,CAAtD,EAAyD;AACvD,QAAID,kBAAkB,KAAKR,iBAAiB,CAACK,MAAM,CAACI,CAAD,CAAP,CAA5C,EAAyD;AACvD,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAjBD;;AAmBA,MAAMC,eAAe,GAAGL,MAAM,IAAI;AAChC,SAAOA,MAAM,CAACM,IAAP,CAAY,UAAUxB,KAAV,EAAiB;AAClC,WAAOW,OAAO,CAACX,KAAD,CAAd;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMQ,sBAAsB,GAAGb,SAAS,IAAI;AAC1C,MACEA,SAAS,KAAK,IAAd,IACA,OAAOA,SAAP,KAAqB,QADrB,IAEA8B,MAAM,CAACC,IAAP,CAAY/B,SAAZ,EAAuB6B,IAAvB,CAA4B3B,GAAG,IAAIA,GAAG,CAACE,QAAJ,CAAa,GAAb,KAAqBF,GAAG,CAACE,QAAJ,CAAa,GAAb,CAAxD,CAHF,EAIE;AACA,UAAM,IAAId,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYC,kBADR,EAEJ,0DAFI,CAAN;AAID,GAVyC,CAW1C;;;AACA,MAAI5B,KAAK,GAAG6B,qBAAqB,CAAClC,SAAD,CAAjC;;AACA,MAAIK,KAAK,KAAKG,eAAd,EAA+B;AAC7B,WAAOH,KAAP;AACD,GAfyC,CAiB1C;;;AACA,MAAIL,SAAS,YAAYW,KAAzB,EAAgC;AAC9B,WAAOX,SAAS,CAACY,GAAV,CAAcC,sBAAd,CAAP;AACD,GApByC,CAsB1C;;;AACA,MAAI,OAAOb,SAAP,KAAqB,QAArB,IAAiC,UAAUA,SAA/C,EAA0D;AACxD,WAAOc,uBAAuB,CAACd,SAAD,EAAY,IAAZ,CAA9B;AACD,GAzByC,CA2B1C;;;AACA,SAAOe,SAAS,CAACf,SAAD,EAAYa,sBAAZ,CAAhB;AACD,CA7BD;;AA+BA,MAAMsB,WAAW,GAAG9B,KAAK,IAAI;AAC3B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,IAAII,IAAJ,CAASJ,KAAT,CAAP;AACD,GAFD,MAEO,IAAIA,KAAK,YAAYI,IAArB,EAA2B;AAChC,WAAOJ,KAAP;AACD;;AACD,SAAO,KAAP;AACD,CAPD;;AASA,SAAS+B,sBAAT,CAAgC5C,SAAhC,EAA2CU,GAA3C,EAAgDG,KAAhD,EAAuDX,MAAvD,EAA+D2C,KAAK,GAAG,KAAvE,EAA8E;AAC5E,UAAQnC,GAAR;AACE,SAAK,WAAL;AACE,UAAIiC,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AAAEH,UAAAA,GAAG,EAAE,aAAP;AAAsBG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAAxC,SAAP;AACD;;AACDH,MAAAA,GAAG,GAAG,aAAN;AACA;;AACF,SAAK,WAAL;AACE,UAAIiC,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AAAEH,UAAAA,GAAG,EAAE,aAAP;AAAsBG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAAxC,SAAP;AACD;;AACDH,MAAAA,GAAG,GAAG,aAAN;AACA;;AACF,SAAK,WAAL;AACE,UAAIiC,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AAAEH,UAAAA,GAAG,EAAE,WAAP;AAAoBG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAAtC,SAAP;AACD;;AACD;;AACF,SAAK,gCAAL;AACE,UAAI8B,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AACLH,UAAAA,GAAG,EAAE,gCADA;AAELG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAFb,SAAP;AAID;;AACD;;AACF,SAAK,UAAL;AAAiB;AACf,YAAI,CAAC,eAAD,EAAkB,gBAAlB,EAAoCD,QAApC,CAA6CZ,SAA7C,CAAJ,EAA6D;AAC3Da,UAAAA,KAAK,GAAGC,QAAQ,CAACD,KAAD,CAAhB;AACD;;AACD,eAAO;AAAEH,UAAAA,GAAG,EAAE,KAAP;AAAcG,UAAAA;AAAd,SAAP;AACD;;AACD,SAAK,6BAAL;AACE,UAAI8B,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AACLH,UAAAA,GAAG,EAAE,6BADA;AAELG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAFb,SAAP;AAID;;AACD;;AACF,SAAK,qBAAL;AACE,aAAO;AAAEH,QAAAA,GAAF;AAAOG,QAAAA;AAAP,OAAP;;AACF,SAAK,cAAL;AACE,aAAO;AAAEH,QAAAA,GAAG,EAAE,gBAAP;AAAyBG,QAAAA;AAAzB,OAAP;;AACF,SAAK,8BAAL;AACE,UAAI8B,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AACLH,UAAAA,GAAG,EAAE,8BADA;AAELG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAFb,SAAP;AAID;;AACD;;AACF,SAAK,sBAAL;AACE,UAAI8B,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AAAEH,UAAAA,GAAG,EAAE,sBAAP;AAA+BG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAAjD,SAAP;AACD;;AACD;;AACF,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,mBAAL;AACA,SAAK,qBAAL;AACE,aAAO;AAAEH,QAAAA,GAAF;AAAOG,QAAAA;AAAP,OAAP;;AACF,SAAK,KAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACE,aAAO;AACLH,QAAAA,GAAG,EAAEA,GADA;AAELG,QAAAA,KAAK,EAAEA,KAAK,CAACO,GAAN,CAAU0B,QAAQ,IAAIC,cAAc,CAAC/C,SAAD,EAAY8C,QAAZ,EAAsB5C,MAAtB,EAA8B2C,KAA9B,CAApC;AAFF,OAAP;;AAIF,SAAK,UAAL;AACE,UAAIF,WAAW,CAAC9B,KAAD,CAAf,EAAwB;AACtB,eAAO;AAAEH,UAAAA,GAAG,EAAE,YAAP;AAAqBG,UAAAA,KAAK,EAAE8B,WAAW,CAAC9B,KAAD;AAAvC,SAAP;AACD;;AACDH,MAAAA,GAAG,GAAG,YAAN;AACA;;AACF,SAAK,WAAL;AACE,aAAO;AAAEA,QAAAA,GAAG,EAAE,YAAP;AAAqBG,QAAAA,KAAK,EAAEA;AAA5B,OAAP;;AACF;AAAS;AACP;AACA,cAAMmC,aAAa,GAAGtC,GAAG,CAACmB,KAAJ,CAAU,iCAAV,CAAtB;;AACA,YAAImB,aAAJ,EAAmB;AACjB,gBAAMC,QAAQ,GAAGD,aAAa,CAAC,CAAD,CAA9B,CADiB,CAEjB;;AACA,iBAAO;AAAEtC,YAAAA,GAAG,EAAG,cAAauC,QAAS,KAA9B;AAAoCpC,YAAAA;AAApC,WAAP;AACD;AACF;AArFH;;AAwFA,QAAMqC,mBAAmB,GAAGhD,MAAM,IAAIA,MAAM,CAACC,MAAP,CAAcO,GAAd,CAAV,IAAgCR,MAAM,CAACC,MAAP,CAAcO,GAAd,EAAmBL,IAAnB,KAA4B,OAAxF;AAEA,QAAM8C,qBAAqB,GACzBjD,MAAM,IAAIA,MAAM,CAACC,MAAP,CAAcO,GAAd,CAAV,IAAgCR,MAAM,CAACC,MAAP,CAAcO,GAAd,EAAmBL,IAAnB,KAA4B,SAD9D;AAGA,QAAM+C,KAAK,GAAGlD,MAAM,IAAIA,MAAM,CAACC,MAAP,CAAcO,GAAd,CAAxB;;AACA,MAAIyC,qBAAqB,IAAK,CAACjD,MAAD,IAAWW,KAAX,IAAoBA,KAAK,CAACT,MAAN,KAAiB,SAAnE,EAA+E;AAC7EM,IAAAA,GAAG,GAAG,QAAQA,GAAd;AACD,GAjG2E,CAmG5E;;;AACA,QAAM2C,qBAAqB,GAAGC,mBAAmB,CAACzC,KAAD,EAAQuC,KAAR,EAAeP,KAAf,CAAjD;;AACA,MAAIQ,qBAAqB,KAAKrC,eAA9B,EAA+C;AAC7C,QAAIqC,qBAAqB,CAACE,KAA1B,EAAiC;AAC/B,aAAO;AAAE7C,QAAAA,GAAG,EAAE,OAAP;AAAgBG,QAAAA,KAAK,EAAEwC,qBAAqB,CAACE;AAA7C,OAAP;AACD;;AACD,QAAIF,qBAAqB,CAACG,UAA1B,EAAsC;AACpC,aAAO;AAAE9C,QAAAA,GAAG,EAAE,MAAP;AAAeG,QAAAA,KAAK,EAAE,CAAC;AAAE,WAACH,GAAD,GAAO2C;AAAT,SAAD;AAAtB,OAAP;AACD;;AACD,WAAO;AAAE3C,MAAAA,GAAF;AAAOG,MAAAA,KAAK,EAAEwC;AAAd,KAAP;AACD;;AAED,MAAIH,mBAAmB,IAAI,EAAErC,KAAK,YAAYM,KAAnB,CAA3B,EAAsD;AACpD,WAAO;AAAET,MAAAA,GAAF;AAAOG,MAAAA,KAAK,EAAE;AAAE4C,QAAAA,IAAI,EAAE,CAACf,qBAAqB,CAAC7B,KAAD,CAAtB;AAAR;AAAd,KAAP;AACD,GAjH2E,CAmH5E;;;AACA,MAAIE,qBAAqB,CAACF,KAAD,CAArB,KAAiCG,eAArC,EAAsD;AACpD,WAAO;AAAEN,MAAAA,GAAF;AAAOG,MAAAA,KAAK,EAAEE,qBAAqB,CAACF,KAAD;AAAnC,KAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIf,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEH,kBAAiB7C,KAAM,wBAFpB,CAAN;AAID;AACF,C,CAED;AACA;AACA;;;AACA,SAASkC,cAAT,CAAwB/C,SAAxB,EAAmC2D,SAAnC,EAA8CzD,MAA9C,EAAsD2C,KAAK,GAAG,KAA9D,EAAqE;AACnE,QAAMe,UAAU,GAAG,EAAnB;;AACA,OAAK,MAAMrD,OAAX,IAAsBoD,SAAtB,EAAiC;AAC/B,UAAME,GAAG,GAAGjB,sBAAsB,CAAC5C,SAAD,EAAYO,OAAZ,EAAqBoD,SAAS,CAACpD,OAAD,CAA9B,EAAyCL,MAAzC,EAAiD2C,KAAjD,CAAlC;AACAe,IAAAA,UAAU,CAACC,GAAG,CAACnD,GAAL,CAAV,GAAsBmD,GAAG,CAAChD,KAA1B;AACD;;AACD,SAAO+C,UAAP;AACD;;AAED,MAAME,wCAAwC,GAAG,CAACvD,OAAD,EAAUC,SAAV,EAAqBN,MAArB,KAAgC;AAC/E;AACA,MAAI6D,gBAAJ;AACA,MAAIC,aAAJ;;AACA,UAAQzD,OAAR;AACE,SAAK,UAAL;AACE,aAAO;AAAEG,QAAAA,GAAG,EAAE,KAAP;AAAcG,QAAAA,KAAK,EAAEL;AAArB,OAAP;;AACF,SAAK,WAAL;AACEuD,MAAAA,gBAAgB,GAAGhD,qBAAqB,CAACP,SAAD,CAAxC;AACAwD,MAAAA,aAAa,GACX,OAAOD,gBAAP,KAA4B,QAA5B,GAAuC,IAAI9C,IAAJ,CAAS8C,gBAAT,CAAvC,GAAoEA,gBADtE;AAEA,aAAO;AAAErD,QAAAA,GAAG,EAAE,WAAP;AAAoBG,QAAAA,KAAK,EAAEmD;AAA3B,OAAP;;AACF,SAAK,gCAAL;AACED,MAAAA,gBAAgB,GAAGhD,qBAAqB,CAACP,SAAD,CAAxC;AACAwD,MAAAA,aAAa,GACX,OAAOD,gBAAP,KAA4B,QAA5B,GAAuC,IAAI9C,IAAJ,CAAS8C,gBAAT,CAAvC,GAAoEA,gBADtE;AAEA,aAAO;AAAErD,QAAAA,GAAG,EAAE,gCAAP;AAAyCG,QAAAA,KAAK,EAAEmD;AAAhD,OAAP;;AACF,SAAK,6BAAL;AACED,MAAAA,gBAAgB,GAAGhD,qBAAqB,CAACP,SAAD,CAAxC;AACAwD,MAAAA,aAAa,GACX,OAAOD,gBAAP,KAA4B,QAA5B,GAAuC,IAAI9C,IAAJ,CAAS8C,gBAAT,CAAvC,GAAoEA,gBADtE;AAEA,aAAO;AAAErD,QAAAA,GAAG,EAAE,6BAAP;AAAsCG,QAAAA,KAAK,EAAEmD;AAA7C,OAAP;;AACF,SAAK,8BAAL;AACED,MAAAA,gBAAgB,GAAGhD,qBAAqB,CAACP,SAAD,CAAxC;AACAwD,MAAAA,aAAa,GACX,OAAOD,gBAAP,KAA4B,QAA5B,GAAuC,IAAI9C,IAAJ,CAAS8C,gBAAT,CAAvC,GAAoEA,gBADtE;AAEA,aAAO;AAAErD,QAAAA,GAAG,EAAE,8BAAP;AAAuCG,QAAAA,KAAK,EAAEmD;AAA9C,OAAP;;AACF,SAAK,sBAAL;AACED,MAAAA,gBAAgB,GAAGhD,qBAAqB,CAACP,SAAD,CAAxC;AACAwD,MAAAA,aAAa,GACX,OAAOD,gBAAP,KAA4B,QAA5B,GAAuC,IAAI9C,IAAJ,CAAS8C,gBAAT,CAAvC,GAAoEA,gBADtE;AAEA,aAAO;AAAErD,QAAAA,GAAG,EAAE,sBAAP;AAA+BG,QAAAA,KAAK,EAAEmD;AAAtC,OAAP;;AACF,SAAK,qBAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,qBAAL;AACA,SAAK,kBAAL;AACA,SAAK,mBAAL;AACE,aAAO;AAAEtD,QAAAA,GAAG,EAAEH,OAAP;AAAgBM,QAAAA,KAAK,EAAEL;AAAvB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO;AAAEE,QAAAA,GAAG,EAAE,gBAAP;AAAyBG,QAAAA,KAAK,EAAEL;AAAhC,OAAP;;AACF;AACE;AACA,UAAID,OAAO,CAACsB,KAAR,CAAc,iCAAd,CAAJ,EAAsD;AACpD,cAAM,IAAI/B,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYyB,gBAA5B,EAA8C,uBAAuB1D,OAArE,CAAN;AACD,OAJH,CAKE;;;AACA,UAAIA,OAAO,CAACsB,KAAR,CAAc,4BAAd,CAAJ,EAAiD;AAC/C,eAAO;AAAEnB,UAAAA,GAAG,EAAEH,OAAP;AAAgBM,UAAAA,KAAK,EAAEL;AAAvB,SAAP;AACD;;AA7CL,GAJ+E,CAmD/E;;;AACA,MAAIA,SAAS,IAAIA,SAAS,CAACJ,MAAV,KAAqB,OAAtC,EAA+C;AAC7C;AACA;AACA,QACGF,MAAM,CAACC,MAAP,CAAcI,OAAd,KAA0BL,MAAM,CAACC,MAAP,CAAcI,OAAd,EAAuBF,IAAvB,IAA+B,SAA1D,IACAG,SAAS,CAACJ,MAAV,IAAoB,SAFtB,EAGE;AACAG,MAAAA,OAAO,GAAG,QAAQA,OAAlB;AACD;AACF,GA7D8E,CA+D/E;;;AACA,MAAIM,KAAK,GAAGE,qBAAqB,CAACP,SAAD,CAAjC;;AACA,MAAIK,KAAK,KAAKG,eAAd,EAA+B;AAC7B,WAAO;AAAEN,MAAAA,GAAG,EAAEH,OAAP;AAAgBM,MAAAA,KAAK,EAAEA;AAAvB,KAAP;AACD,GAnE8E,CAqE/E;AACA;;;AACA,MAAIN,OAAO,KAAK,KAAhB,EAAuB;AACrB,UAAM,0CAAN;AACD,GAzE8E,CA2E/E;;;AACA,MAAIC,SAAS,YAAYW,KAAzB,EAAgC;AAC9BN,IAAAA,KAAK,GAAGL,SAAS,CAACY,GAAV,CAAcC,sBAAd,CAAR;AACA,WAAO;AAAEX,MAAAA,GAAG,EAAEH,OAAP;AAAgBM,MAAAA,KAAK,EAAEA;AAAvB,KAAP;AACD,GA/E8E,CAiF/E;;;AACA,MAAIyB,MAAM,CAACC,IAAP,CAAY/B,SAAZ,EAAuB6B,IAAvB,CAA4B3B,GAAG,IAAIA,GAAG,CAACE,QAAJ,CAAa,GAAb,KAAqBF,GAAG,CAACE,QAAJ,CAAa,GAAb,CAAxD,CAAJ,EAAgF;AAC9E,UAAM,IAAId,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYC,kBADR,EAEJ,0DAFI,CAAN;AAID;;AACD5B,EAAAA,KAAK,GAAGU,SAAS,CAACf,SAAD,EAAYa,sBAAZ,CAAjB;AACA,SAAO;AAAEX,IAAAA,GAAG,EAAEH,OAAP;AAAgBM,IAAAA;AAAhB,GAAP;AACD,CA1FD;;AA4FA,MAAMqD,iCAAiC,GAAG,CAAClE,SAAD,EAAYmE,UAAZ,EAAwBjE,MAAxB,KAAmC;AAC3EiE,EAAAA,UAAU,GAAGC,YAAY,CAACD,UAAD,CAAzB;AACA,QAAME,WAAW,GAAG,EAApB;;AACA,OAAK,MAAM9D,OAAX,IAAsB4D,UAAtB,EAAkC;AAChC,QAAIA,UAAU,CAAC5D,OAAD,CAAV,IAAuB4D,UAAU,CAAC5D,OAAD,CAAV,CAAoBH,MAApB,KAA+B,UAA1D,EAAsE;AACpE;AACD;;AACD,UAAM;AAAEM,MAAAA,GAAF;AAAOG,MAAAA;AAAP,QAAiBiD,wCAAwC,CAC7DvD,OAD6D,EAE7D4D,UAAU,CAAC5D,OAAD,CAFmD,EAG7DL,MAH6D,CAA/D;;AAKA,QAAIW,KAAK,KAAKyD,SAAd,EAAyB;AACvBD,MAAAA,WAAW,CAAC3D,GAAD,CAAX,GAAmBG,KAAnB;AACD;AACF,GAf0E,CAiB3E;;;AACA,MAAIwD,WAAW,CAACE,SAAhB,EAA2B;AACzBF,IAAAA,WAAW,CAACG,WAAZ,GAA0B,IAAIvD,IAAJ,CAASoD,WAAW,CAACE,SAAZ,CAAsBE,GAAtB,IAA6BJ,WAAW,CAACE,SAAlD,CAA1B;AACA,WAAOF,WAAW,CAACE,SAAnB;AACD;;AACD,MAAIF,WAAW,CAACK,SAAhB,EAA2B;AACzBL,IAAAA,WAAW,CAACM,WAAZ,GAA0B,IAAI1D,IAAJ,CAASoD,WAAW,CAACK,SAAZ,CAAsBD,GAAtB,IAA6BJ,WAAW,CAACK,SAAlD,CAA1B;AACA,WAAOL,WAAW,CAACK,SAAnB;AACD;;AAED,SAAOL,WAAP;AACD,CA5BD,C,CA8BA;;;AACA,MAAMO,eAAe,GAAG,CAAC5E,SAAD,EAAY6E,UAAZ,EAAwBpE,iBAAxB,KAA8C;AACpE,QAAMqE,WAAW,GAAG,EAApB;AACA,QAAMC,GAAG,GAAGX,YAAY,CAACS,UAAD,CAAxB;;AACA,MAAIE,GAAG,CAACC,MAAJ,IAAcD,GAAG,CAACE,MAAlB,IAA4BF,GAAG,CAACG,IAApC,EAA0C;AACxCJ,IAAAA,WAAW,CAACK,IAAZ,GAAmB,EAAnB;;AACA,QAAIJ,GAAG,CAACC,MAAR,EAAgB;AACdF,MAAAA,WAAW,CAACK,IAAZ,CAAiBH,MAAjB,GAA0BD,GAAG,CAACC,MAA9B;AACD;;AACD,QAAID,GAAG,CAACE,MAAR,EAAgB;AACdH,MAAAA,WAAW,CAACK,IAAZ,CAAiBF,MAAjB,GAA0BF,GAAG,CAACE,MAA9B;AACD;;AACD,QAAIF,GAAG,CAACG,IAAR,EAAc;AACZJ,MAAAA,WAAW,CAACK,IAAZ,CAAiBD,IAAjB,GAAwBH,GAAG,CAACG,IAA5B;AACD;AACF;;AACD,OAAK,IAAI3E,OAAT,IAAoBsE,UAApB,EAAgC;AAC9B,QAAIA,UAAU,CAACtE,OAAD,CAAV,IAAuBsE,UAAU,CAACtE,OAAD,CAAV,CAAoBH,MAApB,KAA+B,UAA1D,EAAsE;AACpE;AACD;;AACD,QAAIyD,GAAG,GAAGvD,0BAA0B,CAClCN,SADkC,EAElCO,OAFkC,EAGlCsE,UAAU,CAACtE,OAAD,CAHwB,EAIlCE,iBAJkC,CAApC,CAJ8B,CAW9B;AACA;AACA;;AACA,QAAI,OAAOoD,GAAG,CAAChD,KAAX,KAAqB,QAArB,IAAiCgD,GAAG,CAAChD,KAAJ,KAAc,IAA/C,IAAuDgD,GAAG,CAAChD,KAAJ,CAAUuE,IAArE,EAA2E;AACzEN,MAAAA,WAAW,CAACjB,GAAG,CAAChD,KAAJ,CAAUuE,IAAX,CAAX,GAA8BN,WAAW,CAACjB,GAAG,CAAChD,KAAJ,CAAUuE,IAAX,CAAX,IAA+B,EAA7D;AACAN,MAAAA,WAAW,CAACjB,GAAG,CAAChD,KAAJ,CAAUuE,IAAX,CAAX,CAA4BvB,GAAG,CAACnD,GAAhC,IAAuCmD,GAAG,CAAChD,KAAJ,CAAUwE,GAAjD;AACD,KAHD,MAGO;AACLP,MAAAA,WAAW,CAAC,MAAD,CAAX,GAAsBA,WAAW,CAAC,MAAD,CAAX,IAAuB,EAA7C;AACAA,MAAAA,WAAW,CAAC,MAAD,CAAX,CAAoBjB,GAAG,CAACnD,GAAxB,IAA+BmD,GAAG,CAAChD,KAAnC;AACD;AACF;;AAED,SAAOiE,WAAP;AACD,CAvCD,C,CAyCA;;;AACA,MAAMV,YAAY,GAAGkB,UAAU,IAAI;AACjC,QAAMC,cAAc,qBAAQD,UAAR,CAApB;;AACA,QAAMJ,IAAI,GAAG,EAAb;;AAEA,MAAII,UAAU,CAACL,MAAf,EAAuB;AACrBK,IAAAA,UAAU,CAACL,MAAX,CAAkBO,OAAlB,CAA0BC,KAAK,IAAI;AACjCP,MAAAA,IAAI,CAACO,KAAD,CAAJ,GAAc;AAAEC,QAAAA,CAAC,EAAE;AAAL,OAAd;AACD,KAFD;;AAGAH,IAAAA,cAAc,CAACL,IAAf,GAAsBA,IAAtB;AACD;;AAED,MAAII,UAAU,CAACN,MAAf,EAAuB;AACrBM,IAAAA,UAAU,CAACN,MAAX,CAAkBQ,OAAlB,CAA0BC,KAAK,IAAI;AACjC,UAAI,EAAEA,KAAK,IAAIP,IAAX,CAAJ,EAAsB;AACpBA,QAAAA,IAAI,CAACO,KAAD,CAAJ,GAAc;AAAEE,UAAAA,CAAC,EAAE;AAAL,SAAd;AACD,OAFD,MAEO;AACLT,QAAAA,IAAI,CAACO,KAAD,CAAJ,CAAYE,CAAZ,GAAgB,IAAhB;AACD;AACF,KAND;;AAOAJ,IAAAA,cAAc,CAACL,IAAf,GAAsBA,IAAtB;AACD;;AAED,SAAOK,cAAP;AACD,CAvBD,C,CAyBA;AACA;;;AACA,SAASvE,eAAT,GAA2B,CAAE;;AAE7B,MAAM0B,qBAAqB,GAAGkD,IAAI,IAAI;AACpC;AACA,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAA5B,IAAoC,EAAEA,IAAI,YAAY3E,IAAlB,CAApC,IAA+D2E,IAAI,CAACxF,MAAL,KAAgB,SAAnF,EAA8F;AAC5F,WAAO;AACLA,MAAAA,MAAM,EAAE,SADH;AAELJ,MAAAA,SAAS,EAAE4F,IAAI,CAAC5F,SAFX;AAGL6F,MAAAA,QAAQ,EAAED,IAAI,CAACC;AAHV,KAAP;AAKD,GAND,MAMO,IAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,OAAOA,IAAP,KAAgB,QAAlD,EAA4D;AACjE,UAAM,IAAI9F,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,2BAA0BkC,IAAK,EAA1E,CAAN;AACD,GAFM,MAEA,IAAIE,SAAS,CAACC,WAAV,CAAsBH,IAAtB,CAAJ,EAAiC;AACtC,WAAOE,SAAS,CAACE,cAAV,CAAyBJ,IAAzB,CAAP;AACD,GAFM,MAEA,IAAIK,UAAU,CAACF,WAAX,CAAuBH,IAAvB,CAAJ,EAAkC;AACvC,WAAOK,UAAU,CAACD,cAAX,CAA0BJ,IAA1B,CAAP;AACD,GAFM,MAEA,IAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAA5B,IAAoCA,IAAI,CAACM,MAAL,KAAgB5B,SAAxD,EAAmE;AACxE,WAAO,IAAI7C,MAAJ,CAAWmE,IAAI,CAACM,MAAhB,CAAP;AACD,GAFM,MAEA;AACL,WAAON,IAAP;AACD;AACF,CAnBD,C,CAqBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS7E,qBAAT,CAA+B6E,IAA/B,EAAqCxC,KAArC,EAA4C;AAC1C,UAAQ,OAAOwC,IAAf;AACE,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,WAAL;AACE,aAAOA,IAAP;;AACF,SAAK,QAAL;AACE,UAAIxC,KAAK,IAAIA,KAAK,CAAC/C,IAAN,KAAe,SAA5B,EAAuC;AACrC,eAAQ,GAAE+C,KAAK,CAAC+C,WAAY,IAAGP,IAAK,EAApC;AACD;;AACD,aAAOA,IAAP;;AACF,SAAK,QAAL;AACA,SAAK,UAAL;AACE,YAAM,IAAI9F,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,2BAA0BkC,IAAK,EAA1E,CAAN;;AACF,SAAK,QAAL;AACE,UAAIA,IAAI,YAAY3E,IAApB,EAA0B;AACxB;AACA;AACA,eAAO2E,IAAP;AACD;;AAED,UAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAOA,IAAP;AACD,OATH,CAWE;;;AACA,UAAIA,IAAI,CAACxF,MAAL,IAAe,SAAnB,EAA8B;AAC5B,eAAQ,GAAEwF,IAAI,CAAC5F,SAAU,IAAG4F,IAAI,CAACC,QAAS,EAA1C;AACD;;AACD,UAAIC,SAAS,CAACC,WAAV,CAAsBH,IAAtB,CAAJ,EAAiC;AAC/B,eAAOE,SAAS,CAACE,cAAV,CAAyBJ,IAAzB,CAAP;AACD;;AACD,UAAIK,UAAU,CAACF,WAAX,CAAuBH,IAAvB,CAAJ,EAAkC;AAChC,eAAOK,UAAU,CAACD,cAAX,CAA0BJ,IAA1B,CAAP;AACD;;AACD,UAAIQ,aAAa,CAACL,WAAd,CAA0BH,IAA1B,CAAJ,EAAqC;AACnC,eAAOQ,aAAa,CAACJ,cAAd,CAA6BJ,IAA7B,CAAP;AACD;;AACD,UAAIS,YAAY,CAACN,WAAb,CAAyBH,IAAzB,CAAJ,EAAoC;AAClC,eAAOS,YAAY,CAACL,cAAb,CAA4BJ,IAA5B,CAAP;AACD;;AACD,UAAIU,SAAS,CAACP,WAAV,CAAsBH,IAAtB,CAAJ,EAAiC;AAC/B,eAAOU,SAAS,CAACN,cAAV,CAAyBJ,IAAzB,CAAP;AACD;;AACD,aAAO5E,eAAP;;AAEF;AACE;AACA,YAAM,IAAIlB,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAY+D,qBADR,EAEH,gCAA+BX,IAAK,EAFjC,CAAN;AA/CJ;AAoDD;;AAED,SAASY,kBAAT,CAA4BC,IAA5B,EAAkCC,GAAG,GAAG,IAAIzF,IAAJ,EAAxC,EAAoD;AAClDwF,EAAAA,IAAI,GAAGA,IAAI,CAACE,WAAL,EAAP;AAEA,MAAIC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAZ,CAHkD,CAKlD;;AACAD,EAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,KAAK,EAA9B,CAAR;AAEA,QAAMC,MAAM,GAAGJ,KAAK,CAAC,CAAD,CAAL,KAAa,IAA5B;AACA,QAAMK,IAAI,GAAGL,KAAK,CAACA,KAAK,CAAC3E,MAAN,GAAe,CAAhB,CAAL,KAA4B,KAAzC;;AAEA,MAAI,CAAC+E,MAAD,IAAW,CAACC,IAAZ,IAAoBR,IAAI,KAAK,KAAjC,EAAwC;AACtC,WAAO;AACLS,MAAAA,MAAM,EAAE,OADH;AAELC,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID;;AAED,MAAIH,MAAM,IAAIC,IAAd,EAAoB;AAClB,WAAO;AACLC,MAAAA,MAAM,EAAE,OADH;AAELC,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID,GAvBiD,CAyBlD;;;AACA,MAAIH,MAAJ,EAAY;AACVJ,IAAAA,KAAK,GAAGA,KAAK,CAACQ,KAAN,CAAY,CAAZ,CAAR;AACD,GAFD,MAEO;AACL;AACAR,IAAAA,KAAK,GAAGA,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeR,KAAK,CAAC3E,MAAN,GAAe,CAA9B,CAAR;AACD;;AAED,MAAI2E,KAAK,CAAC3E,MAAN,GAAe,CAAf,KAAqB,CAArB,IAA0BwE,IAAI,KAAK,KAAvC,EAA8C;AAC5C,WAAO;AACLS,MAAAA,MAAM,EAAE,OADH;AAELC,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID;;AAED,QAAME,KAAK,GAAG,EAAd;;AACA,SAAOT,KAAK,CAAC3E,MAAb,EAAqB;AACnBoF,IAAAA,KAAK,CAACC,IAAN,CAAW,CAACV,KAAK,CAACW,KAAN,EAAD,EAAgBX,KAAK,CAACW,KAAN,EAAhB,CAAX;AACD;;AAED,MAAIC,OAAO,GAAG,CAAd;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,QAAN,CAAX,IAA8BL,KAA9B,EAAqC;AACnC,UAAMM,GAAG,GAAGC,MAAM,CAACH,GAAD,CAAlB;;AACA,QAAI,CAACG,MAAM,CAACC,SAAP,CAAiBF,GAAjB,CAAL,EAA4B;AAC1B,aAAO;AACLT,QAAAA,MAAM,EAAE,OADH;AAELC,QAAAA,IAAI,EAAG,IAAGM,GAAI;AAFT,OAAP;AAID;;AAED,YAAQC,QAAR;AACE,WAAK,IAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACEF,QAAAA,OAAO,IAAIG,GAAG,GAAG,QAAjB,CADF,CAC6B;;AAC3B;;AAEF,WAAK,IAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACEH,QAAAA,OAAO,IAAIG,GAAG,GAAG,MAAjB,CADF,CAC2B;;AACzB;;AAEF,WAAK,GAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACEH,QAAAA,OAAO,IAAIG,GAAG,GAAG,KAAjB,CADF,CAC0B;;AACxB;;AAEF,WAAK,IAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACEH,QAAAA,OAAO,IAAIG,GAAG,GAAG,IAAjB,CADF,CACyB;;AACvB;;AAEF,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,QAAL;AACA,WAAK,SAAL;AACEH,QAAAA,OAAO,IAAIG,GAAG,GAAG,EAAjB;AACA;;AAEF,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,QAAL;AACA,WAAK,SAAL;AACEH,QAAAA,OAAO,IAAIG,GAAX;AACA;;AAEF;AACE,eAAO;AACLT,UAAAA,MAAM,EAAE,OADH;AAELC,UAAAA,IAAI,EAAG,sBAAqBO,QAAS;AAFhC,SAAP;AA3CJ;AAgDD;;AAED,QAAMI,YAAY,GAAGN,OAAO,GAAG,IAA/B;;AACA,MAAIR,MAAJ,EAAY;AACV,WAAO;AACLE,MAAAA,MAAM,EAAE,SADH;AAELC,MAAAA,IAAI,EAAE,QAFD;AAGLY,MAAAA,MAAM,EAAE,IAAI9G,IAAJ,CAASyF,GAAG,CAACsB,OAAJ,KAAgBF,YAAzB;AAHH,KAAP;AAKD,GAND,MAMO,IAAIb,IAAJ,EAAU;AACf,WAAO;AACLC,MAAAA,MAAM,EAAE,SADH;AAELC,MAAAA,IAAI,EAAE,MAFD;AAGLY,MAAAA,MAAM,EAAE,IAAI9G,IAAJ,CAASyF,GAAG,CAACsB,OAAJ,KAAgBF,YAAzB;AAHH,KAAP;AAKD,GANM,MAMA;AACL,WAAO;AACLZ,MAAAA,MAAM,EAAE,SADH;AAELC,MAAAA,IAAI,EAAE,SAFD;AAGLY,MAAAA,MAAM,EAAE,IAAI9G,IAAJ,CAASyF,GAAG,CAACsB,OAAJ,EAAT;AAHH,KAAP;AAKD;AACF,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAAS1E,mBAAT,CAA6B2E,UAA7B,EAAyC7E,KAAzC,EAAgDP,KAAK,GAAG,KAAxD,EAA+D;AAC7D,QAAMqF,OAAO,GAAG9E,KAAK,IAAIA,KAAK,CAAC/C,IAAf,IAAuB+C,KAAK,CAAC/C,IAAN,KAAe,OAAtD;;AACA,MAAI,OAAO4H,UAAP,KAAsB,QAAtB,IAAkC,CAACA,UAAvC,EAAmD;AACjD,WAAOjH,eAAP;AACD;;AACD,QAAMmH,iBAAiB,GAAGD,OAAO,GAAGxF,qBAAH,GAA2B3B,qBAA5D;;AACA,QAAMqH,WAAW,GAAGxC,IAAI,IAAI;AAC1B,UAAMmC,MAAM,GAAGI,iBAAiB,CAACvC,IAAD,EAAOxC,KAAP,CAAhC;;AACA,QAAI2E,MAAM,KAAK/G,eAAf,EAAgC;AAC9B,YAAM,IAAIlB,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,aAAY2E,IAAI,CAACC,SAAL,CAAe1C,IAAf,CAAqB,EAA5E,CAAN;AACD;;AACD,WAAOmC,MAAP;AACD,GAND,CAN6D,CAa7D;AACA;AACA;AACA;;;AACA,MAAIxF,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY0F,UAAZ,EAAwBM,IAAxB,GAA+BC,OAA/B,EAAX;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAI/H,GAAT,IAAgB6B,IAAhB,EAAsB;AACpB,YAAQ7B,GAAR;AACE,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,SAAL;AACA,WAAK,KAAL;AACA,WAAK,KAAL;AAAY;AACV,gBAAMiH,GAAG,GAAGM,UAAU,CAACvH,GAAD,CAAtB;;AACA,cAAIiH,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkCA,GAAG,CAACe,aAA1C,EAAyD;AACvD,gBAAItF,KAAK,IAAIA,KAAK,CAAC/C,IAAN,KAAe,MAA5B,EAAoC;AAClC,oBAAM,IAAIP,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,gDAFI,CAAN;AAID;;AAED,oBAAQhD,GAAR;AACE,mBAAK,SAAL;AACA,mBAAK,KAAL;AACA,mBAAK,KAAL;AACE,sBAAM,IAAIZ,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,4EAFI,CAAN;AAJJ;;AAUA,kBAAMiF,YAAY,GAAGnC,kBAAkB,CAACmB,GAAG,CAACe,aAAL,CAAvC;;AACA,gBAAIC,YAAY,CAACzB,MAAb,KAAwB,SAA5B,EAAuC;AACrCuB,cAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAciI,YAAY,CAACZ,MAA3B;AACA;AACD;;AAEDa,4BAAIzB,IAAJ,CAAS,mCAAT,EAA8CwB,YAA9C;;AACA,kBAAM,IAAI7I,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEH,sBAAqBhD,GAAI,YAAWiI,YAAY,CAACxB,IAAK,EAFnD,CAAN;AAID;;AAEDsB,UAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc0H,WAAW,CAACT,GAAD,CAAzB;AACA;AACD;;AAED,WAAK,KAAL;AACA,WAAK,MAAL;AAAa;AACX,gBAAMkB,GAAG,GAAGZ,UAAU,CAACvH,GAAD,CAAtB;;AACA,cAAI,EAAEmI,GAAG,YAAY1H,KAAjB,CAAJ,EAA6B;AAC3B,kBAAM,IAAIrB,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,SAAShD,GAAT,GAAe,QAAzD,CAAN;AACD;;AACD+H,UAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAcoI,gBAAEC,OAAF,CAAUF,GAAV,EAAehI,KAAK,IAAI;AACpC,mBAAO,CAAC+E,IAAI,IAAI;AACd,kBAAIzE,KAAK,CAACa,OAAN,CAAc4D,IAAd,CAAJ,EAAyB;AACvB,uBAAO/E,KAAK,CAACO,GAAN,CAAUgH,WAAV,CAAP;AACD,eAFD,MAEO;AACL,uBAAOA,WAAW,CAACxC,IAAD,CAAlB;AACD;AACF,aANM,EAMJ/E,KANI,CAAP;AAOD,WARa,CAAd;AASA;AACD;;AACD,WAAK,MAAL;AAAa;AACX,gBAAMgI,GAAG,GAAGZ,UAAU,CAACvH,GAAD,CAAtB;;AACA,cAAI,EAAEmI,GAAG,YAAY1H,KAAjB,CAAJ,EAA6B;AAC3B,kBAAM,IAAIrB,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,SAAShD,GAAT,GAAe,QAAzD,CAAN;AACD;;AACD+H,UAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAcmI,GAAG,CAACzH,GAAJ,CAAQsB,qBAAR,CAAd;AAEA,gBAAMX,MAAM,GAAG0G,MAAM,CAAC/H,GAAD,CAArB;;AACA,cAAI0B,eAAe,CAACL,MAAD,CAAf,IAA2B,CAACD,sBAAsB,CAACC,MAAD,CAAtD,EAAgE;AAC9D,kBAAM,IAAIjC,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,oDAAoD3B,MAFhD,CAAN;AAID;;AAED;AACD;;AACD,WAAK,QAAL;AACE,YAAIiH,CAAC,GAAGf,UAAU,CAACvH,GAAD,CAAlB;;AACA,YAAI,OAAOsI,CAAP,KAAa,QAAjB,EAA2B;AACzB,gBAAM,IAAIlJ,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,gBAAgBsF,CAA1D,CAAN;AACD;;AACDP,QAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAcsI,CAAd;AACA;;AAEF,WAAK,cAAL;AAAqB;AACnB,gBAAMH,GAAG,GAAGZ,UAAU,CAACvH,GAAD,CAAtB;;AACA,cAAI,EAAEmI,GAAG,YAAY1H,KAAjB,CAAJ,EAA6B;AAC3B,kBAAM,IAAIrB,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,sCAA3C,CAAN;AACD;;AACD+E,UAAAA,MAAM,CAACjF,UAAP,GAAoB;AAClByF,YAAAA,IAAI,EAAEJ,GAAG,CAACzH,GAAJ,CAAQgH,WAAR;AADY,WAApB;AAGA;AACD;;AACD,WAAK,UAAL;AACEK,QAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAcuH,UAAU,CAACvH,GAAD,CAAxB;AACA;;AAEF,WAAK,OAAL;AAAc;AACZ,gBAAMwI,MAAM,GAAGjB,UAAU,CAACvH,GAAD,CAAV,CAAgByI,OAA/B;;AACA,cAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,kBAAM,IAAIpJ,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,sCAA3C,CAAN;AACD;;AACD,cAAI,CAACwF,MAAM,CAACE,KAAR,IAAiB,OAAOF,MAAM,CAACE,KAAd,KAAwB,QAA7C,EAAuD;AACrD,kBAAM,IAAItJ,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,oCAA3C,CAAN;AACD,WAFD,MAEO;AACL+E,YAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc;AACZyI,cAAAA,OAAO,EAAED,MAAM,CAACE;AADJ,aAAd;AAGD;;AACD,cAAIF,MAAM,CAACG,SAAP,IAAoB,OAAOH,MAAM,CAACG,SAAd,KAA4B,QAApD,EAA8D;AAC5D,kBAAM,IAAIvJ,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA2C,wCAA3C,CAAN;AACD,WAFD,MAEO,IAAIwF,MAAM,CAACG,SAAX,EAAsB;AAC3BZ,YAAAA,MAAM,CAAC/H,GAAD,CAAN,CAAY2I,SAAZ,GAAwBH,MAAM,CAACG,SAA/B;AACD;;AACD,cAAIH,MAAM,CAACI,cAAP,IAAyB,OAAOJ,MAAM,CAACI,cAAd,KAAiC,SAA9D,EAAyE;AACvE,kBAAM,IAAIxJ,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEH,8CAFG,CAAN;AAID,WALD,MAKO,IAAIwF,MAAM,CAACI,cAAX,EAA2B;AAChCb,YAAAA,MAAM,CAAC/H,GAAD,CAAN,CAAY4I,cAAZ,GAA6BJ,MAAM,CAACI,cAApC;AACD;;AACD,cAAIJ,MAAM,CAACK,mBAAP,IAA8B,OAAOL,MAAM,CAACK,mBAAd,KAAsC,SAAxE,EAAmF;AACjF,kBAAM,IAAIzJ,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEH,mDAFG,CAAN;AAID,WALD,MAKO,IAAIwF,MAAM,CAACK,mBAAX,EAAgC;AACrCd,YAAAA,MAAM,CAAC/H,GAAD,CAAN,CAAY6I,mBAAZ,GAAkCL,MAAM,CAACK,mBAAzC;AACD;;AACD;AACD;;AACD,WAAK,aAAL;AAAoB;AAClB,gBAAMC,KAAK,GAAGvB,UAAU,CAACvH,GAAD,CAAxB;;AACA,cAAImC,KAAJ,EAAW;AACT4F,YAAAA,MAAM,CAACgB,UAAP,GAAoB;AAClBC,cAAAA,aAAa,EAAE,CAAC,CAACF,KAAK,CAACG,SAAP,EAAkBH,KAAK,CAACI,QAAxB,CAAD,EAAoC3B,UAAU,CAAC4B,YAA/C;AADG,aAApB;AAGD,WAJD,MAIO;AACLpB,YAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc,CAAC8I,KAAK,CAACG,SAAP,EAAkBH,KAAK,CAACI,QAAxB,CAAd;AACD;;AACD;AACD;;AACD,WAAK,cAAL;AAAqB;AACnB,cAAI/G,KAAJ,EAAW;AACT;AACD;;AACD4F,UAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAcuH,UAAU,CAACvH,GAAD,CAAxB;AACA;AACD;AACD;AACA;;AACA,WAAK,uBAAL;AACE+H,QAAAA,MAAM,CAAC,cAAD,CAAN,GAAyBR,UAAU,CAACvH,GAAD,CAAnC;AACA;;AACF,WAAK,qBAAL;AACE+H,QAAAA,MAAM,CAAC,cAAD,CAAN,GAAyBR,UAAU,CAACvH,GAAD,CAAV,GAAkB,IAA3C;AACA;;AACF,WAAK,0BAAL;AACE+H,QAAAA,MAAM,CAAC,cAAD,CAAN,GAAyBR,UAAU,CAACvH,GAAD,CAAV,GAAkB,IAA3C;AACA;;AAEF,WAAK,SAAL;AACA,WAAK,aAAL;AACE,cAAM,IAAIZ,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYsH,mBADR,EAEJ,SAASpJ,GAAT,GAAe,kCAFX,CAAN;;AAKF,WAAK,SAAL;AACE,YAAIqJ,GAAG,GAAG9B,UAAU,CAACvH,GAAD,CAAV,CAAgB,MAAhB,CAAV;;AACA,YAAI,CAACqJ,GAAD,IAAQA,GAAG,CAAC9H,MAAJ,IAAc,CAA1B,EAA6B;AAC3B,gBAAM,IAAInC,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,0BAA1C,CAAN;AACD;;AACD+E,QAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc;AACZsJ,UAAAA,IAAI,EAAE,CACJ,CAACD,GAAG,CAAC,CAAD,CAAH,CAAOJ,SAAR,EAAmBI,GAAG,CAAC,CAAD,CAAH,CAAOH,QAA1B,CADI,EAEJ,CAACG,GAAG,CAAC,CAAD,CAAH,CAAOJ,SAAR,EAAmBI,GAAG,CAAC,CAAD,CAAH,CAAOH,QAA1B,CAFI;AADM,SAAd;AAMA;;AAEF,WAAK,YAAL;AAAmB;AACjB,gBAAMK,OAAO,GAAGhC,UAAU,CAACvH,GAAD,CAAV,CAAgB,UAAhB,CAAhB;AACA,gBAAMwJ,YAAY,GAAGjC,UAAU,CAACvH,GAAD,CAAV,CAAgB,eAAhB,CAArB;;AACA,cAAIuJ,OAAO,KAAK3F,SAAhB,EAA2B;AACzB,gBAAI6F,MAAJ;;AACA,gBAAI,OAAOF,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAAC7J,MAAR,KAAmB,SAAtD,EAAiE;AAC/D,kBAAI,CAAC6J,OAAO,CAACG,WAAT,IAAwBH,OAAO,CAACG,WAAR,CAAoBnI,MAApB,GAA6B,CAAzD,EAA4D;AAC1D,sBAAM,IAAInC,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,mFAFI,CAAN;AAID;;AACDyG,cAAAA,MAAM,GAAGF,OAAO,CAACG,WAAjB;AACD,aARD,MAQO,IAAIH,OAAO,YAAY9I,KAAvB,EAA8B;AACnC,kBAAI8I,OAAO,CAAChI,MAAR,GAAiB,CAArB,EAAwB;AACtB,sBAAM,IAAInC,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,oEAFI,CAAN;AAID;;AACDyG,cAAAA,MAAM,GAAGF,OAAT;AACD,aARM,MAQA;AACL,oBAAM,IAAInK,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,sFAFI,CAAN;AAID;;AACDyG,YAAAA,MAAM,GAAGA,MAAM,CAAC/I,GAAP,CAAWoI,KAAK,IAAI;AAC3B,kBAAIA,KAAK,YAAYrI,KAAjB,IAA0BqI,KAAK,CAACvH,MAAN,KAAiB,CAA/C,EAAkD;AAChDnC,gBAAAA,KAAK,CAACuK,QAAN,CAAeC,SAAf,CAAyBd,KAAK,CAAC,CAAD,CAA9B,EAAmCA,KAAK,CAAC,CAAD,CAAxC;;AACA,uBAAOA,KAAP;AACD;;AACD,kBAAI,CAACpD,aAAa,CAACL,WAAd,CAA0ByD,KAA1B,CAAL,EAAuC;AACrC,sBAAM,IAAI1J,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,sBAA1C,CAAN;AACD,eAFD,MAEO;AACL5D,gBAAAA,KAAK,CAACuK,QAAN,CAAeC,SAAf,CAAyBd,KAAK,CAACI,QAA/B,EAAyCJ,KAAK,CAACG,SAA/C;AACD;;AACD,qBAAO,CAACH,KAAK,CAACG,SAAP,EAAkBH,KAAK,CAACI,QAAxB,CAAP;AACD,aAXQ,CAAT;AAYAnB,YAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc;AACZ6J,cAAAA,QAAQ,EAAEJ;AADE,aAAd;AAGD,WAvCD,MAuCO,IAAID,YAAY,KAAK5F,SAArB,EAAgC;AACrC,gBAAI,EAAE4F,YAAY,YAAY/I,KAA1B,KAAoC+I,YAAY,CAACjI,MAAb,GAAsB,CAA9D,EAAiE;AAC/D,oBAAM,IAAInC,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,uFAFI,CAAN;AAID,aANoC,CAOrC;;;AACA,gBAAI8F,KAAK,GAAGU,YAAY,CAAC,CAAD,CAAxB;;AACA,gBAAIV,KAAK,YAAYrI,KAAjB,IAA0BqI,KAAK,CAACvH,MAAN,KAAiB,CAA/C,EAAkD;AAChDuH,cAAAA,KAAK,GAAG,IAAI1J,KAAK,CAACuK,QAAV,CAAmBb,KAAK,CAAC,CAAD,CAAxB,EAA6BA,KAAK,CAAC,CAAD,CAAlC,CAAR;AACD,aAFD,MAEO,IAAI,CAACpD,aAAa,CAACL,WAAd,CAA0ByD,KAA1B,CAAL,EAAuC;AAC5C,oBAAM,IAAI1J,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,uDAFI,CAAN;AAID;;AACD5D,YAAAA,KAAK,CAACuK,QAAN,CAAeC,SAAf,CAAyBd,KAAK,CAACI,QAA/B,EAAyCJ,KAAK,CAACG,SAA/C,EAjBqC,CAkBrC;;;AACA,kBAAMa,QAAQ,GAAGN,YAAY,CAAC,CAAD,CAA7B;;AACA,gBAAIO,KAAK,CAACD,QAAD,CAAL,IAAmBA,QAAQ,GAAG,CAAlC,EAAqC;AACnC,oBAAM,IAAI1K,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,sDAFI,CAAN;AAID;;AACD+E,YAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc;AACZgJ,cAAAA,aAAa,EAAE,CAAC,CAACF,KAAK,CAACG,SAAP,EAAkBH,KAAK,CAACI,QAAxB,CAAD,EAAoCY,QAApC;AADH,aAAd;AAGD;;AACD;AACD;;AACD,WAAK,gBAAL;AAAuB;AACrB,gBAAMhB,KAAK,GAAGvB,UAAU,CAACvH,GAAD,CAAV,CAAgB,QAAhB,CAAd;;AACA,cAAI,CAAC0F,aAAa,CAACL,WAAd,CAA0ByD,KAA1B,CAAL,EAAuC;AACrC,kBAAM,IAAI1J,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYkB,YADR,EAEJ,oDAFI,CAAN;AAID,WALD,MAKO;AACL5D,YAAAA,KAAK,CAACuK,QAAN,CAAeC,SAAf,CAAyBd,KAAK,CAACI,QAA/B,EAAyCJ,KAAK,CAACG,SAA/C;AACD;;AACDlB,UAAAA,MAAM,CAAC/H,GAAD,CAAN,GAAc;AACZgK,YAAAA,SAAS,EAAE;AACTrK,cAAAA,IAAI,EAAE,OADG;AAET+J,cAAAA,WAAW,EAAE,CAACZ,KAAK,CAACG,SAAP,EAAkBH,KAAK,CAACI,QAAxB;AAFJ;AADC,WAAd;AAMA;AACD;;AACD;AACE,YAAIlJ,GAAG,CAACmB,KAAJ,CAAU,MAAV,CAAJ,EAAuB;AACrB,gBAAM,IAAI/B,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,qBAAqBhD,GAA/D,CAAN;AACD;;AACD,eAAOM,eAAP;AAzRJ;AA2RD;;AACD,SAAOyH,MAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASnH,uBAAT,CAAiC;AAAE8D,EAAAA,IAAF;AAAQuF,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAjC,EAA4DC,OAA5D,EAAqE;AACnE,UAAQzF,IAAR;AACE,SAAK,QAAL;AACE,UAAIyF,OAAJ,EAAa;AACX,eAAOvG,SAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEc,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,GAAG,EAAE;AAAvB,SAAP;AACD;;AAEH,SAAK,WAAL;AACE,UAAI,OAAOsF,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,cAAM,IAAI7K,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,oCAA1C,CAAN;AACD;;AACD,UAAImH,OAAJ,EAAa;AACX,eAAOF,MAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEvF,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,GAAG,EAAEsF;AAArB,SAAP;AACD;;AAEH,SAAK,KAAL;AACA,SAAK,WAAL;AACE,UAAI,EAAEC,OAAO,YAAYzJ,KAArB,CAAJ,EAAiC;AAC/B,cAAM,IAAIrB,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,iCAA1C,CAAN;AACD;;AACD,UAAIoH,KAAK,GAAGF,OAAO,CAACxJ,GAAR,CAAYsB,qBAAZ,CAAZ;;AACA,UAAImI,OAAJ,EAAa;AACX,eAAOC,KAAP;AACD,OAFD,MAEO;AACL,YAAIC,OAAO,GAAG;AACZC,UAAAA,GAAG,EAAE,OADO;AAEZC,UAAAA,SAAS,EAAE;AAFC,UAGZ7F,IAHY,CAAd;AAIA,eAAO;AAAEA,UAAAA,IAAI,EAAE2F,OAAR;AAAiB1F,UAAAA,GAAG,EAAE;AAAE6F,YAAAA,KAAK,EAAEJ;AAAT;AAAtB,SAAP;AACD;;AAEH,SAAK,QAAL;AACE,UAAI,EAAEF,OAAO,YAAYzJ,KAArB,CAAJ,EAAiC;AAC/B,cAAM,IAAIrB,KAAK,CAAC0C,KAAV,CAAgB1C,KAAK,CAAC0C,KAAN,CAAYkB,YAA5B,EAA0C,oCAA1C,CAAN;AACD;;AACD,UAAIyH,QAAQ,GAAGP,OAAO,CAACxJ,GAAR,CAAYsB,qBAAZ,CAAf;;AACA,UAAImI,OAAJ,EAAa;AACX,eAAO,EAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEzF,UAAAA,IAAI,EAAE,UAAR;AAAoBC,UAAAA,GAAG,EAAE8F;AAAzB,SAAP;AACD;;AAEH;AACE,YAAM,IAAIrL,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAYsH,mBADR,EAEH,OAAM1E,IAAK,iCAFR,CAAN;AA9CJ;AAmDD;;AACD,SAAS7D,SAAT,CAAmB6J,MAAnB,EAA2BC,QAA3B,EAAqC;AACnC,QAAMtD,MAAM,GAAG,EAAf;AACAzF,EAAAA,MAAM,CAACC,IAAP,CAAY6I,MAAZ,EAAoB5F,OAApB,CAA4B9E,GAAG,IAAI;AACjCqH,IAAAA,MAAM,CAACrH,GAAD,CAAN,GAAc2K,QAAQ,CAACD,MAAM,CAAC1K,GAAD,CAAP,CAAtB;AACD,GAFD;AAGA,SAAOqH,MAAP;AACD;;AAED,MAAMuD,oCAAoC,GAAGC,WAAW,IAAI;AAC1D,UAAQ,OAAOA,WAAf;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,WAAL;AACE,aAAOA,WAAP;;AACF,SAAK,QAAL;AACA,SAAK,UAAL;AACE,YAAM,mDAAN;;AACF,SAAK,QAAL;AACE,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,eAAO,IAAP;AACD;;AACD,UAAIA,WAAW,YAAYpK,KAA3B,EAAkC;AAChC,eAAOoK,WAAW,CAACnK,GAAZ,CAAgBkK,oCAAhB,CAAP;AACD;;AAED,UAAIC,WAAW,YAAYtK,IAA3B,EAAiC;AAC/B,eAAOnB,KAAK,CAAC0L,OAAN,CAAcD,WAAd,CAAP;AACD;;AAED,UAAIA,WAAW,YAAY3L,OAAO,CAAC6L,IAAnC,EAAyC;AACvC,eAAOF,WAAW,CAACG,QAAZ,EAAP;AACD;;AAED,UAAIH,WAAW,YAAY3L,OAAO,CAAC+L,MAAnC,EAA2C;AACzC,eAAOJ,WAAW,CAAC1K,KAAnB;AACD;;AAED,UAAIoF,UAAU,CAAC2F,qBAAX,CAAiCL,WAAjC,CAAJ,EAAmD;AACjD,eAAOtF,UAAU,CAAC4F,cAAX,CAA0BN,WAA1B,CAAP;AACD;;AAED,UACEjJ,MAAM,CAACwJ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,WAArC,EAAkD,QAAlD,KACAA,WAAW,CAACnL,MAAZ,IAAsB,MADtB,IAEAmL,WAAW,CAAC9G,GAAZ,YAA2BxD,IAH7B,EAIE;AACAsK,QAAAA,WAAW,CAAC9G,GAAZ,GAAkB8G,WAAW,CAAC9G,GAAZ,CAAgBwH,MAAhB,EAAlB;AACA,eAAOV,WAAP;AACD;;AAED,aAAOhK,SAAS,CAACgK,WAAD,EAAcD,oCAAd,CAAhB;;AACF;AACE,YAAM,iBAAN;AA5CJ;AA8CD,CA/CD;;AAiDA,MAAMY,sBAAsB,GAAG,CAAChM,MAAD,EAASkD,KAAT,EAAgB+I,aAAhB,KAAkC;AAC/D,QAAMC,OAAO,GAAGD,aAAa,CAACtF,KAAd,CAAoB,GAApB,CAAhB;;AACA,MAAIuF,OAAO,CAAC,CAAD,CAAP,KAAelM,MAAM,CAACC,MAAP,CAAciD,KAAd,EAAqB+C,WAAxC,EAAqD;AACnD,UAAM,gCAAN;AACD;;AACD,SAAO;AACL/F,IAAAA,MAAM,EAAE,SADH;AAELJ,IAAAA,SAAS,EAAEoM,OAAO,CAAC,CAAD,CAFb;AAGLvG,IAAAA,QAAQ,EAAEuG,OAAO,CAAC,CAAD;AAHZ,GAAP;AAKD,CAVD,C,CAYA;AACA;;;AACA,MAAMC,wBAAwB,GAAG,CAACrM,SAAD,EAAYuL,WAAZ,EAAyBrL,MAAzB,KAAoC;AACnE,UAAQ,OAAOqL,WAAf;AACE,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,WAAL;AACE,aAAOA,WAAP;;AACF,SAAK,QAAL;AACA,SAAK,UAAL;AACE,YAAM,uCAAN;;AACF,SAAK,QAAL;AAAe;AACb,YAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,iBAAO,IAAP;AACD;;AACD,YAAIA,WAAW,YAAYpK,KAA3B,EAAkC;AAChC,iBAAOoK,WAAW,CAACnK,GAAZ,CAAgBkK,oCAAhB,CAAP;AACD;;AAED,YAAIC,WAAW,YAAYtK,IAA3B,EAAiC;AAC/B,iBAAOnB,KAAK,CAAC0L,OAAN,CAAcD,WAAd,CAAP;AACD;;AAED,YAAIA,WAAW,YAAY3L,OAAO,CAAC6L,IAAnC,EAAyC;AACvC,iBAAOF,WAAW,CAACG,QAAZ,EAAP;AACD;;AAED,YAAIH,WAAW,YAAY3L,OAAO,CAAC+L,MAAnC,EAA2C;AACzC,iBAAOJ,WAAW,CAAC1K,KAAnB;AACD;;AAED,YAAIoF,UAAU,CAAC2F,qBAAX,CAAiCL,WAAjC,CAAJ,EAAmD;AACjD,iBAAOtF,UAAU,CAAC4F,cAAX,CAA0BN,WAA1B,CAAP;AACD;;AAED,cAAMjG,UAAU,GAAG,EAAnB;;AACA,YAAIiG,WAAW,CAACvG,MAAZ,IAAsBuG,WAAW,CAACtG,MAAtC,EAA8C;AAC5CK,UAAAA,UAAU,CAACN,MAAX,GAAoBuG,WAAW,CAACvG,MAAZ,IAAsB,EAA1C;AACAM,UAAAA,UAAU,CAACL,MAAX,GAAoBsG,WAAW,CAACtG,MAAZ,IAAsB,EAA1C;AACA,iBAAOsG,WAAW,CAACvG,MAAnB;AACA,iBAAOuG,WAAW,CAACtG,MAAnB;AACD;;AAED,aAAK,IAAIvE,GAAT,IAAgB6K,WAAhB,EAA6B;AAC3B,kBAAQ7K,GAAR;AACE,iBAAK,KAAL;AACE4E,cAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB,KAAKiG,WAAW,CAAC7K,GAAD,CAAzC;AACA;;AACF,iBAAK,kBAAL;AACE4E,cAAAA,UAAU,CAACgH,gBAAX,GAA8Bf,WAAW,CAAC7K,GAAD,CAAzC;AACA;;AACF,iBAAK,MAAL;AACE;;AACF,iBAAK,qBAAL;AACA,iBAAK,mBAAL;AACA,iBAAK,8BAAL;AACA,iBAAK,sBAAL;AACA,iBAAK,YAAL;AACA,iBAAK,gCAAL;AACA,iBAAK,6BAAL;AACA,iBAAK,qBAAL;AACA,iBAAK,mBAAL;AACE;AACA4E,cAAAA,UAAU,CAAC5E,GAAD,CAAV,GAAkB6K,WAAW,CAAC7K,GAAD,CAA7B;AACA;;AACF,iBAAK,gBAAL;AACE4E,cAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BiG,WAAW,CAAC7K,GAAD,CAAxC;AACA;;AACF,iBAAK,WAAL;AACA,iBAAK,aAAL;AACE4E,cAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BxF,KAAK,CAAC0L,OAAN,CAAc,IAAIvK,IAAJ,CAASsK,WAAW,CAAC7K,GAAD,CAApB,CAAd,EAA0C+D,GAApE;AACA;;AACF,iBAAK,WAAL;AACA,iBAAK,aAAL;AACEa,cAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BxF,KAAK,CAAC0L,OAAN,CAAc,IAAIvK,IAAJ,CAASsK,WAAW,CAAC7K,GAAD,CAApB,CAAd,EAA0C+D,GAApE;AACA;;AACF,iBAAK,WAAL;AACA,iBAAK,YAAL;AACEa,cAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BxF,KAAK,CAAC0L,OAAN,CAAc,IAAIvK,IAAJ,CAASsK,WAAW,CAAC7K,GAAD,CAApB,CAAd,CAA1B;AACA;;AACF,iBAAK,UAAL;AACA,iBAAK,YAAL;AACE4E,cAAAA,UAAU,CAAC,UAAD,CAAV,GAAyBxF,KAAK,CAAC0L,OAAN,CAAc,IAAIvK,IAAJ,CAASsK,WAAW,CAAC7K,GAAD,CAApB,CAAd,EAA0C+D,GAAnE;AACA;;AACF,iBAAK,WAAL;AACA,iBAAK,YAAL;AACEa,cAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BiG,WAAW,CAAC7K,GAAD,CAArC;AACA;;AACF,iBAAK,UAAL;AACE,kBAAIV,SAAS,KAAK,OAAlB,EAA2B;AACzB4I,gCAAI2D,IAAJ,CACE,6FADF;AAGD,eAJD,MAIO;AACLjH,gBAAAA,UAAU,CAAC,UAAD,CAAV,GAAyBiG,WAAW,CAAC7K,GAAD,CAApC;AACD;;AACD;;AACF;AACE;AACA,kBAAIsC,aAAa,GAAGtC,GAAG,CAACmB,KAAJ,CAAU,8BAAV,CAApB;;AACA,kBAAImB,aAAa,IAAIhD,SAAS,KAAK,OAAnC,EAA4C;AAC1C,oBAAIiD,QAAQ,GAAGD,aAAa,CAAC,CAAD,CAA5B;AACAsC,gBAAAA,UAAU,CAAC,UAAD,CAAV,GAAyBA,UAAU,CAAC,UAAD,CAAV,IAA0B,EAAnD;AACAA,gBAAAA,UAAU,CAAC,UAAD,CAAV,CAAuBrC,QAAvB,IAAmCsI,WAAW,CAAC7K,GAAD,CAA9C;AACA;AACD;;AAED,kBAAIA,GAAG,CAACQ,OAAJ,CAAY,KAAZ,KAAsB,CAA1B,EAA6B;AAC3B,oBAAIsL,MAAM,GAAG9L,GAAG,CAAC+L,SAAJ,CAAc,CAAd,CAAb;;AACA,oBAAI,CAACvM,MAAM,CAACC,MAAP,CAAcqM,MAAd,CAAL,EAA4B;AAC1B5D,kCAAIzB,IAAJ,CACE,cADF,EAEE,wDAFF,EAGEnH,SAHF,EAIEwM,MAJF;;AAMA;AACD;;AACD,oBAAItM,MAAM,CAACC,MAAP,CAAcqM,MAAd,EAAsBnM,IAAtB,KAA+B,SAAnC,EAA8C;AAC5CuI,kCAAIzB,IAAJ,CACE,cADF,EAEE,uDAFF,EAGEnH,SAHF,EAIEU,GAJF;;AAMA;AACD;;AACD,oBAAI6K,WAAW,CAAC7K,GAAD,CAAX,KAAqB,IAAzB,EAA+B;AAC7B;AACD;;AACD4E,gBAAAA,UAAU,CAACkH,MAAD,CAAV,GAAqBN,sBAAsB,CAAChM,MAAD,EAASsM,MAAT,EAAiBjB,WAAW,CAAC7K,GAAD,CAA5B,CAA3C;AACA;AACD,eAzBD,MAyBO,IAAIA,GAAG,CAAC,CAAD,CAAH,IAAU,GAAV,IAAiBA,GAAG,IAAI,QAA5B,EAAsC;AAC3C,sBAAM,6BAA6BA,GAAnC;AACD,eAFM,MAEA;AACL,oBAAIG,KAAK,GAAG0K,WAAW,CAAC7K,GAAD,CAAvB;;AACA,oBACER,MAAM,CAACC,MAAP,CAAcO,GAAd,KACAR,MAAM,CAACC,MAAP,CAAcO,GAAd,EAAmBL,IAAnB,KAA4B,MAD5B,IAEAiG,SAAS,CAACsF,qBAAV,CAAgC/K,KAAhC,CAHF,EAIE;AACAyE,kBAAAA,UAAU,CAAC5E,GAAD,CAAV,GAAkB4F,SAAS,CAACuF,cAAV,CAAyBhL,KAAzB,CAAlB;AACA;AACD;;AACD,oBACEX,MAAM,CAACC,MAAP,CAAcO,GAAd,KACAR,MAAM,CAACC,MAAP,CAAcO,GAAd,EAAmBL,IAAnB,KAA4B,UAD5B,IAEA+F,aAAa,CAACwF,qBAAd,CAAoC/K,KAApC,CAHF,EAIE;AACAyE,kBAAAA,UAAU,CAAC5E,GAAD,CAAV,GAAkB0F,aAAa,CAACyF,cAAd,CAA6BhL,KAA7B,CAAlB;AACA;AACD;;AACD,oBACEX,MAAM,CAACC,MAAP,CAAcO,GAAd,KACAR,MAAM,CAACC,MAAP,CAAcO,GAAd,EAAmBL,IAAnB,KAA4B,SAD5B,IAEAgG,YAAY,CAACuF,qBAAb,CAAmC/K,KAAnC,CAHF,EAIE;AACAyE,kBAAAA,UAAU,CAAC5E,GAAD,CAAV,GAAkB2F,YAAY,CAACwF,cAAb,CAA4BhL,KAA5B,CAAlB;AACA;AACD;;AACD,oBACEX,MAAM,CAACC,MAAP,CAAcO,GAAd,KACAR,MAAM,CAACC,MAAP,CAAcO,GAAd,EAAmBL,IAAnB,KAA4B,OAD5B,IAEA4F,UAAU,CAAC2F,qBAAX,CAAiC/K,KAAjC,CAHF,EAIE;AACAyE,kBAAAA,UAAU,CAAC5E,GAAD,CAAV,GAAkBuF,UAAU,CAAC4F,cAAX,CAA0BhL,KAA1B,CAAlB;AACA;AACD;AACF;;AACDyE,cAAAA,UAAU,CAAC5E,GAAD,CAAV,GAAkB4K,oCAAoC,CAACC,WAAW,CAAC7K,GAAD,CAAZ,CAAtD;AA7HJ;AA+HD;;AAED,cAAMgM,kBAAkB,GAAGpK,MAAM,CAACC,IAAP,CAAYrC,MAAM,CAACC,MAAnB,EAA2B2G,MAA3B,CACzB7G,SAAS,IAAIC,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBI,IAAzB,KAAkC,UADtB,CAA3B;AAGA,cAAMsM,cAAc,GAAG,EAAvB;AACAD,QAAAA,kBAAkB,CAAClH,OAAnB,CAA2BoH,iBAAiB,IAAI;AAC9CD,UAAAA,cAAc,CAACC,iBAAD,CAAd,GAAoC;AAClCxM,YAAAA,MAAM,EAAE,UAD0B;AAElCJ,YAAAA,SAAS,EAAEE,MAAM,CAACC,MAAP,CAAcyM,iBAAd,EAAiCzG;AAFV,WAApC;AAID,SALD;AAOA,+CAAYb,UAAZ,GAA2BqH,cAA3B;AACD;;AACD;AACE,YAAM,iBAAN;AAzLJ;AA2LD,CA5LD;;AA8LA,IAAI7G,SAAS,GAAG;AACdE,EAAAA,cAAc,CAAC6G,IAAD,EAAO;AACnB,WAAO,IAAI5L,IAAJ,CAAS4L,IAAI,CAACpI,GAAd,CAAP;AACD,GAHa;;AAKdsB,EAAAA,WAAW,CAAClF,KAAD,EAAQ;AACjB,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+CA,KAAK,CAACT,MAAN,KAAiB,MAAvE;AACD;;AAPa,CAAhB;AAUA,IAAI6F,UAAU,GAAG;AACf6G,EAAAA,aAAa,EAAE,IAAIrL,MAAJ,CAAW,kEAAX,CADA;;AAEfsL,EAAAA,aAAa,CAAC3B,MAAD,EAAS;AACpB,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,aAAO,KAAP;AACD;;AACD,WAAO,KAAK0B,aAAL,CAAmBE,IAAnB,CAAwB5B,MAAxB,CAAP;AACD,GAPc;;AASfS,EAAAA,cAAc,CAACT,MAAD,EAAS;AACrB,QAAIvK,KAAJ;;AACA,QAAI,KAAKkM,aAAL,CAAmB3B,MAAnB,CAAJ,EAAgC;AAC9BvK,MAAAA,KAAK,GAAGuK,MAAR;AACD,KAFD,MAEO;AACLvK,MAAAA,KAAK,GAAGuK,MAAM,CAAC6B,MAAP,CAAcrL,QAAd,CAAuB,QAAvB,CAAR;AACD;;AACD,WAAO;AACLxB,MAAAA,MAAM,EAAE,OADH;AAEL8M,MAAAA,MAAM,EAAErM;AAFH,KAAP;AAID,GApBc;;AAsBf+K,EAAAA,qBAAqB,CAACR,MAAD,EAAS;AAC5B,WAAOA,MAAM,YAAYxL,OAAO,CAACuN,MAA1B,IAAoC,KAAKJ,aAAL,CAAmB3B,MAAnB,CAA3C;AACD,GAxBc;;AA0BfpF,EAAAA,cAAc,CAAC6G,IAAD,EAAO;AACnB,WAAO,IAAIjN,OAAO,CAACuN,MAAZ,CAAmBC,MAAM,CAACC,IAAP,CAAYR,IAAI,CAACK,MAAjB,EAAyB,QAAzB,CAAnB,CAAP;AACD,GA5Bc;;AA8BfnH,EAAAA,WAAW,CAAClF,KAAD,EAAQ;AACjB,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+CA,KAAK,CAACT,MAAN,KAAiB,OAAvE;AACD;;AAhCc,CAAjB;AAmCA,IAAIgG,aAAa,GAAG;AAClByF,EAAAA,cAAc,CAACT,MAAD,EAAS;AACrB,WAAO;AACLhL,MAAAA,MAAM,EAAE,UADH;AAELwJ,MAAAA,QAAQ,EAAEwB,MAAM,CAAC,CAAD,CAFX;AAGLzB,MAAAA,SAAS,EAAEyB,MAAM,CAAC,CAAD;AAHZ,KAAP;AAKD,GAPiB;;AASlBQ,EAAAA,qBAAqB,CAACR,MAAD,EAAS;AAC5B,WAAOA,MAAM,YAAYjK,KAAlB,IAA2BiK,MAAM,CAACnJ,MAAP,IAAiB,CAAnD;AACD,GAXiB;;AAalB+D,EAAAA,cAAc,CAAC6G,IAAD,EAAO;AACnB,WAAO,CAACA,IAAI,CAAClD,SAAN,EAAiBkD,IAAI,CAACjD,QAAtB,CAAP;AACD,GAfiB;;AAiBlB7D,EAAAA,WAAW,CAAClF,KAAD,EAAQ;AACjB,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+CA,KAAK,CAACT,MAAN,KAAiB,UAAvE;AACD;;AAnBiB,CAApB;AAsBA,IAAIiG,YAAY,GAAG;AACjBwF,EAAAA,cAAc,CAACT,MAAD,EAAS;AACrB;AACA,UAAMkC,MAAM,GAAGlC,MAAM,CAAChB,WAAP,CAAmB,CAAnB,EAAsBhJ,GAAtB,CAA0BmM,KAAK,IAAI;AAChD,aAAO,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAP;AACD,KAFc,CAAf;AAGA,WAAO;AACLnN,MAAAA,MAAM,EAAE,SADH;AAELgK,MAAAA,WAAW,EAAEkD;AAFR,KAAP;AAID,GAVgB;;AAYjB1B,EAAAA,qBAAqB,CAACR,MAAD,EAAS;AAC5B,UAAMkC,MAAM,GAAGlC,MAAM,CAAChB,WAAP,CAAmB,CAAnB,CAAf;;AACA,QAAIgB,MAAM,CAAC/K,IAAP,KAAgB,SAAhB,IAA6B,EAAEiN,MAAM,YAAYnM,KAApB,CAAjC,EAA6D;AAC3D,aAAO,KAAP;AACD;;AACD,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmL,MAAM,CAACrL,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACtC,YAAMqH,KAAK,GAAG8D,MAAM,CAACnL,CAAD,CAApB;;AACA,UAAI,CAACiE,aAAa,CAACwF,qBAAd,CAAoCpC,KAApC,CAAL,EAAiD;AAC/C,eAAO,KAAP;AACD;;AACD1J,MAAAA,KAAK,CAACuK,QAAN,CAAeC,SAAf,CAAyBkD,UAAU,CAAChE,KAAK,CAAC,CAAD,CAAN,CAAnC,EAA+CgE,UAAU,CAAChE,KAAK,CAAC,CAAD,CAAN,CAAzD;AACD;;AACD,WAAO,IAAP;AACD,GAzBgB;;AA2BjBxD,EAAAA,cAAc,CAAC6G,IAAD,EAAO;AACnB,QAAIS,MAAM,GAAGT,IAAI,CAACzC,WAAlB,CADmB,CAEnB;;AACA,QACEkD,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,MAAiBA,MAAM,CAACA,MAAM,CAACrL,MAAP,GAAgB,CAAjB,CAAN,CAA0B,CAA1B,CAAjB,IACAqL,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,MAAiBA,MAAM,CAACA,MAAM,CAACrL,MAAP,GAAgB,CAAjB,CAAN,CAA0B,CAA1B,CAFnB,EAGE;AACAqL,MAAAA,MAAM,CAAChG,IAAP,CAAYgG,MAAM,CAAC,CAAD,CAAlB;AACD;;AACD,UAAMG,MAAM,GAAGH,MAAM,CAACxG,MAAP,CAAc,CAAC4G,IAAD,EAAOC,KAAP,EAAcC,EAAd,KAAqB;AAChD,UAAIC,UAAU,GAAG,CAAC,CAAlB;;AACA,WAAK,IAAI1L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyL,EAAE,CAAC3L,MAAvB,EAA+BE,CAAC,IAAI,CAApC,EAAuC;AACrC,cAAM2L,EAAE,GAAGF,EAAE,CAACzL,CAAD,CAAb;;AACA,YAAI2L,EAAE,CAAC,CAAD,CAAF,KAAUJ,IAAI,CAAC,CAAD,CAAd,IAAqBI,EAAE,CAAC,CAAD,CAAF,KAAUJ,IAAI,CAAC,CAAD,CAAvC,EAA4C;AAC1CG,UAAAA,UAAU,GAAG1L,CAAb;AACA;AACD;AACF;;AACD,aAAO0L,UAAU,KAAKF,KAAtB;AACD,KAVc,CAAf;;AAWA,QAAIF,MAAM,CAACxL,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAInC,KAAK,CAAC0C,KAAV,CACJ1C,KAAK,CAAC0C,KAAN,CAAY+D,qBADR,EAEJ,uDAFI,CAAN;AAID,KAzBkB,CA0BnB;;;AACA+G,IAAAA,MAAM,GAAGA,MAAM,CAAClM,GAAP,CAAWmM,KAAK,IAAI;AAC3B,aAAO,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAP;AACD,KAFQ,CAAT;AAGA,WAAO;AAAElN,MAAAA,IAAI,EAAE,SAAR;AAAmB+J,MAAAA,WAAW,EAAE,CAACkD,MAAD;AAAhC,KAAP;AACD,GA1DgB;;AA4DjBvH,EAAAA,WAAW,CAAClF,KAAD,EAAQ;AACjB,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+CA,KAAK,CAACT,MAAN,KAAiB,SAAvE;AACD;;AA9DgB,CAAnB;AAiEA,IAAIkG,SAAS,GAAG;AACduF,EAAAA,cAAc,CAACT,MAAD,EAAS;AACrB,WAAO;AACLhL,MAAAA,MAAM,EAAE,MADH;AAEL2N,MAAAA,IAAI,EAAE3C;AAFD,KAAP;AAID,GANa;;AAQdQ,EAAAA,qBAAqB,CAACR,MAAD,EAAS;AAC5B,WAAO,OAAOA,MAAP,KAAkB,QAAzB;AACD,GAVa;;AAYdpF,EAAAA,cAAc,CAAC6G,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACkB,IAAZ;AACD,GAda;;AAgBdhI,EAAAA,WAAW,CAAClF,KAAD,EAAQ;AACjB,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+CA,KAAK,CAACT,MAAN,KAAiB,MAAvE;AACD;;AAlBa,CAAhB;AAqBA4N,MAAM,CAACC,OAAP,GAAiB;AACflO,EAAAA,YADe;AAEfmE,EAAAA,iCAFe;AAGfU,EAAAA,eAHe;AAIf7B,EAAAA,cAJe;AAKfsJ,EAAAA,wBALe;AAMf7F,EAAAA,kBANe;AAOflD,EAAAA,mBAPe;AAQf4I,EAAAA;AARe,CAAjB","sourcesContent":["import log from '../../../logger';\nimport _ from 'lodash';\nvar mongodb = require('mongodb');\nvar Parse = require('parse/node').Parse;\n\nconst transformKey = (className, fieldName, schema) => {\n  // Check if the schema is known since it's a built-in field.\n  switch (fieldName) {\n    case 'objectId':\n      return '_id';\n    case 'createdAt':\n      return '_created_at';\n    case 'updatedAt':\n      return '_updated_at';\n    case 'sessionToken':\n      return '_session_token';\n    case 'lastUsed':\n      return '_last_used';\n    case 'timesUsed':\n      return 'times_used';\n  }\n\n  if (schema.fields[fieldName] && schema.fields[fieldName].__type == 'Pointer') {\n    fieldName = '_p_' + fieldName;\n  } else if (schema.fields[fieldName] && schema.fields[fieldName].type == 'Pointer') {\n    fieldName = '_p_' + fieldName;\n  }\n\n  return fieldName;\n};\n\nconst transformKeyValueForUpdate = (className, restKey, restValue, parseFormatSchema) => {\n  // Check if the schema is known since it's a built-in field.\n  var key = restKey;\n  var timeField = false;\n  switch (key) {\n    case 'objectId':\n    case '_id':\n      if (['_GlobalConfig', '_GraphQLConfig'].includes(className)) {\n        return {\n          key: key,\n          value: parseInt(restValue),\n        };\n      }\n      key = '_id';\n      break;\n    case 'createdAt':\n    case '_created_at':\n      key = '_created_at';\n      timeField = true;\n      break;\n    case 'updatedAt':\n    case '_updated_at':\n      key = '_updated_at';\n      timeField = true;\n      break;\n    case 'sessionToken':\n    case '_session_token':\n      key = '_session_token';\n      break;\n    case 'expiresAt':\n    case '_expiresAt':\n      key = 'expiresAt';\n      timeField = true;\n      break;\n    case '_email_verify_token_expires_at':\n      key = '_email_verify_token_expires_at';\n      timeField = true;\n      break;\n    case '_account_lockout_expires_at':\n      key = '_account_lockout_expires_at';\n      timeField = true;\n      break;\n    case '_failed_login_count':\n      key = '_failed_login_count';\n      break;\n    case '_perishable_token_expires_at':\n      key = '_perishable_token_expires_at';\n      timeField = true;\n      break;\n    case '_password_changed_at':\n      key = '_password_changed_at';\n      timeField = true;\n      break;\n    case '_rperm':\n    case '_wperm':\n      return { key: key, value: restValue };\n    case 'lastUsed':\n    case '_last_used':\n      key = '_last_used';\n      timeField = true;\n      break;\n    case 'timesUsed':\n    case 'times_used':\n      key = 'times_used';\n      timeField = true;\n      break;\n  }\n\n  if (\n    (parseFormatSchema.fields[key] && parseFormatSchema.fields[key].type === 'Pointer') ||\n    (!parseFormatSchema.fields[key] && restValue && restValue.__type == 'Pointer')\n  ) {\n    key = '_p_' + key;\n  }\n\n  // Handle atomic values\n  var value = transformTopLevelAtom(restValue);\n  if (value !== CannotTransform) {\n    if (timeField && typeof value === 'string') {\n      value = new Date(value);\n    }\n    if (restKey.indexOf('.') > 0) {\n      return { key, value: restValue };\n    }\n    return { key, value };\n  }\n\n  // Handle arrays\n  if (restValue instanceof Array) {\n    value = restValue.map(transformInteriorValue);\n    return { key, value };\n  }\n\n  // Handle update operators\n  if (typeof restValue === 'object' && '__op' in restValue) {\n    return { key, value: transformUpdateOperator(restValue, false) };\n  }\n\n  // Handle normal objects by recursing\n  value = mapValues(restValue, transformInteriorValue);\n  return { key, value };\n};\n\nconst isRegex = value => {\n  return value && value instanceof RegExp;\n};\n\nconst isStartsWithRegex = value => {\n  if (!isRegex(value)) {\n    return false;\n  }\n\n  const matches = value.toString().match(/\\/\\^\\\\Q.*\\\\E\\//);\n  return !!matches;\n};\n\nconst isAllValuesRegexOrNone = values => {\n  if (!values || !Array.isArray(values) || values.length === 0) {\n    return true;\n  }\n\n  const firstValuesIsRegex = isStartsWithRegex(values[0]);\n  if (values.length === 1) {\n    return firstValuesIsRegex;\n  }\n\n  for (let i = 1, length = values.length; i < length; ++i) {\n    if (firstValuesIsRegex !== isStartsWithRegex(values[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isAnyValueRegex = values => {\n  return values.some(function (value) {\n    return isRegex(value);\n  });\n};\n\nconst transformInteriorValue = restValue => {\n  if (\n    restValue !== null &&\n    typeof restValue === 'object' &&\n    Object.keys(restValue).some(key => key.includes('$') || key.includes('.'))\n  ) {\n    throw new Parse.Error(\n      Parse.Error.INVALID_NESTED_KEY,\n      \"Nested keys should not contain the '$' or '.' characters\"\n    );\n  }\n  // Handle atomic values\n  var value = transformInteriorAtom(restValue);\n  if (value !== CannotTransform) {\n    return value;\n  }\n\n  // Handle arrays\n  if (restValue instanceof Array) {\n    return restValue.map(transformInteriorValue);\n  }\n\n  // Handle update operators\n  if (typeof restValue === 'object' && '__op' in restValue) {\n    return transformUpdateOperator(restValue, true);\n  }\n\n  // Handle normal objects by recursing\n  return mapValues(restValue, transformInteriorValue);\n};\n\nconst valueAsDate = value => {\n  if (typeof value === 'string') {\n    return new Date(value);\n  } else if (value instanceof Date) {\n    return value;\n  }\n  return false;\n};\n\nfunction transformQueryKeyValue(className, key, value, schema, count = false) {\n  switch (key) {\n    case 'createdAt':\n      if (valueAsDate(value)) {\n        return { key: '_created_at', value: valueAsDate(value) };\n      }\n      key = '_created_at';\n      break;\n    case 'updatedAt':\n      if (valueAsDate(value)) {\n        return { key: '_updated_at', value: valueAsDate(value) };\n      }\n      key = '_updated_at';\n      break;\n    case 'expiresAt':\n      if (valueAsDate(value)) {\n        return { key: 'expiresAt', value: valueAsDate(value) };\n      }\n      break;\n    case '_email_verify_token_expires_at':\n      if (valueAsDate(value)) {\n        return {\n          key: '_email_verify_token_expires_at',\n          value: valueAsDate(value),\n        };\n      }\n      break;\n    case 'objectId': {\n      if (['_GlobalConfig', '_GraphQLConfig'].includes(className)) {\n        value = parseInt(value);\n      }\n      return { key: '_id', value };\n    }\n    case '_account_lockout_expires_at':\n      if (valueAsDate(value)) {\n        return {\n          key: '_account_lockout_expires_at',\n          value: valueAsDate(value),\n        };\n      }\n      break;\n    case '_failed_login_count':\n      return { key, value };\n    case 'sessionToken':\n      return { key: '_session_token', value };\n    case '_perishable_token_expires_at':\n      if (valueAsDate(value)) {\n        return {\n          key: '_perishable_token_expires_at',\n          value: valueAsDate(value),\n        };\n      }\n      break;\n    case '_password_changed_at':\n      if (valueAsDate(value)) {\n        return { key: '_password_changed_at', value: valueAsDate(value) };\n      }\n      break;\n    case '_rperm':\n    case '_wperm':\n    case '_perishable_token':\n    case '_email_verify_token':\n      return { key, value };\n    case '$or':\n    case '$and':\n    case '$nor':\n      return {\n        key: key,\n        value: value.map(subQuery => transformWhere(className, subQuery, schema, count)),\n      };\n    case 'lastUsed':\n      if (valueAsDate(value)) {\n        return { key: '_last_used', value: valueAsDate(value) };\n      }\n      key = '_last_used';\n      break;\n    case 'timesUsed':\n      return { key: 'times_used', value: value };\n    default: {\n      // Other auth data\n      const authDataMatch = key.match(/^authData\\.([a-zA-Z0-9_]+)\\.id$/);\n      if (authDataMatch) {\n        const provider = authDataMatch[1];\n        // Special-case auth data.\n        return { key: `_auth_data_${provider}.id`, value };\n      }\n    }\n  }\n\n  const expectedTypeIsArray = schema && schema.fields[key] && schema.fields[key].type === 'Array';\n\n  const expectedTypeIsPointer =\n    schema && schema.fields[key] && schema.fields[key].type === 'Pointer';\n\n  const field = schema && schema.fields[key];\n  if (expectedTypeIsPointer || (!schema && value && value.__type === 'Pointer')) {\n    key = '_p_' + key;\n  }\n\n  // Handle query constraints\n  const transformedConstraint = transformConstraint(value, field, count);\n  if (transformedConstraint !== CannotTransform) {\n    if (transformedConstraint.$text) {\n      return { key: '$text', value: transformedConstraint.$text };\n    }\n    if (transformedConstraint.$elemMatch) {\n      return { key: '$nor', value: [{ [key]: transformedConstraint }] };\n    }\n    return { key, value: transformedConstraint };\n  }\n\n  if (expectedTypeIsArray && !(value instanceof Array)) {\n    return { key, value: { $all: [transformInteriorAtom(value)] } };\n  }\n\n  // Handle atomic values\n  if (transformTopLevelAtom(value) !== CannotTransform) {\n    return { key, value: transformTopLevelAtom(value) };\n  } else {\n    throw new Parse.Error(\n      Parse.Error.INVALID_JSON,\n      `You cannot use ${value} as a query parameter.`\n    );\n  }\n}\n\n// Main exposed method to help run queries.\n// restWhere is the \"where\" clause in REST API form.\n// Returns the mongo form of the query.\nfunction transformWhere(className, restWhere, schema, count = false) {\n  const mongoWhere = {};\n  for (const restKey in restWhere) {\n    const out = transformQueryKeyValue(className, restKey, restWhere[restKey], schema, count);\n    mongoWhere[out.key] = out.value;\n  }\n  return mongoWhere;\n}\n\nconst parseObjectKeyValueToMongoObjectKeyValue = (restKey, restValue, schema) => {\n  // Check if the schema is known since it's a built-in field.\n  let transformedValue;\n  let coercedToDate;\n  switch (restKey) {\n    case 'objectId':\n      return { key: '_id', value: restValue };\n    case 'expiresAt':\n      transformedValue = transformTopLevelAtom(restValue);\n      coercedToDate =\n        typeof transformedValue === 'string' ? new Date(transformedValue) : transformedValue;\n      return { key: 'expiresAt', value: coercedToDate };\n    case '_email_verify_token_expires_at':\n      transformedValue = transformTopLevelAtom(restValue);\n      coercedToDate =\n        typeof transformedValue === 'string' ? new Date(transformedValue) : transformedValue;\n      return { key: '_email_verify_token_expires_at', value: coercedToDate };\n    case '_account_lockout_expires_at':\n      transformedValue = transformTopLevelAtom(restValue);\n      coercedToDate =\n        typeof transformedValue === 'string' ? new Date(transformedValue) : transformedValue;\n      return { key: '_account_lockout_expires_at', value: coercedToDate };\n    case '_perishable_token_expires_at':\n      transformedValue = transformTopLevelAtom(restValue);\n      coercedToDate =\n        typeof transformedValue === 'string' ? new Date(transformedValue) : transformedValue;\n      return { key: '_perishable_token_expires_at', value: coercedToDate };\n    case '_password_changed_at':\n      transformedValue = transformTopLevelAtom(restValue);\n      coercedToDate =\n        typeof transformedValue === 'string' ? new Date(transformedValue) : transformedValue;\n      return { key: '_password_changed_at', value: coercedToDate };\n    case '_failed_login_count':\n    case '_rperm':\n    case '_wperm':\n    case '_email_verify_token':\n    case '_hashed_password':\n    case '_perishable_token':\n      return { key: restKey, value: restValue };\n    case 'sessionToken':\n      return { key: '_session_token', value: restValue };\n    default:\n      // Auth data should have been transformed already\n      if (restKey.match(/^authData\\.([a-zA-Z0-9_]+)\\.id$/)) {\n        throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'can only query on ' + restKey);\n      }\n      // Trust that the auth data has been transformed and save it directly\n      if (restKey.match(/^_auth_data_[a-zA-Z0-9_]+$/)) {\n        return { key: restKey, value: restValue };\n      }\n  }\n  //skip straight to transformTopLevelAtom for Bytes, they don't show up in the schema for some reason\n  if (restValue && restValue.__type !== 'Bytes') {\n    //Note: We may not know the type of a field here, as the user could be saving (null) to a field\n    //That never existed before, meaning we can't infer the type.\n    if (\n      (schema.fields[restKey] && schema.fields[restKey].type == 'Pointer') ||\n      restValue.__type == 'Pointer'\n    ) {\n      restKey = '_p_' + restKey;\n    }\n  }\n\n  // Handle atomic values\n  var value = transformTopLevelAtom(restValue);\n  if (value !== CannotTransform) {\n    return { key: restKey, value: value };\n  }\n\n  // ACLs are handled before this method is called\n  // If an ACL key still exists here, something is wrong.\n  if (restKey === 'ACL') {\n    throw 'There was a problem transforming an ACL.';\n  }\n\n  // Handle arrays\n  if (restValue instanceof Array) {\n    value = restValue.map(transformInteriorValue);\n    return { key: restKey, value: value };\n  }\n\n  // Handle normal objects by recursing\n  if (Object.keys(restValue).some(key => key.includes('$') || key.includes('.'))) {\n    throw new Parse.Error(\n      Parse.Error.INVALID_NESTED_KEY,\n      \"Nested keys should not contain the '$' or '.' characters\"\n    );\n  }\n  value = mapValues(restValue, transformInteriorValue);\n  return { key: restKey, value };\n};\n\nconst parseObjectToMongoObjectForCreate = (className, restCreate, schema) => {\n  restCreate = addLegacyACL(restCreate);\n  const mongoCreate = {};\n  for (const restKey in restCreate) {\n    if (restCreate[restKey] && restCreate[restKey].__type === 'Relation') {\n      continue;\n    }\n    const { key, value } = parseObjectKeyValueToMongoObjectKeyValue(\n      restKey,\n      restCreate[restKey],\n      schema\n    );\n    if (value !== undefined) {\n      mongoCreate[key] = value;\n    }\n  }\n\n  // Use the legacy mongo format for createdAt and updatedAt\n  if (mongoCreate.createdAt) {\n    mongoCreate._created_at = new Date(mongoCreate.createdAt.iso || mongoCreate.createdAt);\n    delete mongoCreate.createdAt;\n  }\n  if (mongoCreate.updatedAt) {\n    mongoCreate._updated_at = new Date(mongoCreate.updatedAt.iso || mongoCreate.updatedAt);\n    delete mongoCreate.updatedAt;\n  }\n\n  return mongoCreate;\n};\n\n// Main exposed method to help update old objects.\nconst transformUpdate = (className, restUpdate, parseFormatSchema) => {\n  const mongoUpdate = {};\n  const acl = addLegacyACL(restUpdate);\n  if (acl._rperm || acl._wperm || acl._acl) {\n    mongoUpdate.$set = {};\n    if (acl._rperm) {\n      mongoUpdate.$set._rperm = acl._rperm;\n    }\n    if (acl._wperm) {\n      mongoUpdate.$set._wperm = acl._wperm;\n    }\n    if (acl._acl) {\n      mongoUpdate.$set._acl = acl._acl;\n    }\n  }\n  for (var restKey in restUpdate) {\n    if (restUpdate[restKey] && restUpdate[restKey].__type === 'Relation') {\n      continue;\n    }\n    var out = transformKeyValueForUpdate(\n      className,\n      restKey,\n      restUpdate[restKey],\n      parseFormatSchema\n    );\n\n    // If the output value is an object with any $ keys, it's an\n    // operator that needs to be lifted onto the top level update\n    // object.\n    if (typeof out.value === 'object' && out.value !== null && out.value.__op) {\n      mongoUpdate[out.value.__op] = mongoUpdate[out.value.__op] || {};\n      mongoUpdate[out.value.__op][out.key] = out.value.arg;\n    } else {\n      mongoUpdate['$set'] = mongoUpdate['$set'] || {};\n      mongoUpdate['$set'][out.key] = out.value;\n    }\n  }\n\n  return mongoUpdate;\n};\n\n// Add the legacy _acl format.\nconst addLegacyACL = restObject => {\n  const restObjectCopy = { ...restObject };\n  const _acl = {};\n\n  if (restObject._wperm) {\n    restObject._wperm.forEach(entry => {\n      _acl[entry] = { w: true };\n    });\n    restObjectCopy._acl = _acl;\n  }\n\n  if (restObject._rperm) {\n    restObject._rperm.forEach(entry => {\n      if (!(entry in _acl)) {\n        _acl[entry] = { r: true };\n      } else {\n        _acl[entry].r = true;\n      }\n    });\n    restObjectCopy._acl = _acl;\n  }\n\n  return restObjectCopy;\n};\n\n// A sentinel value that helper transformations return when they\n// cannot perform a transformation\nfunction CannotTransform() {}\n\nconst transformInteriorAtom = atom => {\n  // TODO: check validity harder for the __type-defined types\n  if (typeof atom === 'object' && atom && !(atom instanceof Date) && atom.__type === 'Pointer') {\n    return {\n      __type: 'Pointer',\n      className: atom.className,\n      objectId: atom.objectId,\n    };\n  } else if (typeof atom === 'function' || typeof atom === 'symbol') {\n    throw new Parse.Error(Parse.Error.INVALID_JSON, `cannot transform value: ${atom}`);\n  } else if (DateCoder.isValidJSON(atom)) {\n    return DateCoder.JSONToDatabase(atom);\n  } else if (BytesCoder.isValidJSON(atom)) {\n    return BytesCoder.JSONToDatabase(atom);\n  } else if (typeof atom === 'object' && atom && atom.$regex !== undefined) {\n    return new RegExp(atom.$regex);\n  } else {\n    return atom;\n  }\n};\n\n// Helper function to transform an atom from REST format to Mongo format.\n// An atom is anything that can't contain other expressions. So it\n// includes things where objects are used to represent other\n// datatypes, like pointers and dates, but it does not include objects\n// or arrays with generic stuff inside.\n// Raises an error if this cannot possibly be valid REST format.\n// Returns CannotTransform if it's just not an atom\nfunction transformTopLevelAtom(atom, field) {\n  switch (typeof atom) {\n    case 'number':\n    case 'boolean':\n    case 'undefined':\n      return atom;\n    case 'string':\n      if (field && field.type === 'Pointer') {\n        return `${field.targetClass}$${atom}`;\n      }\n      return atom;\n    case 'symbol':\n    case 'function':\n      throw new Parse.Error(Parse.Error.INVALID_JSON, `cannot transform value: ${atom}`);\n    case 'object':\n      if (atom instanceof Date) {\n        // Technically dates are not rest format, but, it seems pretty\n        // clear what they should be transformed to, so let's just do it.\n        return atom;\n      }\n\n      if (atom === null) {\n        return atom;\n      }\n\n      // TODO: check validity harder for the __type-defined types\n      if (atom.__type == 'Pointer') {\n        return `${atom.className}$${atom.objectId}`;\n      }\n      if (DateCoder.isValidJSON(atom)) {\n        return DateCoder.JSONToDatabase(atom);\n      }\n      if (BytesCoder.isValidJSON(atom)) {\n        return BytesCoder.JSONToDatabase(atom);\n      }\n      if (GeoPointCoder.isValidJSON(atom)) {\n        return GeoPointCoder.JSONToDatabase(atom);\n      }\n      if (PolygonCoder.isValidJSON(atom)) {\n        return PolygonCoder.JSONToDatabase(atom);\n      }\n      if (FileCoder.isValidJSON(atom)) {\n        return FileCoder.JSONToDatabase(atom);\n      }\n      return CannotTransform;\n\n    default:\n      // I don't think typeof can ever let us get here\n      throw new Parse.Error(\n        Parse.Error.INTERNAL_SERVER_ERROR,\n        `really did not expect value: ${atom}`\n      );\n  }\n}\n\nfunction relativeTimeToDate(text, now = new Date()) {\n  text = text.toLowerCase();\n\n  let parts = text.split(' ');\n\n  // Filter out whitespace\n  parts = parts.filter(part => part !== '');\n\n  const future = parts[0] === 'in';\n  const past = parts[parts.length - 1] === 'ago';\n\n  if (!future && !past && text !== 'now') {\n    return {\n      status: 'error',\n      info: \"Time should either start with 'in' or end with 'ago'\",\n    };\n  }\n\n  if (future && past) {\n    return {\n      status: 'error',\n      info: \"Time cannot have both 'in' and 'ago'\",\n    };\n  }\n\n  // strip the 'ago' or 'in'\n  if (future) {\n    parts = parts.slice(1);\n  } else {\n    // past\n    parts = parts.slice(0, parts.length - 1);\n  }\n\n  if (parts.length % 2 !== 0 && text !== 'now') {\n    return {\n      status: 'error',\n      info: 'Invalid time string. Dangling unit or number.',\n    };\n  }\n\n  const pairs = [];\n  while (parts.length) {\n    pairs.push([parts.shift(), parts.shift()]);\n  }\n\n  let seconds = 0;\n  for (const [num, interval] of pairs) {\n    const val = Number(num);\n    if (!Number.isInteger(val)) {\n      return {\n        status: 'error',\n        info: `'${num}' is not an integer.`,\n      };\n    }\n\n    switch (interval) {\n      case 'yr':\n      case 'yrs':\n      case 'year':\n      case 'years':\n        seconds += val * 31536000; // 365 * 24 * 60 * 60\n        break;\n\n      case 'wk':\n      case 'wks':\n      case 'week':\n      case 'weeks':\n        seconds += val * 604800; // 7 * 24 * 60 * 60\n        break;\n\n      case 'd':\n      case 'day':\n      case 'days':\n        seconds += val * 86400; // 24 * 60 * 60\n        break;\n\n      case 'hr':\n      case 'hrs':\n      case 'hour':\n      case 'hours':\n        seconds += val * 3600; // 60 * 60\n        break;\n\n      case 'min':\n      case 'mins':\n      case 'minute':\n      case 'minutes':\n        seconds += val * 60;\n        break;\n\n      case 'sec':\n      case 'secs':\n      case 'second':\n      case 'seconds':\n        seconds += val;\n        break;\n\n      default:\n        return {\n          status: 'error',\n          info: `Invalid interval: '${interval}'`,\n        };\n    }\n  }\n\n  const milliseconds = seconds * 1000;\n  if (future) {\n    return {\n      status: 'success',\n      info: 'future',\n      result: new Date(now.valueOf() + milliseconds),\n    };\n  } else if (past) {\n    return {\n      status: 'success',\n      info: 'past',\n      result: new Date(now.valueOf() - milliseconds),\n    };\n  } else {\n    return {\n      status: 'success',\n      info: 'present',\n      result: new Date(now.valueOf()),\n    };\n  }\n}\n\n// Transforms a query constraint from REST API format to Mongo format.\n// A constraint is something with fields like $lt.\n// If it is not a valid constraint but it could be a valid something\n// else, return CannotTransform.\n// inArray is whether this is an array field.\nfunction transformConstraint(constraint, field, count = false) {\n  const inArray = field && field.type && field.type === 'Array';\n  if (typeof constraint !== 'object' || !constraint) {\n    return CannotTransform;\n  }\n  const transformFunction = inArray ? transformInteriorAtom : transformTopLevelAtom;\n  const transformer = atom => {\n    const result = transformFunction(atom, field);\n    if (result === CannotTransform) {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, `bad atom: ${JSON.stringify(atom)}`);\n    }\n    return result;\n  };\n  // keys is the constraints in reverse alphabetical order.\n  // This is a hack so that:\n  //   $regex is handled before $options\n  //   $nearSphere is handled before $maxDistance\n  var keys = Object.keys(constraint).sort().reverse();\n  var answer = {};\n  for (var key of keys) {\n    switch (key) {\n      case '$lt':\n      case '$lte':\n      case '$gt':\n      case '$gte':\n      case '$exists':\n      case '$ne':\n      case '$eq': {\n        const val = constraint[key];\n        if (val && typeof val === 'object' && val.$relativeTime) {\n          if (field && field.type !== 'Date') {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              '$relativeTime can only be used with Date field'\n            );\n          }\n\n          switch (key) {\n            case '$exists':\n            case '$ne':\n            case '$eq':\n              throw new Parse.Error(\n                Parse.Error.INVALID_JSON,\n                '$relativeTime can only be used with the $lt, $lte, $gt, and $gte operators'\n              );\n          }\n\n          const parserResult = relativeTimeToDate(val.$relativeTime);\n          if (parserResult.status === 'success') {\n            answer[key] = parserResult.result;\n            break;\n          }\n\n          log.info('Error while parsing relative date', parserResult);\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            `bad $relativeTime (${key}) value. ${parserResult.info}`\n          );\n        }\n\n        answer[key] = transformer(val);\n        break;\n      }\n\n      case '$in':\n      case '$nin': {\n        const arr = constraint[key];\n        if (!(arr instanceof Array)) {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad ' + key + ' value');\n        }\n        answer[key] = _.flatMap(arr, value => {\n          return (atom => {\n            if (Array.isArray(atom)) {\n              return value.map(transformer);\n            } else {\n              return transformer(atom);\n            }\n          })(value);\n        });\n        break;\n      }\n      case '$all': {\n        const arr = constraint[key];\n        if (!(arr instanceof Array)) {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad ' + key + ' value');\n        }\n        answer[key] = arr.map(transformInteriorAtom);\n\n        const values = answer[key];\n        if (isAnyValueRegex(values) && !isAllValuesRegexOrNone(values)) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'All $all values must be of regex type or none: ' + values\n          );\n        }\n\n        break;\n      }\n      case '$regex':\n        var s = constraint[key];\n        if (typeof s !== 'string') {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad regex: ' + s);\n        }\n        answer[key] = s;\n        break;\n\n      case '$containedBy': {\n        const arr = constraint[key];\n        if (!(arr instanceof Array)) {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $containedBy: should be an array`);\n        }\n        answer.$elemMatch = {\n          $nin: arr.map(transformer),\n        };\n        break;\n      }\n      case '$options':\n        answer[key] = constraint[key];\n        break;\n\n      case '$text': {\n        const search = constraint[key].$search;\n        if (typeof search !== 'object') {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $search, should be object`);\n        }\n        if (!search.$term || typeof search.$term !== 'string') {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $term, should be string`);\n        } else {\n          answer[key] = {\n            $search: search.$term,\n          };\n        }\n        if (search.$language && typeof search.$language !== 'string') {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $language, should be string`);\n        } else if (search.$language) {\n          answer[key].$language = search.$language;\n        }\n        if (search.$caseSensitive && typeof search.$caseSensitive !== 'boolean') {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            `bad $text: $caseSensitive, should be boolean`\n          );\n        } else if (search.$caseSensitive) {\n          answer[key].$caseSensitive = search.$caseSensitive;\n        }\n        if (search.$diacriticSensitive && typeof search.$diacriticSensitive !== 'boolean') {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            `bad $text: $diacriticSensitive, should be boolean`\n          );\n        } else if (search.$diacriticSensitive) {\n          answer[key].$diacriticSensitive = search.$diacriticSensitive;\n        }\n        break;\n      }\n      case '$nearSphere': {\n        const point = constraint[key];\n        if (count) {\n          answer.$geoWithin = {\n            $centerSphere: [[point.longitude, point.latitude], constraint.$maxDistance],\n          };\n        } else {\n          answer[key] = [point.longitude, point.latitude];\n        }\n        break;\n      }\n      case '$maxDistance': {\n        if (count) {\n          break;\n        }\n        answer[key] = constraint[key];\n        break;\n      }\n      // The SDKs don't seem to use these but they are documented in the\n      // REST API docs.\n      case '$maxDistanceInRadians':\n        answer['$maxDistance'] = constraint[key];\n        break;\n      case '$maxDistanceInMiles':\n        answer['$maxDistance'] = constraint[key] / 3959;\n        break;\n      case '$maxDistanceInKilometers':\n        answer['$maxDistance'] = constraint[key] / 6371;\n        break;\n\n      case '$select':\n      case '$dontSelect':\n        throw new Parse.Error(\n          Parse.Error.COMMAND_UNAVAILABLE,\n          'the ' + key + ' constraint is not supported yet'\n        );\n\n      case '$within':\n        var box = constraint[key]['$box'];\n        if (!box || box.length != 2) {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, 'malformatted $within arg');\n        }\n        answer[key] = {\n          $box: [\n            [box[0].longitude, box[0].latitude],\n            [box[1].longitude, box[1].latitude],\n          ],\n        };\n        break;\n\n      case '$geoWithin': {\n        const polygon = constraint[key]['$polygon'];\n        const centerSphere = constraint[key]['$centerSphere'];\n        if (polygon !== undefined) {\n          let points;\n          if (typeof polygon === 'object' && polygon.__type === 'Polygon') {\n            if (!polygon.coordinates || polygon.coordinates.length < 3) {\n              throw new Parse.Error(\n                Parse.Error.INVALID_JSON,\n                'bad $geoWithin value; Polygon.coordinates should contain at least 3 lon/lat pairs'\n              );\n            }\n            points = polygon.coordinates;\n          } else if (polygon instanceof Array) {\n            if (polygon.length < 3) {\n              throw new Parse.Error(\n                Parse.Error.INVALID_JSON,\n                'bad $geoWithin value; $polygon should contain at least 3 GeoPoints'\n              );\n            }\n            points = polygon;\n          } else {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              \"bad $geoWithin value; $polygon should be Polygon object or Array of Parse.GeoPoint's\"\n            );\n          }\n          points = points.map(point => {\n            if (point instanceof Array && point.length === 2) {\n              Parse.GeoPoint._validate(point[1], point[0]);\n              return point;\n            }\n            if (!GeoPointCoder.isValidJSON(point)) {\n              throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $geoWithin value');\n            } else {\n              Parse.GeoPoint._validate(point.latitude, point.longitude);\n            }\n            return [point.longitude, point.latitude];\n          });\n          answer[key] = {\n            $polygon: points,\n          };\n        } else if (centerSphere !== undefined) {\n          if (!(centerSphere instanceof Array) || centerSphere.length < 2) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              'bad $geoWithin value; $centerSphere should be an array of Parse.GeoPoint and distance'\n            );\n          }\n          // Get point, convert to geo point if necessary and validate\n          let point = centerSphere[0];\n          if (point instanceof Array && point.length === 2) {\n            point = new Parse.GeoPoint(point[1], point[0]);\n          } else if (!GeoPointCoder.isValidJSON(point)) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              'bad $geoWithin value; $centerSphere geo point invalid'\n            );\n          }\n          Parse.GeoPoint._validate(point.latitude, point.longitude);\n          // Get distance and validate\n          const distance = centerSphere[1];\n          if (isNaN(distance) || distance < 0) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              'bad $geoWithin value; $centerSphere distance invalid'\n            );\n          }\n          answer[key] = {\n            $centerSphere: [[point.longitude, point.latitude], distance],\n          };\n        }\n        break;\n      }\n      case '$geoIntersects': {\n        const point = constraint[key]['$point'];\n        if (!GeoPointCoder.isValidJSON(point)) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'bad $geoIntersect value; $point should be GeoPoint'\n          );\n        } else {\n          Parse.GeoPoint._validate(point.latitude, point.longitude);\n        }\n        answer[key] = {\n          $geometry: {\n            type: 'Point',\n            coordinates: [point.longitude, point.latitude],\n          },\n        };\n        break;\n      }\n      default:\n        if (key.match(/^\\$+/)) {\n          throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad constraint: ' + key);\n        }\n        return CannotTransform;\n    }\n  }\n  return answer;\n}\n\n// Transforms an update operator from REST format to mongo format.\n// To be transformed, the input should have an __op field.\n// If flatten is true, this will flatten operators to their static\n// data format. For example, an increment of 2 would simply become a\n// 2.\n// The output for a non-flattened operator is a hash with __op being\n// the mongo op, and arg being the argument.\n// The output for a flattened operator is just a value.\n// Returns undefined if this should be a no-op.\n\nfunction transformUpdateOperator({ __op, amount, objects }, flatten) {\n  switch (__op) {\n    case 'Delete':\n      if (flatten) {\n        return undefined;\n      } else {\n        return { __op: '$unset', arg: '' };\n      }\n\n    case 'Increment':\n      if (typeof amount !== 'number') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, 'incrementing must provide a number');\n      }\n      if (flatten) {\n        return amount;\n      } else {\n        return { __op: '$inc', arg: amount };\n      }\n\n    case 'Add':\n    case 'AddUnique':\n      if (!(objects instanceof Array)) {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, 'objects to add must be an array');\n      }\n      var toAdd = objects.map(transformInteriorAtom);\n      if (flatten) {\n        return toAdd;\n      } else {\n        var mongoOp = {\n          Add: '$push',\n          AddUnique: '$addToSet',\n        }[__op];\n        return { __op: mongoOp, arg: { $each: toAdd } };\n      }\n\n    case 'Remove':\n      if (!(objects instanceof Array)) {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, 'objects to remove must be an array');\n      }\n      var toRemove = objects.map(transformInteriorAtom);\n      if (flatten) {\n        return [];\n      } else {\n        return { __op: '$pullAll', arg: toRemove };\n      }\n\n    default:\n      throw new Parse.Error(\n        Parse.Error.COMMAND_UNAVAILABLE,\n        `The ${__op} operator is not supported yet.`\n      );\n  }\n}\nfunction mapValues(object, iterator) {\n  const result = {};\n  Object.keys(object).forEach(key => {\n    result[key] = iterator(object[key]);\n  });\n  return result;\n}\n\nconst nestedMongoObjectToNestedParseObject = mongoObject => {\n  switch (typeof mongoObject) {\n    case 'string':\n    case 'number':\n    case 'boolean':\n    case 'undefined':\n      return mongoObject;\n    case 'symbol':\n    case 'function':\n      throw 'bad value in nestedMongoObjectToNestedParseObject';\n    case 'object':\n      if (mongoObject === null) {\n        return null;\n      }\n      if (mongoObject instanceof Array) {\n        return mongoObject.map(nestedMongoObjectToNestedParseObject);\n      }\n\n      if (mongoObject instanceof Date) {\n        return Parse._encode(mongoObject);\n      }\n\n      if (mongoObject instanceof mongodb.Long) {\n        return mongoObject.toNumber();\n      }\n\n      if (mongoObject instanceof mongodb.Double) {\n        return mongoObject.value;\n      }\n\n      if (BytesCoder.isValidDatabaseObject(mongoObject)) {\n        return BytesCoder.databaseToJSON(mongoObject);\n      }\n\n      if (\n        Object.prototype.hasOwnProperty.call(mongoObject, '__type') &&\n        mongoObject.__type == 'Date' &&\n        mongoObject.iso instanceof Date\n      ) {\n        mongoObject.iso = mongoObject.iso.toJSON();\n        return mongoObject;\n      }\n\n      return mapValues(mongoObject, nestedMongoObjectToNestedParseObject);\n    default:\n      throw 'unknown js type';\n  }\n};\n\nconst transformPointerString = (schema, field, pointerString) => {\n  const objData = pointerString.split('$');\n  if (objData[0] !== schema.fields[field].targetClass) {\n    throw 'pointer to incorrect className';\n  }\n  return {\n    __type: 'Pointer',\n    className: objData[0],\n    objectId: objData[1],\n  };\n};\n\n// Converts from a mongo-format object to a REST-format object.\n// Does not strip out anything based on a lack of authentication.\nconst mongoObjectToParseObject = (className, mongoObject, schema) => {\n  switch (typeof mongoObject) {\n    case 'string':\n    case 'number':\n    case 'boolean':\n    case 'undefined':\n      return mongoObject;\n    case 'symbol':\n    case 'function':\n      throw 'bad value in mongoObjectToParseObject';\n    case 'object': {\n      if (mongoObject === null) {\n        return null;\n      }\n      if (mongoObject instanceof Array) {\n        return mongoObject.map(nestedMongoObjectToNestedParseObject);\n      }\n\n      if (mongoObject instanceof Date) {\n        return Parse._encode(mongoObject);\n      }\n\n      if (mongoObject instanceof mongodb.Long) {\n        return mongoObject.toNumber();\n      }\n\n      if (mongoObject instanceof mongodb.Double) {\n        return mongoObject.value;\n      }\n\n      if (BytesCoder.isValidDatabaseObject(mongoObject)) {\n        return BytesCoder.databaseToJSON(mongoObject);\n      }\n\n      const restObject = {};\n      if (mongoObject._rperm || mongoObject._wperm) {\n        restObject._rperm = mongoObject._rperm || [];\n        restObject._wperm = mongoObject._wperm || [];\n        delete mongoObject._rperm;\n        delete mongoObject._wperm;\n      }\n\n      for (var key in mongoObject) {\n        switch (key) {\n          case '_id':\n            restObject['objectId'] = '' + mongoObject[key];\n            break;\n          case '_hashed_password':\n            restObject._hashed_password = mongoObject[key];\n            break;\n          case '_acl':\n            break;\n          case '_email_verify_token':\n          case '_perishable_token':\n          case '_perishable_token_expires_at':\n          case '_password_changed_at':\n          case '_tombstone':\n          case '_email_verify_token_expires_at':\n          case '_account_lockout_expires_at':\n          case '_failed_login_count':\n          case '_password_history':\n            // Those keys will be deleted if needed in the DB Controller\n            restObject[key] = mongoObject[key];\n            break;\n          case '_session_token':\n            restObject['sessionToken'] = mongoObject[key];\n            break;\n          case 'updatedAt':\n          case '_updated_at':\n            restObject['updatedAt'] = Parse._encode(new Date(mongoObject[key])).iso;\n            break;\n          case 'createdAt':\n          case '_created_at':\n            restObject['createdAt'] = Parse._encode(new Date(mongoObject[key])).iso;\n            break;\n          case 'expiresAt':\n          case '_expiresAt':\n            restObject['expiresAt'] = Parse._encode(new Date(mongoObject[key]));\n            break;\n          case 'lastUsed':\n          case '_last_used':\n            restObject['lastUsed'] = Parse._encode(new Date(mongoObject[key])).iso;\n            break;\n          case 'timesUsed':\n          case 'times_used':\n            restObject['timesUsed'] = mongoObject[key];\n            break;\n          case 'authData':\n            if (className === '_User') {\n              log.warn(\n                'ignoring authData in _User as this key is reserved to be synthesized of `_auth_data_*` keys'\n              );\n            } else {\n              restObject['authData'] = mongoObject[key];\n            }\n            break;\n          default:\n            // Check other auth data keys\n            var authDataMatch = key.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n            if (authDataMatch && className === '_User') {\n              var provider = authDataMatch[1];\n              restObject['authData'] = restObject['authData'] || {};\n              restObject['authData'][provider] = mongoObject[key];\n              break;\n            }\n\n            if (key.indexOf('_p_') == 0) {\n              var newKey = key.substring(3);\n              if (!schema.fields[newKey]) {\n                log.info(\n                  'transform.js',\n                  'Found a pointer column not in the schema, dropping it.',\n                  className,\n                  newKey\n                );\n                break;\n              }\n              if (schema.fields[newKey].type !== 'Pointer') {\n                log.info(\n                  'transform.js',\n                  'Found a pointer in a non-pointer column, dropping it.',\n                  className,\n                  key\n                );\n                break;\n              }\n              if (mongoObject[key] === null) {\n                break;\n              }\n              restObject[newKey] = transformPointerString(schema, newKey, mongoObject[key]);\n              break;\n            } else if (key[0] == '_' && key != '__type') {\n              throw 'bad key in untransform: ' + key;\n            } else {\n              var value = mongoObject[key];\n              if (\n                schema.fields[key] &&\n                schema.fields[key].type === 'File' &&\n                FileCoder.isValidDatabaseObject(value)\n              ) {\n                restObject[key] = FileCoder.databaseToJSON(value);\n                break;\n              }\n              if (\n                schema.fields[key] &&\n                schema.fields[key].type === 'GeoPoint' &&\n                GeoPointCoder.isValidDatabaseObject(value)\n              ) {\n                restObject[key] = GeoPointCoder.databaseToJSON(value);\n                break;\n              }\n              if (\n                schema.fields[key] &&\n                schema.fields[key].type === 'Polygon' &&\n                PolygonCoder.isValidDatabaseObject(value)\n              ) {\n                restObject[key] = PolygonCoder.databaseToJSON(value);\n                break;\n              }\n              if (\n                schema.fields[key] &&\n                schema.fields[key].type === 'Bytes' &&\n                BytesCoder.isValidDatabaseObject(value)\n              ) {\n                restObject[key] = BytesCoder.databaseToJSON(value);\n                break;\n              }\n            }\n            restObject[key] = nestedMongoObjectToNestedParseObject(mongoObject[key]);\n        }\n      }\n\n      const relationFieldNames = Object.keys(schema.fields).filter(\n        fieldName => schema.fields[fieldName].type === 'Relation'\n      );\n      const relationFields = {};\n      relationFieldNames.forEach(relationFieldName => {\n        relationFields[relationFieldName] = {\n          __type: 'Relation',\n          className: schema.fields[relationFieldName].targetClass,\n        };\n      });\n\n      return { ...restObject, ...relationFields };\n    }\n    default:\n      throw 'unknown js type';\n  }\n};\n\nvar DateCoder = {\n  JSONToDatabase(json) {\n    return new Date(json.iso);\n  },\n\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'Date';\n  },\n};\n\nvar BytesCoder = {\n  base64Pattern: new RegExp('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'),\n  isBase64Value(object) {\n    if (typeof object !== 'string') {\n      return false;\n    }\n    return this.base64Pattern.test(object);\n  },\n\n  databaseToJSON(object) {\n    let value;\n    if (this.isBase64Value(object)) {\n      value = object;\n    } else {\n      value = object.buffer.toString('base64');\n    }\n    return {\n      __type: 'Bytes',\n      base64: value,\n    };\n  },\n\n  isValidDatabaseObject(object) {\n    return object instanceof mongodb.Binary || this.isBase64Value(object);\n  },\n\n  JSONToDatabase(json) {\n    return new mongodb.Binary(Buffer.from(json.base64, 'base64'));\n  },\n\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'Bytes';\n  },\n};\n\nvar GeoPointCoder = {\n  databaseToJSON(object) {\n    return {\n      __type: 'GeoPoint',\n      latitude: object[1],\n      longitude: object[0],\n    };\n  },\n\n  isValidDatabaseObject(object) {\n    return object instanceof Array && object.length == 2;\n  },\n\n  JSONToDatabase(json) {\n    return [json.longitude, json.latitude];\n  },\n\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'GeoPoint';\n  },\n};\n\nvar PolygonCoder = {\n  databaseToJSON(object) {\n    // Convert lng/lat -> lat/lng\n    const coords = object.coordinates[0].map(coord => {\n      return [coord[1], coord[0]];\n    });\n    return {\n      __type: 'Polygon',\n      coordinates: coords,\n    };\n  },\n\n  isValidDatabaseObject(object) {\n    const coords = object.coordinates[0];\n    if (object.type !== 'Polygon' || !(coords instanceof Array)) {\n      return false;\n    }\n    for (let i = 0; i < coords.length; i++) {\n      const point = coords[i];\n      if (!GeoPointCoder.isValidDatabaseObject(point)) {\n        return false;\n      }\n      Parse.GeoPoint._validate(parseFloat(point[1]), parseFloat(point[0]));\n    }\n    return true;\n  },\n\n  JSONToDatabase(json) {\n    let coords = json.coordinates;\n    // Add first point to the end to close polygon\n    if (\n      coords[0][0] !== coords[coords.length - 1][0] ||\n      coords[0][1] !== coords[coords.length - 1][1]\n    ) {\n      coords.push(coords[0]);\n    }\n    const unique = coords.filter((item, index, ar) => {\n      let foundIndex = -1;\n      for (let i = 0; i < ar.length; i += 1) {\n        const pt = ar[i];\n        if (pt[0] === item[0] && pt[1] === item[1]) {\n          foundIndex = i;\n          break;\n        }\n      }\n      return foundIndex === index;\n    });\n    if (unique.length < 3) {\n      throw new Parse.Error(\n        Parse.Error.INTERNAL_SERVER_ERROR,\n        'GeoJSON: Loop must have at least 3 different vertices'\n      );\n    }\n    // Convert lat/long -> long/lat\n    coords = coords.map(coord => {\n      return [coord[1], coord[0]];\n    });\n    return { type: 'Polygon', coordinates: [coords] };\n  },\n\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'Polygon';\n  },\n};\n\nvar FileCoder = {\n  databaseToJSON(object) {\n    return {\n      __type: 'File',\n      name: object,\n    };\n  },\n\n  isValidDatabaseObject(object) {\n    return typeof object === 'string';\n  },\n\n  JSONToDatabase(json) {\n    return json.name;\n  },\n\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'File';\n  },\n};\n\nmodule.exports = {\n  transformKey,\n  parseObjectToMongoObjectForCreate,\n  transformUpdate,\n  transformWhere,\n  mongoObjectToParseObject,\n  relativeTimeToDate,\n  transformConstraint,\n  transformPointerString,\n};\n"],"file":"MongoTransform.js"}