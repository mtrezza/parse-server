{"version":3,"sources":["../../../src/Adapters/Push/PushAdapter.js"],"names":["PushAdapter","send","body","installations","pushStatus","getValidPushTypes"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACO,MAAMA,WAAN,CAAkB;AACvB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,CAACC,IAAD,EAAYC,aAAZ,EAAkCC,UAAlC,EAAgE,CAAE;AAEtE;AACF;AACA;AACA;;;AACEC,EAAAA,iBAAiB,GAAa;AAC5B,WAAO,EAAP;AACD;;AAfsB;;;eAkBVL,W","sourcesContent":["// @flow\n/*eslint no-unused-vars: \"off\"*/\n// Push Adapter\n//\n// Allows you to change the push notification mechanism.\n//\n// Adapter classes must implement the following functions:\n// * getValidPushTypes()\n// * send(devices, installations, pushStatus)\n//\n// Default is ParsePushAdapter, which uses GCM for\n// android push and APNS for ios push.\n\n/**\n * @module Adapters\n */\n/**\n * @interface PushAdapter\n */\nexport class PushAdapter {\n  /**\n   * @param {any} body\n   * @param {Parse.Installation[]} installations\n   * @param {any} pushStatus\n   * @returns {Promise}\n   */\n  send(body: any, installations: any[], pushStatus: any): ?Promise<*> {}\n\n  /**\n   * Get an array of valid push types.\n   * @returns {Array} An array of valid push types\n   */\n  getValidPushTypes(): string[] {\n    return [];\n  }\n}\n\nexport default PushAdapter;\n"],"file":"PushAdapter.js"}