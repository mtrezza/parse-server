{"version":3,"sources":["../../../src/Adapters/Files/GridStoreAdapter.js"],"names":["GridStoreAdapter","FilesAdapter","constructor","mongoDatabaseURI","defaults","DefaultMongoURI","mongoOptions","_databaseURI","defaultMongoOptions","useNewUrlParser","useUnifiedTopology","_mongoOptions","Object","assign","_connect","_connectionPromise","MongoClient","connect","then","client","_client","db","s","options","dbName","createFile","filename","data","database","gridStore","GridStore","open","write","close","deleteFile","unlink","getFileData","exist","read","getFileLocation","config","mount","applicationId","encodeURIComponent","handleFileStream","req","res","contentType","stream","handleRangeRequest","handleShutdown","Promise","resolve","validateFilename","buffer_size","parts","get","replace","split","start","end","notEnded","notStarted","length","contentLength","writeHead","seek","gridFileStream","bufferAvail","remainingBytesToWrite","totalBytesWritten","on","buffer","slice","destroy"],"mappings":";;;;;;;AAUA;;AACA;;AACA;;;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKO,MAAMA,gBAAN,SAA+BC,0BAA/B,CAA4C;AAKjDC,EAAAA,WAAW,CAACC,gBAAgB,GAAGC,kBAASC,eAA7B,EAA8CC,YAAY,GAAG,EAA7D,EAAiE;AAC1E;AACA,SAAKC,YAAL,GAAoBJ,gBAApB;AAEA,UAAMK,mBAAmB,GAAG;AAC1BC,MAAAA,eAAe,EAAE,IADS;AAE1BC,MAAAA,kBAAkB,EAAE;AAFM,KAA5B;AAIA,SAAKC,aAAL,GAAqBC,MAAM,CAACC,MAAP,CAAcL,mBAAd,EAAmCF,YAAnC,CAArB;AACD;;AAEDQ,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKC,kBAAV,EAA8B;AAC5B,WAAKA,kBAAL,GAA0BC,qBAAYC,OAAZ,CAAoB,KAAKV,YAAzB,EAAuC,KAAKI,aAA5C,EAA2DO,IAA3D,CACxBC,MAAM,IAAI;AACR,aAAKC,OAAL,GAAeD,MAAf;AACA,eAAOA,MAAM,CAACE,EAAP,CAAUF,MAAM,CAACG,CAAP,CAASC,OAAT,CAAiBC,MAA3B,CAAP;AACD,OAJuB,CAA1B;AAMD;;AACD,WAAO,KAAKT,kBAAZ;AACD,GA1BgD,CA4BjD;AACA;;;AACAU,EAAAA,UAAU,CAACC,QAAD,EAAmBC,IAAnB,EAAyB;AACjC,WAAO,KAAKb,QAAL,GACJI,IADI,CACCU,QAAQ,IAAI;AAChB,YAAMC,SAAS,GAAG,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,aAAOG,SAAS,CAACE,IAAV,EAAP;AACD,KAJI,EAKJb,IALI,CAKCW,SAAS,IAAI;AACjB,aAAOA,SAAS,CAACG,KAAV,CAAgBL,IAAhB,CAAP;AACD,KAPI,EAQJT,IARI,CAQCW,SAAS,IAAI;AACjB,aAAOA,SAAS,CAACI,KAAV,EAAP;AACD,KAVI,CAAP;AAWD;;AAEDC,EAAAA,UAAU,CAACR,QAAD,EAAmB;AAC3B,WAAO,KAAKZ,QAAL,GACJI,IADI,CACCU,QAAQ,IAAI;AAChB,YAAMC,SAAS,GAAG,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,aAAOG,SAAS,CAACE,IAAV,EAAP;AACD,KAJI,EAKJb,IALI,CAKCW,SAAS,IAAI;AACjB,aAAOA,SAAS,CAACM,MAAV,EAAP;AACD,KAPI,EAQJjB,IARI,CAQCW,SAAS,IAAI;AACjB,aAAOA,SAAS,CAACI,KAAV,EAAP;AACD,KAVI,CAAP;AAWD;;AAEDG,EAAAA,WAAW,CAACV,QAAD,EAAmB;AAC5B,WAAO,KAAKZ,QAAL,GACJI,IADI,CACCU,QAAQ,IAAI;AAChB,aAAOE,mBAAUO,KAAV,CAAgBT,QAAhB,EAA0BF,QAA1B,EAAoCR,IAApC,CAAyC,MAAM;AACpD,cAAMW,SAAS,GAAG,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,eAAOG,SAAS,CAACE,IAAV,EAAP;AACD,OAHM,CAAP;AAID,KANI,EAOJb,IAPI,CAOCW,SAAS,IAAI;AACjB,aAAOA,SAAS,CAACS,IAAV,EAAP;AACD,KATI,CAAP;AAUD;;AAEDC,EAAAA,eAAe,CAACC,MAAD,EAASd,QAAT,EAAmB;AAChC,WAAOc,MAAM,CAACC,KAAP,GAAe,SAAf,GAA2BD,MAAM,CAACE,aAAlC,GAAkD,GAAlD,GAAwDC,kBAAkB,CAACjB,QAAD,CAAjF;AACD;;AAED,QAAMkB,gBAAN,CAAuBlB,QAAvB,EAAyCmB,GAAzC,EAA8CC,GAA9C,EAAmDC,WAAnD,EAAgE;AAC9D,UAAMC,MAAM,GAAG,MAAM,KAAKlC,QAAL,GAAgBI,IAAhB,CAAqBU,QAAQ,IAAI;AACpD,aAAOE,mBAAUO,KAAV,CAAgBT,QAAhB,EAA0BF,QAA1B,EAAoCR,IAApC,CAAyC,MAAM;AACpD,cAAMW,SAAS,GAAG,IAAIC,kBAAJ,CAAcF,QAAd,EAAwBF,QAAxB,EAAkC,GAAlC,CAAlB;AACA,eAAOG,SAAS,CAACE,IAAV,EAAP;AACD,OAHM,CAAP;AAID,KALoB,CAArB;AAMAkB,IAAAA,kBAAkB,CAACD,MAAD,EAASH,GAAT,EAAcC,GAAd,EAAmBC,WAAnB,CAAlB;AACD;;AAEDG,EAAAA,cAAc,GAAG;AACf,QAAI,CAAC,KAAK9B,OAAV,EAAmB;AACjB,aAAO+B,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,WAAO,KAAKhC,OAAL,CAAaa,KAAb,CAAmB,KAAnB,CAAP;AACD;;AAEDoB,EAAAA,gBAAgB,CAAC3B,QAAD,EAAW;AACzB,WAAO,oCAAiBA,QAAjB,CAAP;AACD;;AA9FgD,C,CAiGnD;AACA;;;;;AACA,SAASuB,kBAAT,CAA4BD,MAA5B,EAAoCH,GAApC,EAAyCC,GAAzC,EAA8CC,WAA9C,EAA2D;AACzD,QAAMO,WAAW,GAAG,OAAO,IAA3B,CADyD,CACxB;AACjC;;AACA,QAAMC,KAAK,GAAGV,GAAG,CACdW,GADW,CACP,OADO,EAEXC,OAFW,CAEH,QAFG,EAEO,EAFP,EAGXC,KAHW,CAGL,GAHK,CAAd;AAIA,MAAI,CAACC,KAAD,EAAQC,GAAR,IAAeL,KAAnB;AACA,QAAMM,QAAQ,GAAG,CAACD,GAAD,IAAQA,GAAG,KAAK,CAAjC;AACA,QAAME,UAAU,GAAG,CAACH,KAAD,IAAUA,KAAK,KAAK,CAAvC,CATyD,CAUzD;;AACA,MAAIE,QAAJ,EAAc;AACZD,IAAAA,GAAG,GAAGZ,MAAM,CAACe,MAAP,GAAgB,CAAtB;AACD,GAbwD,CAczD;;;AACA,MAAID,UAAJ,EAAgB;AACdH,IAAAA,KAAK,GAAGX,MAAM,CAACe,MAAP,GAAgBH,GAAxB;AACAA,IAAAA,GAAG,GAAGD,KAAK,GAAGC,GAAR,GAAc,CAApB;AACD,GAlBwD,CAoBzD;;;AACA,MAAIA,GAAG,GAAGD,KAAN,IAAeL,WAAnB,EAAgC;AAC9BM,IAAAA,GAAG,GAAGD,KAAK,GAAGL,WAAR,GAAsB,CAA5B;AACD;;AAED,QAAMU,aAAa,GAAGJ,GAAG,GAAGD,KAAN,GAAc,CAApC;AAEAb,EAAAA,GAAG,CAACmB,SAAJ,CAAc,GAAd,EAAmB;AACjB,qBAAiB,WAAWN,KAAX,GAAmB,GAAnB,GAAyBC,GAAzB,GAA+B,GAA/B,GAAqCZ,MAAM,CAACe,MAD5C;AAEjB,qBAAiB,OAFA;AAGjB,sBAAkBC,aAHD;AAIjB,oBAAgBjB;AAJC,GAAnB;AAOAC,EAAAA,MAAM,CAACkB,IAAP,CAAYP,KAAZ,EAAmB,YAAY;AAC7B;AACA,UAAMQ,cAAc,GAAGnB,MAAM,CAACA,MAAP,CAAc,IAAd,CAAvB;AACA,QAAIoB,WAAW,GAAG,CAAlB;AACA,QAAIC,qBAAqB,GAAGL,aAA5B;AACA,QAAIM,iBAAiB,GAAG,CAAxB,CAL6B,CAM7B;;AACAH,IAAAA,cAAc,CAACI,EAAf,CAAkB,MAAlB,EAA0B,UAAU5C,IAAV,EAAgB;AACxCyC,MAAAA,WAAW,IAAIzC,IAAI,CAACoC,MAApB;;AACA,UAAIK,WAAW,GAAG,CAAlB,EAAqB;AACnB;AACA;AACA,cAAMI,MAAM,GAAG7C,IAAI,CAAC8C,KAAL,CAAW,CAAX,EAAcJ,qBAAd,CAAf,CAHmB,CAInB;;AACAvB,QAAAA,GAAG,CAACd,KAAJ,CAAUwC,MAAV,EALmB,CAMnB;;AACAF,QAAAA,iBAAiB,IAAIE,MAAM,CAACT,MAA5B,CAPmB,CAQnB;;AACAM,QAAAA,qBAAqB,IAAI1C,IAAI,CAACoC,MAA9B,CATmB,CAUnB;;AACAK,QAAAA,WAAW,IAAII,MAAM,CAACT,MAAtB;AACD,OAduC,CAexC;AACA;;;AACA,UAAIO,iBAAiB,IAAIN,aAAzB,EAAwC;AACtChB,QAAAA,MAAM,CAACf,KAAP;AACAa,QAAAA,GAAG,CAACc,GAAJ;AACA,aAAKc,OAAL;AACD;AACF,KAtBD;AAuBD,GA9BD;AA+BD;;eAEc1E,gB","sourcesContent":["/**\n GridStoreAdapter\n Stores files in Mongo using GridStore\n Requires the database adapter to be based on mongoclient\n (GridStore is deprecated, Please use GridFSBucket instead)\n\n @flow weak\n */\n\n// @flow-disable-next\nimport { MongoClient, GridStore, Db } from 'mongodb';\nimport { FilesAdapter, validateFilename } from './FilesAdapter';\nimport defaults from '../../defaults';\n\nexport class GridStoreAdapter extends FilesAdapter {\n  _databaseURI: string;\n  _connectionPromise: Promise<Db>;\n  _mongoOptions: Object;\n\n  constructor(mongoDatabaseURI = defaults.DefaultMongoURI, mongoOptions = {}) {\n    super();\n    this._databaseURI = mongoDatabaseURI;\n\n    const defaultMongoOptions = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    };\n    this._mongoOptions = Object.assign(defaultMongoOptions, mongoOptions);\n  }\n\n  _connect() {\n    if (!this._connectionPromise) {\n      this._connectionPromise = MongoClient.connect(this._databaseURI, this._mongoOptions).then(\n        client => {\n          this._client = client;\n          return client.db(client.s.options.dbName);\n        }\n      );\n    }\n    return this._connectionPromise;\n  }\n\n  // For a given config object, filename, and data, store a file\n  // Returns a promise\n  createFile(filename: string, data) {\n    return this._connect()\n      .then(database => {\n        const gridStore = new GridStore(database, filename, 'w');\n        return gridStore.open();\n      })\n      .then(gridStore => {\n        return gridStore.write(data);\n      })\n      .then(gridStore => {\n        return gridStore.close();\n      });\n  }\n\n  deleteFile(filename: string) {\n    return this._connect()\n      .then(database => {\n        const gridStore = new GridStore(database, filename, 'r');\n        return gridStore.open();\n      })\n      .then(gridStore => {\n        return gridStore.unlink();\n      })\n      .then(gridStore => {\n        return gridStore.close();\n      });\n  }\n\n  getFileData(filename: string) {\n    return this._connect()\n      .then(database => {\n        return GridStore.exist(database, filename).then(() => {\n          const gridStore = new GridStore(database, filename, 'r');\n          return gridStore.open();\n        });\n      })\n      .then(gridStore => {\n        return gridStore.read();\n      });\n  }\n\n  getFileLocation(config, filename) {\n    return config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename);\n  }\n\n  async handleFileStream(filename: string, req, res, contentType) {\n    const stream = await this._connect().then(database => {\n      return GridStore.exist(database, filename).then(() => {\n        const gridStore = new GridStore(database, filename, 'r');\n        return gridStore.open();\n      });\n    });\n    handleRangeRequest(stream, req, res, contentType);\n  }\n\n  handleShutdown() {\n    if (!this._client) {\n      return Promise.resolve();\n    }\n    return this._client.close(false);\n  }\n\n  validateFilename(filename) {\n    return validateFilename(filename);\n  }\n}\n\n// handleRangeRequest is licensed under Creative Commons Attribution 4.0 International License (https://creativecommons.org/licenses/by/4.0/).\n// Author: LEROIB at weightingformypizza (https://weightingformypizza.wordpress.com/2015/06/24/stream-html5-media-content-like-video-audio-from-mongodb-using-express-and-gridstore/).\nfunction handleRangeRequest(stream, req, res, contentType) {\n  const buffer_size = 1024 * 1024; //1024Kb\n  // Range request, partial stream the file\n  const parts = req\n    .get('Range')\n    .replace(/bytes=/, '')\n    .split('-');\n  let [start, end] = parts;\n  const notEnded = !end && end !== 0;\n  const notStarted = !start && start !== 0;\n  // No end provided, we want all bytes\n  if (notEnded) {\n    end = stream.length - 1;\n  }\n  // No start provided, we're reading backwards\n  if (notStarted) {\n    start = stream.length - end;\n    end = start + end - 1;\n  }\n\n  // Data exceeds the buffer_size, cap\n  if (end - start >= buffer_size) {\n    end = start + buffer_size - 1;\n  }\n\n  const contentLength = end - start + 1;\n\n  res.writeHead(206, {\n    'Content-Range': 'bytes ' + start + '-' + end + '/' + stream.length,\n    'Accept-Ranges': 'bytes',\n    'Content-Length': contentLength,\n    'Content-Type': contentType,\n  });\n\n  stream.seek(start, function () {\n    // Get gridFile stream\n    const gridFileStream = stream.stream(true);\n    let bufferAvail = 0;\n    let remainingBytesToWrite = contentLength;\n    let totalBytesWritten = 0;\n    // Write to response\n    gridFileStream.on('data', function (data) {\n      bufferAvail += data.length;\n      if (bufferAvail > 0) {\n        // slice returns the same buffer if overflowing\n        // safe to call in any case\n        const buffer = data.slice(0, remainingBytesToWrite);\n        // Write the buffer\n        res.write(buffer);\n        // Increment total\n        totalBytesWritten += buffer.length;\n        // Decrement remaining\n        remainingBytesToWrite -= data.length;\n        // Decrement the available buffer\n        bufferAvail -= buffer.length;\n      }\n      // In case of small slices, all values will be good at that point\n      // we've written enough, end...\n      if (totalBytesWritten >= contentLength) {\n        stream.close();\n        res.end();\n        this.destroy();\n      }\n    });\n  });\n}\n\nexport default GridStoreAdapter;\n"],"file":"GridStoreAdapter.js"}