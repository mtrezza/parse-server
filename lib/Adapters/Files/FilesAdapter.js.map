{"version":3,"sources":["../../../src/Adapters/Files/FilesAdapter.js"],"names":["FilesAdapter","createFile","filename","data","contentType","options","deleteFile","getFileData","getFileLocation","config","validateFilename","length","Parse","Error","INVALID_FILE_NAME","regx","match"],"mappings":";;;;;;;;AAmBA;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AACA;AACA;AACA;AACO,MAAMA,YAAN,CAAmB;AACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,UAAU,CAACC,QAAD,EAAmBC,IAAnB,EAAyBC,WAAzB,EAA8CC,OAA9C,EAAwE,CAAE;AAEpF;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,UAAU,CAACJ,QAAD,EAA4B,CAAE;AAExC;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,WAAW,CAACL,QAAD,EAAiC,CAAE;AAE9C;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,eAAe,CAACC,MAAD,EAAiBP,QAAjB,EAA2C,CAAE;AAE5D;AACF;AACA;AACA;AACA;AACA;AACE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACE;;;AAlEwB;AAqE1B;AACA;AACA;AACA;AACA;AACA;;;;;AACO,SAASQ,gBAAT,CAA0BR,QAA1B,EAAkD;AACvD,MAAIA,QAAQ,CAACS,MAAT,GAAkB,GAAtB,EAA2B;AACzB,WAAO,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,iBAA5B,EAA+C,oBAA/C,CAAP;AACD;;AAED,QAAMC,IAAI,GAAG,kCAAb;;AACA,MAAI,CAACb,QAAQ,CAACc,KAAT,CAAeD,IAAf,CAAL,EAA2B;AACzB,WAAO,IAAIH,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,iBAA5B,EAA+C,uCAA/C,CAAP;AACD;;AACD,SAAO,IAAP;AACD;;eAEcd,Y","sourcesContent":["/*eslint no-unused-vars: \"off\"*/\n// Files Adapter\n//\n// Allows you to change the file storage mechanism.\n//\n// Adapter classes must implement the following functions:\n// * createFile(filename, data, contentType)\n// * deleteFile(filename)\n// * getFileData(filename)\n// * getFileLocation(config, filename)\n// Adapter classes should implement the following functions:\n// * validateFilename(filename)\n// * handleFileStream(filename, req, res, contentType)\n//\n// Default is GridFSBucketAdapter, which requires mongo\n// and for the API server to be using the DatabaseController with Mongo\n// database adapter.\n\nimport type { Config } from '../../Config';\nimport Parse from 'parse/node';\n/**\n * @module Adapters\n */\n/**\n * @interface FilesAdapter\n */\nexport class FilesAdapter {\n  /** Responsible for storing the file in order to be retrieved later by its filename\n   *\n   * @param {string} filename - the filename to save\n   * @param {*} data - the buffer of data from the file\n   * @param {string} contentType - the supposed contentType\n   * @discussion the contentType can be undefined if the controller was not able to determine it\n   * @param {object} options - (Optional) options to be passed to file adapter (S3 File Adapter Only)\n   * - tags: object containing key value pairs that will be stored with file\n   * - metadata: object containing key value pairs that will be sotred with file (https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-object-metadata.html)\n   * @discussion options are not supported by all file adapters. Check the your adapter's documentation for compatibility\n   *\n   * @return {Promise} a promise that should fail if the storage didn't succeed\n   */\n  createFile(filename: string, data, contentType: string, options: Object): Promise {}\n\n  /** Responsible for deleting the specified file\n   *\n   * @param {string} filename - the filename to delete\n   *\n   * @return {Promise} a promise that should fail if the deletion didn't succeed\n   */\n  deleteFile(filename: string): Promise {}\n\n  /** Responsible for retrieving the data of the specified file\n   *\n   * @param {string} filename - the name of file to retrieve\n   *\n   * @return {Promise} a promise that should pass with the file data or fail on error\n   */\n  getFileData(filename: string): Promise<any> {}\n\n  /** Returns an absolute URL where the file can be accessed\n   *\n   * @param {Config} config - server configuration\n   * @param {string} filename\n   *\n   * @return {string} Absolute URL\n   */\n  getFileLocation(config: Config, filename: string): string {}\n\n  /** Validate a filename for this adapter type\n   *\n   * @param {string} filename\n   *\n   * @returns {null|Parse.Error} null if there are no errors\n   */\n  // validateFilename(filename: string): ?Parse.Error {}\n\n  /** Handles Byte-Range Requests for Streaming\n   *\n   * @param {string} filename\n   * @param {object} req\n   * @param {object} res\n   * @param {string} contentType\n   *\n   * @returns {Promise} Data for byte range\n   */\n  // handleFileStream(filename: string, res: any, req: any, contentType: string): Promise\n\n  /** Responsible for retrieving metadata and tags\n   *\n   * @param {string} filename - the filename to retrieve metadata\n   *\n   * @return {Promise} a promise that should pass with metadata\n   */\n  // getMetadata(filename: string): Promise<any> {}\n}\n\n/**\n * Simple filename validation\n *\n * @param filename\n * @returns {null|Parse.Error}\n */\nexport function validateFilename(filename): ?Parse.Error {\n  if (filename.length > 128) {\n    return new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename too long.');\n  }\n\n  const regx = /^[_a-zA-Z0-9][a-zA-Z0-9@. ~_-]*$/;\n  if (!filename.match(regx)) {\n    return new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename contains invalid characters.');\n  }\n  return null;\n}\n\nexport default FilesAdapter;\n"],"file":"FilesAdapter.js"}