{"version":3,"sources":["../../../src/Adapters/Files/GridFSBucketAdapter.js"],"names":["crypto","require","GridFSBucketAdapter","FilesAdapter","constructor","mongoDatabaseURI","defaults","DefaultMongoURI","mongoOptions","encryptionKey","undefined","_databaseURI","_algorithm","_encryptionKey","createHash","update","String","digest","substr","defaultMongoOptions","useNewUrlParser","useUnifiedTopology","_mongoOptions","Object","assign","_connect","_connectionPromise","MongoClient","connect","then","client","_client","db","s","options","dbName","_getBucket","database","GridFSBucket","createFile","filename","data","contentType","bucket","stream","openUploadStream","metadata","iv","randomBytes","cipher","createCipheriv","encryptedResult","Buffer","concat","final","getAuthTag","write","err","Promise","resolve","reject","end","on","deleteFile","documents","find","toArray","length","Error","all","map","doc","delete","_id","getFileData","openDownloadStreamByName","read","chunks","push","authTagLocation","ivLocation","authTag","slice","encrypted","decipher","createDecipheriv","setAuthTag","decrypted","rotateEncryptionKey","fileNames","oldKeyFileAdapter","oldKey","fileNamesIterator","forEach","file","fileNamesNotRotated","fileNamesRotated","fileNameTotal","fileNameIndex","fileName","plainTextData","filter","value","rotated","notRotated","catch","getFileLocation","config","mount","applicationId","encodeURIComponent","getMetadata","files","handleFileStream","req","res","parts","get","replace","split","partialstart","partialend","start","parseInt","writeHead","chunk","sendStatus","handleShutdown","close","validateFilename"],"mappings":"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","sourcesContent":["/**\n GridFSBucketAdapter\n Stores files in Mongo using GridStore\n Requires the database adapter to be based on mongoclient\n\n @flow weak\n */\n\n// @flow-disable-next\nimport { MongoClient, GridFSBucket, Db } from 'mongodb';\nimport { FilesAdapter, validateFilename } from './FilesAdapter';\nimport defaults from '../../defaults';\nconst crypto = require('crypto');\n\nexport class GridFSBucketAdapter extends FilesAdapter {\n  _databaseURI: string;\n  _connectionPromise: Promise<Db>;\n  _mongoOptions: Object;\n  _algorithm: string;\n\n  constructor(\n    mongoDatabaseURI = defaults.DefaultMongoURI,\n    mongoOptions = {},\n    encryptionKey = undefined\n  ) {\n    super();\n    this._databaseURI = mongoDatabaseURI;\n    this._algorithm = 'aes-256-gcm';\n    this._encryptionKey =\n      encryptionKey !== undefined\n        ? crypto.createHash('sha256').update(String(encryptionKey)).digest('base64').substr(0, 32)\n        : null;\n    const defaultMongoOptions = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    };\n    this._mongoOptions = Object.assign(defaultMongoOptions, mongoOptions);\n  }\n\n  _connect() {\n    if (!this._connectionPromise) {\n      this._connectionPromise = MongoClient.connect(this._databaseURI, this._mongoOptions).then(\n        client => {\n          this._client = client;\n          return client.db(client.s.options.dbName);\n        }\n      );\n    }\n    return this._connectionPromise;\n  }\n\n  _getBucket() {\n    return this._connect().then(database => new GridFSBucket(database));\n  }\n\n  // For a given config object, filename, and data, store a file\n  // Returns a promise\n  async createFile(filename: string, data, contentType, options = {}) {\n    const bucket = await this._getBucket();\n    const stream = await bucket.openUploadStream(filename, {\n      metadata: options.metadata,\n    });\n    if (this._encryptionKey !== null) {\n      try {\n        const iv = crypto.randomBytes(16);\n        const cipher = crypto.createCipheriv(this._algorithm, this._encryptionKey, iv);\n        const encryptedResult = Buffer.concat([\n          cipher.update(data),\n          cipher.final(),\n          iv,\n          cipher.getAuthTag(),\n        ]);\n        await stream.write(encryptedResult);\n      } catch (err) {\n        return new Promise((resolve, reject) => {\n          return reject(err);\n        });\n      }\n    } else {\n      await stream.write(data);\n    }\n    stream.end();\n    return new Promise((resolve, reject) => {\n      stream.on('finish', resolve);\n      stream.on('error', reject);\n    });\n  }\n\n  async deleteFile(filename: string) {\n    const bucket = await this._getBucket();\n    const documents = await bucket.find({ filename }).toArray();\n    if (documents.length === 0) {\n      throw new Error('FileNotFound');\n    }\n    return Promise.all(\n      documents.map(doc => {\n        return bucket.delete(doc._id);\n      })\n    );\n  }\n\n  async getFileData(filename: string) {\n    const bucket = await this._getBucket();\n    const stream = bucket.openDownloadStreamByName(filename);\n    stream.read();\n    return new Promise((resolve, reject) => {\n      const chunks = [];\n      stream.on('data', data => {\n        chunks.push(data);\n      });\n      stream.on('end', () => {\n        const data = Buffer.concat(chunks);\n        if (this._encryptionKey !== null) {\n          try {\n            const authTagLocation = data.length - 16;\n            const ivLocation = data.length - 32;\n            const authTag = data.slice(authTagLocation);\n            const iv = data.slice(ivLocation, authTagLocation);\n            const encrypted = data.slice(0, ivLocation);\n            const decipher = crypto.createDecipheriv(this._algorithm, this._encryptionKey, iv);\n            decipher.setAuthTag(authTag);\n            const decrypted = Buffer.concat([decipher.update(encrypted), decipher.final()]);\n            return resolve(decrypted);\n          } catch (err) {\n            return reject(err);\n          }\n        }\n        resolve(data);\n      });\n      stream.on('error', err => {\n        reject(err);\n      });\n    });\n  }\n\n  async rotateEncryptionKey(options = {}) {\n    var fileNames = [];\n    var oldKeyFileAdapter = {};\n    const bucket = await this._getBucket();\n    if (options.oldKey !== undefined) {\n      oldKeyFileAdapter = new GridFSBucketAdapter(\n        this._databaseURI,\n        this._mongoOptions,\n        options.oldKey\n      );\n    } else {\n      oldKeyFileAdapter = new GridFSBucketAdapter(this._databaseURI, this._mongoOptions);\n    }\n    if (options.fileNames !== undefined) {\n      fileNames = options.fileNames;\n    } else {\n      const fileNamesIterator = await bucket.find().toArray();\n      fileNamesIterator.forEach(file => {\n        fileNames.push(file.filename);\n      });\n    }\n    return new Promise(resolve => {\n      var fileNamesNotRotated = fileNames;\n      var fileNamesRotated = [];\n      var fileNameTotal = fileNames.length;\n      var fileNameIndex = 0;\n      fileNames.forEach(fileName => {\n        oldKeyFileAdapter\n          .getFileData(fileName)\n          .then(plainTextData => {\n            //Overwrite file with data encrypted with new key\n            this.createFile(fileName, plainTextData)\n              .then(() => {\n                fileNamesRotated.push(fileName);\n                fileNamesNotRotated = fileNamesNotRotated.filter(function (value) {\n                  return value !== fileName;\n                });\n                fileNameIndex += 1;\n                if (fileNameIndex == fileNameTotal) {\n                  resolve({\n                    rotated: fileNamesRotated,\n                    notRotated: fileNamesNotRotated,\n                  });\n                }\n              })\n              .catch(() => {\n                fileNameIndex += 1;\n                if (fileNameIndex == fileNameTotal) {\n                  resolve({\n                    rotated: fileNamesRotated,\n                    notRotated: fileNamesNotRotated,\n                  });\n                }\n              });\n          })\n          .catch(() => {\n            fileNameIndex += 1;\n            if (fileNameIndex == fileNameTotal) {\n              resolve({\n                rotated: fileNamesRotated,\n                notRotated: fileNamesNotRotated,\n              });\n            }\n          });\n      });\n    });\n  }\n\n  getFileLocation(config, filename) {\n    return config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename);\n  }\n\n  async getMetadata(filename) {\n    const bucket = await this._getBucket();\n    const files = await bucket.find({ filename }).toArray();\n    if (files.length === 0) {\n      return {};\n    }\n    const { metadata } = files[0];\n    return { metadata };\n  }\n\n  async handleFileStream(filename: string, req, res, contentType) {\n    const bucket = await this._getBucket();\n    const files = await bucket.find({ filename }).toArray();\n    if (files.length === 0) {\n      throw new Error('FileNotFound');\n    }\n    const parts = req\n      .get('Range')\n      .replace(/bytes=/, '')\n      .split('-');\n    const partialstart = parts[0];\n    const partialend = parts[1];\n\n    const start = parseInt(partialstart, 10);\n    const end = partialend ? parseInt(partialend, 10) : files[0].length - 1;\n\n    res.writeHead(206, {\n      'Accept-Ranges': 'bytes',\n      'Content-Length': end - start + 1,\n      'Content-Range': 'bytes ' + start + '-' + end + '/' + files[0].length,\n      'Content-Type': contentType,\n    });\n    const stream = bucket.openDownloadStreamByName(filename);\n    stream.start(start);\n    stream.on('data', chunk => {\n      res.write(chunk);\n    });\n    stream.on('error', () => {\n      res.sendStatus(404);\n    });\n    stream.on('end', () => {\n      res.end();\n    });\n  }\n\n  handleShutdown() {\n    if (!this._client) {\n      return Promise.resolve();\n    }\n    return this._client.close(false);\n  }\n\n  validateFilename(filename) {\n    return validateFilename(filename);\n  }\n}\n\nexport default GridFSBucketAdapter;\n"],"file":"GridFSBucketAdapter.js"}