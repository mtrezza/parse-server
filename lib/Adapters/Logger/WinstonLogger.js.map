{"version":3,"sources":["../../../src/Adapters/Logger/WinstonLogger.js"],"names":["logger","winston","createLogger","configureTransports","options","transports","silent","_","isNil","dirname","parseServer","DailyRotateFile","Object","assign","filename","json","format","combine","timestamp","splat","name","push","parseServerError","level","e","consoleFormat","simple","consoleOptions","colorize","Console","configure","configureLogger","logsFolder","defaults","jsonLogs","logLevel","verbose","maxLogFiles","path","isAbsolute","resolve","process","cwd","fs","mkdirSync","maxFiles","stringify","addTransport","transport","removeTransport","add","matchingTransport","find","t1","remove"],"mappings":"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","sourcesContent":["import winston, { format } from 'winston';\nimport fs from 'fs';\nimport path from 'path';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport _ from 'lodash';\nimport defaults from '../../defaults';\n\nconst logger = winston.createLogger();\n\nfunction configureTransports(options) {\n  const transports = [];\n  if (options) {\n    const silent = options.silent;\n    delete options.silent;\n\n    try {\n      if (!_.isNil(options.dirname)) {\n        const parseServer = new DailyRotateFile(\n          Object.assign(\n            {\n              filename: 'parse-server.info',\n              json: true,\n              format: format.combine(format.timestamp(), format.splat(), format.json()),\n            },\n            options\n          )\n        );\n        parseServer.name = 'parse-server';\n        transports.push(parseServer);\n\n        const parseServerError = new DailyRotateFile(\n          Object.assign(\n            {\n              filename: 'parse-server.err',\n              json: true,\n              format: format.combine(format.timestamp(), format.splat(), format.json()),\n            },\n            options,\n            { level: 'error' }\n          )\n        );\n        parseServerError.name = 'parse-server-error';\n        transports.push(parseServerError);\n      }\n    } catch (e) {\n      /* */\n    }\n\n    const consoleFormat = options.json ? format.json() : format.simple();\n    const consoleOptions = Object.assign(\n      {\n        colorize: true,\n        name: 'console',\n        silent,\n        format: format.combine(format.splat(), consoleFormat),\n      },\n      options\n    );\n\n    transports.push(new winston.transports.Console(consoleOptions));\n  }\n\n  logger.configure({\n    transports,\n  });\n}\n\nexport function configureLogger({\n  logsFolder = defaults.logsFolder,\n  jsonLogs = defaults.jsonLogs,\n  logLevel = winston.level,\n  verbose = defaults.verbose,\n  silent = defaults.silent,\n  maxLogFiles,\n} = {}) {\n  if (verbose) {\n    logLevel = 'verbose';\n  }\n\n  winston.level = logLevel;\n  const options = {};\n\n  if (logsFolder) {\n    if (!path.isAbsolute(logsFolder)) {\n      logsFolder = path.resolve(process.cwd(), logsFolder);\n    }\n    try {\n      fs.mkdirSync(logsFolder);\n    } catch (e) {\n      /* */\n    }\n  }\n  options.dirname = logsFolder;\n  options.level = logLevel;\n  options.silent = silent;\n  options.maxFiles = maxLogFiles;\n\n  if (jsonLogs) {\n    options.json = true;\n    options.stringify = true;\n  }\n  configureTransports(options);\n}\n\nexport function addTransport(transport) {\n  // we will remove the existing transport\n  // before replacing it with a new one\n  removeTransport(transport.name);\n\n  logger.add(transport);\n}\n\nexport function removeTransport(transport) {\n  const matchingTransport = logger.transports.find(t1 => {\n    return typeof transport === 'string' ? t1.name === transport : t1 === transport;\n  });\n\n  if (matchingTransport) {\n    logger.remove(matchingTransport);\n  }\n}\n\nexport { logger };\nexport default logger;\n"],"file":"WinstonLogger.js"}