{"version":3,"sources":["../../../src/Adapters/Logger/WinstonLoggerAdapter.js"],"names":["MILLISECONDS_IN_A_DAY","WinstonLoggerAdapter","LoggerAdapter","constructor","options","log","logger","apply","arguments","addTransport","transport","query","callback","from","Date","now","until","limit","size","order","level","queryOptions","Promise","resolve","reject","err","res"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,qBAAqB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA7C;;AAEO,MAAMC,oBAAN,SAAmCC,4BAAnC,CAAiD;AACtDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;;AACA,QAAIA,OAAJ,EAAa;AACX,0CAAgBA,OAAhB;AACD;AACF;;AAEDC,EAAAA,GAAG,GAAG;AACJ,WAAOC,sBAAOD,GAAP,CAAWE,KAAX,CAAiBD,qBAAjB,EAAyBE,SAAzB,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAACC,SAAD,EAAY;AACtB;AACA;AACA;AACA,qCAAaA,SAAb;AACD,GAjBqD,CAmBtD;;;AACAC,EAAAA,KAAK,CAACP,OAAD,EAAUQ,QAAQ,GAAG,MAAM,CAAE,CAA7B,EAA+B;AAClC,QAAI,CAACR,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,EAAV;AACD,KAHiC,CAIlC;;;AACA,UAAMS,IAAI,GAAGT,OAAO,CAACS,IAAR,IAAgB,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,IAAIf,qBAA1B,CAA7B;AACA,UAAMgB,KAAK,GAAGZ,OAAO,CAACY,KAAR,IAAiB,IAAIF,IAAJ,EAA/B;AACA,UAAMG,KAAK,GAAGb,OAAO,CAACc,IAAR,IAAgB,EAA9B;AACA,UAAMC,KAAK,GAAGf,OAAO,CAACe,KAAR,IAAiB,MAA/B;AACA,UAAMC,KAAK,GAAGhB,OAAO,CAACgB,KAAR,IAAiB,MAA/B;AAEA,UAAMC,YAAY,GAAG;AACnBR,MAAAA,IADmB;AAEnBG,MAAAA,KAFmB;AAGnBC,MAAAA,KAHmB;AAInBE,MAAAA;AAJmB,KAArB;AAOA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtClB,4BAAOK,KAAP,CAAaU,YAAb,EAA2B,CAACI,GAAD,EAAMC,GAAN,KAAc;AACvC,YAAID,GAAJ,EAAS;AACPb,UAAAA,QAAQ,CAACa,GAAD,CAAR;AACA,iBAAOD,MAAM,CAACC,GAAD,CAAb;AACD;;AAED,YAAIL,KAAK,KAAK,OAAd,EAAuB;AACrBR,UAAAA,QAAQ,CAACc,GAAG,CAAC,oBAAD,CAAJ,CAAR;AACAH,UAAAA,OAAO,CAACG,GAAG,CAAC,oBAAD,CAAJ,CAAP;AACD,SAHD,MAGO;AACLd,UAAAA,QAAQ,CAACc,GAAG,CAAC,cAAD,CAAJ,CAAR;AACAH,UAAAA,OAAO,CAACG,GAAG,CAAC,cAAD,CAAJ,CAAP;AACD;AACF,OAbD;AAcD,KAfM,CAAP;AAgBD;;AAtDqD;;;eAyDzCzB,oB","sourcesContent":["import { LoggerAdapter } from './LoggerAdapter';\nimport { logger, addTransport, configureLogger } from './WinstonLogger';\n\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\n\nexport class WinstonLoggerAdapter extends LoggerAdapter {\n  constructor(options) {\n    super();\n    if (options) {\n      configureLogger(options);\n    }\n  }\n\n  log() {\n    return logger.log.apply(logger, arguments);\n  }\n\n  addTransport(transport) {\n    // Note that this is calling addTransport\n    // from logger.  See import - confusing.\n    // but this is not recursive.\n    addTransport(transport);\n  }\n\n  // custom query as winston is currently limited\n  query(options, callback = () => {}) {\n    if (!options) {\n      options = {};\n    }\n    // defaults to 7 days prior\n    const from = options.from || new Date(Date.now() - 7 * MILLISECONDS_IN_A_DAY);\n    const until = options.until || new Date();\n    const limit = options.size || 10;\n    const order = options.order || 'desc';\n    const level = options.level || 'info';\n\n    const queryOptions = {\n      from,\n      until,\n      limit,\n      order,\n    };\n\n    return new Promise((resolve, reject) => {\n      logger.query(queryOptions, (err, res) => {\n        if (err) {\n          callback(err);\n          return reject(err);\n        }\n\n        if (level === 'error') {\n          callback(res['parse-server-error']);\n          resolve(res['parse-server-error']);\n        } else {\n          callback(res['parse-server']);\n          resolve(res['parse-server']);\n        }\n      });\n    });\n  }\n}\n\nexport default WinstonLoggerAdapter;\n"],"file":"WinstonLoggerAdapter.js"}