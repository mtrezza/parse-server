{"version":3,"sources":["../../src/Adapters/AdapterLoader.js"],"names":["loadAdapter","adapter","defaultAdapter","options","undefined","e","name","Adapter","require","default","module","class"],"mappings":";;;;;;;;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,WAAT,CAAwBC,OAAxB,EAAiCC,cAAjC,EAAiDC,OAAjD,EAA6D;AAClE,MAAI,CAACF,OAAL,EAAc;AACZ,QAAI,CAACC,cAAL,EAAqB;AACnB,aAAOC,OAAP;AACD,KAHW,CAIZ;;;AACA,WAAOH,WAAW,CAACE,cAAD,EAAiBE,SAAjB,EAA4BD,OAA5B,CAAlB;AACD,GAND,MAMO,IAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACxC,QAAI;AACF,aAAOA,OAAO,CAACE,OAAD,CAAd;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU;AACV,UAAIA,CAAC,CAACC,IAAF,KAAW,WAAf,EAA4B;AAC1B,YAAIC,OAAO,GAAGN,OAAd;AACA,eAAO,IAAIM,OAAJ,CAAYJ,OAAZ,CAAP;AACD,OAHD,MAGO;AACL,cAAME,CAAN;AACD;AACF;AACF,GAXM,MAWA,IAAI,OAAOJ,OAAP,KAAmB,QAAvB,EAAiC;AACtC;AACAA,IAAAA,OAAO,GAAGO,OAAO,CAACP,OAAD,CAAjB,CAFsC,CAGtC;;AACA,QAAIA,OAAO,CAACQ,OAAZ,EAAqB;AACnBR,MAAAA,OAAO,GAAGA,OAAO,CAACQ,OAAlB;AACD;;AACD,WAAOT,WAAW,CAACC,OAAD,EAAUG,SAAV,EAAqBD,OAArB,CAAlB;AACD,GARM,MAQA,IAAIF,OAAO,CAACS,MAAZ,EAAoB;AACzB,WAAOV,WAAW,CAACC,OAAO,CAACS,MAAT,EAAiBN,SAAjB,EAA4BH,OAAO,CAACE,OAApC,CAAlB;AACD,GAFM,MAEA,IAAIF,OAAO,CAACU,KAAZ,EAAmB;AACxB,WAAOX,WAAW,CAACC,OAAO,CAACU,KAAT,EAAgBP,SAAhB,EAA2BH,OAAO,CAACE,OAAnC,CAAlB;AACD,GAFM,MAEA,IAAIF,OAAO,CAACA,OAAZ,EAAqB;AAC1B,WAAOD,WAAW,CAACC,OAAO,CAACA,OAAT,EAAkBG,SAAlB,EAA6BH,OAAO,CAACE,OAArC,CAAlB;AACD,GAhCiE,CAiClE;;;AACA,SAAOF,OAAP;AACD;;eAEcD,W","sourcesContent":["/**\n * @module AdapterLoader\n */\n/**\n * @static\n * Attempt to load an adapter or fallback to the default.\n * @param {Adapter} adapter an adapter\n * @param {Adapter} defaultAdapter the default adapter to load\n * @param {any} options options to pass to the contstructor\n * @returns {Object} the loaded adapter\n */\nexport function loadAdapter<T>(adapter, defaultAdapter, options): T {\n  if (!adapter) {\n    if (!defaultAdapter) {\n      return options;\n    }\n    // Load from the default adapter when no adapter is set\n    return loadAdapter(defaultAdapter, undefined, options);\n  } else if (typeof adapter === 'function') {\n    try {\n      return adapter(options);\n    } catch (e) {\n      if (e.name === 'TypeError') {\n        var Adapter = adapter;\n        return new Adapter(options);\n      } else {\n        throw e;\n      }\n    }\n  } else if (typeof adapter === 'string') {\n    /* eslint-disable */\n    adapter = require(adapter);\n    // If it's define as a module, get the default\n    if (adapter.default) {\n      adapter = adapter.default;\n    }\n    return loadAdapter(adapter, undefined, options);\n  } else if (adapter.module) {\n    return loadAdapter(adapter.module, undefined, adapter.options);\n  } else if (adapter.class) {\n    return loadAdapter(adapter.class, undefined, adapter.options);\n  } else if (adapter.adapter) {\n    return loadAdapter(adapter.adapter, undefined, adapter.options);\n  }\n  // return the adapter as provided\n  return adapter;\n}\n\nexport default loadAdapter;\n"],"file":"AdapterLoader.js"}