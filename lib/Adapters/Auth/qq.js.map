{"version":3,"sources":["../../../src/Adapters/Auth/qq.js"],"names":["httpsRequest","require","Parse","validateAuthData","authData","graphRequest","access_token","then","data","openid","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","get","parseResponseData","starPos","indexOf","endPos","substring","JSON","parse","module","exports"],"mappings":";;AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAlC,C,CAEA;;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,YAAY,CAAC,qBAAqBD,QAAQ,CAACE,YAA/B,CAAZ,CAAyDC,IAAzD,CAA8D,UAAUC,IAAV,EAAgB;AACnF,QAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAeL,QAAQ,CAACM,EAApC,EAAwC;AACtC;AACD;;AACD,UAAM,IAAIR,KAAK,CAACS,KAAV,CAAgBT,KAAK,CAACS,KAAN,CAAYC,gBAA5B,EAA8C,mCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASV,YAAT,CAAsBW,IAAtB,EAA4B;AAC1B,SAAOhB,YAAY,CAACiB,GAAb,CAAiB,mCAAmCD,IAApD,EAA0D,IAA1D,EAAgET,IAAhE,CAAqEC,IAAI,IAAI;AAClF,WAAOU,iBAAiB,CAACV,IAAD,CAAxB;AACD,GAFM,CAAP;AAGD;;AAED,SAASU,iBAAT,CAA2BV,IAA3B,EAAiC;AAC/B,QAAMW,OAAO,GAAGX,IAAI,CAACY,OAAL,CAAa,GAAb,CAAhB;AACA,QAAMC,MAAM,GAAGb,IAAI,CAACY,OAAL,CAAa,GAAb,CAAf;;AACA,MAAID,OAAO,IAAI,CAAC,CAAZ,IAAiBE,MAAM,IAAI,CAAC,CAAhC,EAAmC;AACjC,UAAM,IAAInB,KAAK,CAACS,KAAV,CAAgBT,KAAK,CAACS,KAAN,CAAYC,gBAA5B,EAA8C,mCAA9C,CAAN;AACD;;AACDJ,EAAAA,IAAI,GAAGA,IAAI,CAACc,SAAL,CAAeH,OAAO,GAAG,CAAzB,EAA4BE,MAAM,GAAG,CAArC,CAAP;AACA,SAAOE,IAAI,CAACC,KAAL,CAAWhB,IAAX,CAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,aADe;AAEfV,EAAAA,gBAFe;AAGfe,EAAAA;AAHe,CAAjB","sourcesContent":["// Helper functions for accessing the qq Graph API.\nconst httpsRequest = require('./httpsRequest');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return graphRequest('me?access_token=' + authData.access_token).then(function (data) {\n    if (data && data.openid == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'qq auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for qq graph requests.\nfunction graphRequest(path) {\n  return httpsRequest.get('https://graph.qq.com/oauth2.0/' + path, true).then(data => {\n    return parseResponseData(data);\n  });\n}\n\nfunction parseResponseData(data) {\n  const starPos = data.indexOf('(');\n  const endPos = data.indexOf(')');\n  if (starPos == -1 || endPos == -1) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'qq auth is invalid for this user.');\n  }\n  data = data.substring(starPos + 1, endPos - 1);\n  return JSON.parse(data);\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n  parseResponseData,\n};\n"],"file":"qq.js"}