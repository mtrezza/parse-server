{"version":3,"sources":["../../../src/Adapters/Auth/AuthAdapter.js"],"names":["AuthAdapter","validateAppId","appIds","authData","options","Promise","resolve","validateAuthData"],"mappings":";;;;;;;AAAA;AACO,MAAMA,WAAN,CAAkB;AACvB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,aAAa,CAACC,MAAD,EAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACvC,WAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,gBAAgB,CAACJ,QAAD,EAAWC,OAAX,EAAoB;AAClC,WAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAjBsB;;;eAoBVN,W","sourcesContent":["/*eslint no-unused-vars: \"off\"*/\nexport class AuthAdapter {\n  /*\n  @param appIds: the specified app ids in the configuration\n  @param authData: the client provided authData\n  @param options: additional options\n  @returns a promise that resolves if the applicationId is valid\n   */\n  validateAppId(appIds, authData, options) {\n    return Promise.resolve({});\n  }\n\n  /*\n  @param authData: the client provided authData\n  @param options: additional options\n   */\n  validateAuthData(authData, options) {\n    return Promise.resolve({});\n  }\n}\n\nexport default AuthAdapter;\n"],"file":"AuthAdapter.js"}