{"version":3,"sources":["../../../src/Adapters/Auth/line.js"],"names":["Parse","require","httpsRequest","validateAuthData","authData","request","access_token","then","response","userId","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","options","host","method","headers","Authorization","get","module","exports"],"mappings":";;AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,KAAlC;;AACA,MAAME,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,OAAO,CAAC,SAAD,EAAYD,QAAQ,CAACE,YAArB,CAAP,CAA0CC,IAA1C,CAA+CC,QAAQ,IAAI;AAChE,QAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAArB,IAA+BD,QAAQ,CAACC,MAAT,KAAoBL,QAAQ,CAACM,EAAhE,EAAoE;AAClE;AACD;;AACD,UAAM,IAAIV,KAAK,CAACW,KAAV,CAAgBX,KAAK,CAACW,KAAN,CAAYC,gBAA5B,EAA8C,qCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASV,OAAT,CAAiBW,IAAjB,EAAuBV,YAAvB,EAAqC;AACnC,MAAIW,OAAO,GAAG;AACZC,IAAAA,IAAI,EAAE,aADM;AAEZF,IAAAA,IAAI,EAAE,SAASA,IAFH;AAGZG,IAAAA,MAAM,EAAE,KAHI;AAIZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYf;AADpB;AAJG,GAAd;AAQA,SAAOJ,YAAY,CAACoB,GAAb,CAAiBL,OAAjB,CAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,aAAa,EAAEA,aADA;AAEfV,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB","sourcesContent":["// Helper functions for accessing the line API.\nvar Parse = require('parse/node').Parse;\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData) {\n  return request('profile', authData.access_token).then(response => {\n    if (response && response.userId && response.userId === authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Line auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token) {\n  var options = {\n    host: 'api.line.me',\n    path: '/v2/' + path,\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer ' + access_token,\n    },\n  };\n  return httpsRequest.get(options);\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"],"file":"line.js"}