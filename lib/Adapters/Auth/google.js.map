{"version":3,"sources":["../../../src/Adapters/Auth/google.js"],"names":["Parse","require","https","jwt","TOKEN_ISSUER","HTTPS_TOKEN_ISSUER","cache","getGoogleKeyByKeyId","keyId","expiresAt","Date","Promise","resolve","reject","get","res","data","on","chunk","toString","keys","JSON","parse","pems","reduce","n","modulus","e","exposant","kid","Object","assign","rsaPublicKeyToPEM","headers","expire","match","getTime","Number","getHeaderFromToken","token","decodedToken","decode","complete","Error","OBJECT_NOT_FOUND","header","verifyIdToken","id_token","id","clientId","alg","algorithm","jwtClaims","googleKey","verify","algorithms","audience","exception","message","iss","sub","aud","validateAuthData","authData","options","validateAppId","module","exports","modulusB64","exponentB64","Buffer","exponent","modulusHex","prepadSigned","exponentHex","modlen","length","explen","encodedModlen","encodeLengthHex","encodedExplen","encodedPubkey","der","pem","join","hexStr","msb","toHex","number","nstr","nHex","lengthOfLengthByte"],"mappings":"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","sourcesContent":["'use strict';\n\n// Helper functions for accessing the google API.\nvar Parse = require('parse/node').Parse;\n\nconst https = require('https');\nconst jwt = require('jsonwebtoken');\n\nconst TOKEN_ISSUER = 'accounts.google.com';\nconst HTTPS_TOKEN_ISSUER = 'https://accounts.google.com';\n\nlet cache = {};\n\n// Retrieve Google Signin Keys (with cache control)\nfunction getGoogleKeyByKeyId(keyId) {\n  if (cache[keyId] && cache.expiresAt > new Date()) {\n    return cache[keyId];\n  }\n\n  return new Promise((resolve, reject) => {\n    https\n      .get(`https://www.googleapis.com/oauth2/v3/certs`, res => {\n        let data = '';\n        res.on('data', chunk => {\n          data += chunk.toString('utf8');\n        });\n        res.on('end', () => {\n          const { keys } = JSON.parse(data);\n          const pems = keys.reduce(\n            (pems, { n: modulus, e: exposant, kid }) =>\n              Object.assign(pems, {\n                [kid]: rsaPublicKeyToPEM(modulus, exposant),\n              }),\n            {}\n          );\n\n          if (res.headers['cache-control']) {\n            var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);\n\n            if (expire) {\n              cache = Object.assign({}, pems, {\n                expiresAt: new Date(new Date().getTime() + Number(expire[1]) * 1000),\n              });\n            }\n          }\n\n          resolve(pems[keyId]);\n        });\n      })\n      .on('error', reject);\n  });\n}\n\nfunction getHeaderFromToken(token) {\n  const decodedToken = jwt.decode(token, { complete: true });\n\n  if (!decodedToken) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `provided token does not decode as JWT`);\n  }\n\n  return decodedToken.header;\n}\n\nasync function verifyIdToken({ id_token: token, id }, { clientId }) {\n  if (!token) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token is invalid for this user.`);\n  }\n\n  const { kid: keyId, alg: algorithm } = getHeaderFromToken(token);\n  let jwtClaims;\n  const googleKey = await getGoogleKeyByKeyId(keyId);\n\n  try {\n    jwtClaims = jwt.verify(token, googleKey, {\n      algorithms: algorithm,\n      audience: clientId,\n    });\n  } catch (exception) {\n    const message = exception.message;\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `${message}`);\n  }\n\n  if (jwtClaims.iss !== TOKEN_ISSUER && jwtClaims.iss !== HTTPS_TOKEN_ISSUER) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      `id token not issued by correct provider - expected: ${TOKEN_ISSUER} or ${HTTPS_TOKEN_ISSUER} | from: ${jwtClaims.iss}`\n    );\n  }\n\n  if (jwtClaims.sub !== id) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);\n  }\n\n  if (clientId && jwtClaims.aud !== clientId) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      `id token not authorized for this clientId.`\n    );\n  }\n\n  return jwtClaims;\n}\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData, options = {}) {\n  return verifyIdToken(authData, options);\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n\n// Helpers functions to convert the RSA certs to PEM (from jwks-rsa)\nfunction rsaPublicKeyToPEM(modulusB64, exponentB64) {\n  const modulus = new Buffer(modulusB64, 'base64');\n  const exponent = new Buffer(exponentB64, 'base64');\n  const modulusHex = prepadSigned(modulus.toString('hex'));\n  const exponentHex = prepadSigned(exponent.toString('hex'));\n  const modlen = modulusHex.length / 2;\n  const explen = exponentHex.length / 2;\n\n  const encodedModlen = encodeLengthHex(modlen);\n  const encodedExplen = encodeLengthHex(explen);\n  const encodedPubkey =\n    '30' +\n    encodeLengthHex(modlen + explen + encodedModlen.length / 2 + encodedExplen.length / 2 + 2) +\n    '02' +\n    encodedModlen +\n    modulusHex +\n    '02' +\n    encodedExplen +\n    exponentHex;\n\n  const der = new Buffer(encodedPubkey, 'hex').toString('base64');\n\n  let pem = '-----BEGIN RSA PUBLIC KEY-----\\n';\n  pem += `${der.match(/.{1,64}/g).join('\\n')}`;\n  pem += '\\n-----END RSA PUBLIC KEY-----\\n';\n  return pem;\n}\n\nfunction prepadSigned(hexStr) {\n  const msb = hexStr[0];\n  if (msb < '0' || msb > '7') {\n    return `00${hexStr}`;\n  }\n  return hexStr;\n}\n\nfunction toHex(number) {\n  const nstr = number.toString(16);\n  if (nstr.length % 2) {\n    return `0${nstr}`;\n  }\n  return nstr;\n}\n\nfunction encodeLengthHex(n) {\n  if (n <= 127) {\n    return toHex(n);\n  }\n  const nHex = toHex(n);\n  const lengthOfLengthByte = 128 + nHex.length / 2;\n  return toHex(lengthOfLengthByte) + nHex;\n}\n"],"file":"google.js"}