{"version":3,"sources":["../../../src/Adapters/Auth/spotify.js"],"names":["httpsRequest","require","Parse","validateAuthData","authData","request","access_token","then","data","id","Error","OBJECT_NOT_FOUND","validateAppId","appIds","length","indexOf","path","get","host","headers","Authorization","module","exports"],"mappings":";;AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAlC,C,CAEA;;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,OAAO,CAAC,IAAD,EAAOD,QAAQ,CAACE,YAAhB,CAAP,CAAqCC,IAArC,CAA0CC,IAAI,IAAI;AACvD,QAAIA,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWL,QAAQ,CAACK,EAAhC,EAAoC;AAClC;AACD;;AACD,UAAM,IAAIP,KAAK,CAACQ,KAAV,CAAgBR,KAAK,CAACQ,KAAN,CAAYC,gBAA5B,EAA8C,wCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BT,QAA/B,EAAyC;AACvC,MAAIE,YAAY,GAAGF,QAAQ,CAACE,YAA5B;;AACA,MAAI,CAACO,MAAM,CAACC,MAAZ,EAAoB;AAClB,UAAM,IAAIZ,KAAK,CAACQ,KAAV,CAAgBR,KAAK,CAACQ,KAAN,CAAYC,gBAA5B,EAA8C,iCAA9C,CAAN;AACD;;AACD,SAAON,OAAO,CAAC,IAAD,EAAOC,YAAP,CAAP,CAA4BC,IAA5B,CAAiCC,IAAI,IAAI;AAC9C,QAAIA,IAAI,IAAIK,MAAM,CAACE,OAAP,CAAeP,IAAI,CAACC,EAApB,KAA2B,CAAC,CAAxC,EAA2C;AACzC;AACD;;AACD,UAAM,IAAIP,KAAK,CAACQ,KAAV,CAAgBR,KAAK,CAACQ,KAAN,CAAYC,gBAA5B,EAA8C,wCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASN,OAAT,CAAiBW,IAAjB,EAAuBV,YAAvB,EAAqC;AACnC,SAAON,YAAY,CAACiB,GAAb,CAAiB;AACtBC,IAAAA,IAAI,EAAE,iBADgB;AAEtBF,IAAAA,IAAI,EAAE,SAASA,IAFO;AAGtBG,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYd;AADpB;AAHa,GAAjB,CAAP;AAOD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,aAAa,EAAEA,aADA;AAEfT,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB","sourcesContent":["// Helper functions for accessing the Spotify API.\nconst httpsRequest = require('./httpsRequest');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return request('me', authData.access_token).then(data => {\n    if (data && data.id == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Spotify auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId(appIds, authData) {\n  var access_token = authData.access_token;\n  if (!appIds.length) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Spotify auth is not configured.');\n  }\n  return request('me', access_token).then(data => {\n    if (data && appIds.indexOf(data.id) != -1) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Spotify auth is invalid for this user.');\n  });\n}\n\n// A promisey wrapper for Spotify API requests.\nfunction request(path, access_token) {\n  return httpsRequest.get({\n    host: 'api.spotify.com',\n    path: '/v1/' + path,\n    headers: {\n      Authorization: 'Bearer ' + access_token,\n    },\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"],"file":"spotify.js"}