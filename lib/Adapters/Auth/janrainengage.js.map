{"version":3,"sources":["../../../src/Adapters/Auth/janrainengage.js"],"names":["httpsRequest","require","Parse","querystring","validateAuthData","authData","options","apiRequest","api_key","auth_token","then","data","stat","profile","identifier","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","post_data","stringify","token","apiKey","format","post_options","host","path","method","headers","length","request","module","exports"],"mappings":";;AAAA;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAlC;;AACA,IAAIC,WAAW,GAAGF,OAAO,CAAC,aAAD,CAAzB,C,CAEA;;;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOC,UAAU,CAACD,OAAO,CAACE,OAAT,EAAkBH,QAAQ,CAACI,UAA3B,CAAV,CAAiDC,IAAjD,CAAsDC,IAAI,IAAI;AACnE;AACA;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,IAAa,IAArB,IAA6BD,IAAI,CAACE,OAAL,CAAaC,UAAb,IAA2BT,QAAQ,CAACU,EAArE,EAAyE;AACvE;AACD;;AACD,UAAM,IAAIb,KAAK,CAACc,KAAV,CACJd,KAAK,CAACc,KAAN,CAAYC,gBADR,EAEJ,+CAFI,CAAN;AAID,GAVM,CAAP;AAWD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB;AACA,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASb,UAAT,CAAoBC,OAApB,EAA6BC,UAA7B,EAAyC;AACvC,MAAIY,SAAS,GAAGlB,WAAW,CAACmB,SAAZ,CAAsB;AACpCC,IAAAA,KAAK,EAAEd,UAD6B;AAEpCe,IAAAA,MAAM,EAAEhB,OAF4B;AAGpCiB,IAAAA,MAAM,EAAE;AAH4B,GAAtB,CAAhB;AAMA,MAAIC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,YADW;AAEjBC,IAAAA,IAAI,EAAE,mBAFW;AAGjBC,IAAAA,MAAM,EAAE,MAHS;AAIjBC,IAAAA,OAAO,EAAE;AACP,sBAAgB,mCADT;AAEP,wBAAkBT,SAAS,CAACU;AAFrB;AAJQ,GAAnB;AAUA,SAAO/B,YAAY,CAACgC,OAAb,CAAqBN,YAArB,EAAmCL,SAAnC,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,aAAa,EAAEA,aADA;AAEfd,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB","sourcesContent":["// Helper functions for accessing the Janrain Engage API.\nvar httpsRequest = require('./httpsRequest');\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  return apiRequest(options.api_key, authData.auth_token).then(data => {\n    //successful response will have a \"stat\" (status) of 'ok' and a profile node with an identifier\n    //see: http://developers.janrain.com/overview/social-login/identity-providers/user-profile-data/#normalized-user-profile-data\n    if (data && data.stat == 'ok' && data.profile.identifier == authData.id) {\n      return;\n    }\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      'Janrain engage auth is invalid for this user.'\n    );\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  //no-op\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction apiRequest(api_key, auth_token) {\n  var post_data = querystring.stringify({\n    token: auth_token,\n    apiKey: api_key,\n    format: 'json',\n  });\n\n  var post_options = {\n    host: 'rpxnow.com',\n    path: '/api/v2/auth_info',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': post_data.length,\n    },\n  };\n\n  return httpsRequest.request(post_options, post_data);\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"],"file":"janrainengage.js"}