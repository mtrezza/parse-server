{"version":3,"sources":["../../../src/Adapters/Auth/phantauth.js"],"names":["Parse","require","httpsRequest","validateAuthData","authData","request","access_token","then","data","sub","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","get","host","headers","Authorization","module","exports"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,OAAO,CAAC,eAAD,EAAkBD,QAAQ,CAACE,YAA3B,CAAP,CAAgDC,IAAhD,CAAqDC,IAAI,IAAI;AAClE,QAAIA,IAAI,IAAIA,IAAI,CAACC,GAAL,IAAYL,QAAQ,CAACM,EAAjC,EAAqC;AACnC;AACD;;AACD,UAAM,IAAIV,KAAK,CAACW,KAAV,CAAgBX,KAAK,CAACW,KAAN,CAAYC,gBAA5B,EAA8C,0CAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASV,OAAT,CAAiBW,IAAjB,EAAuBV,YAAvB,EAAqC;AACnC,SAAOJ,YAAY,CAACe,GAAb,CAAiB;AACtBC,IAAAA,IAAI,EAAE,eADgB;AAEtBF,IAAAA,IAAI,EAAE,MAAMA,IAFU;AAGtBG,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYd,YADpB;AAEP,oBAAc;AAFP;AAHa,GAAjB,CAAP;AAQD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,aAAa,EAAEA,aADA;AAEfV,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB","sourcesContent":["/*\n * PhantAuth was designed to simplify testing for applications using OpenID Connect\n * authentication by making use of random generated users.\n *\n * To learn more, please go to: https://www.phantauth.net\n */\n\nconst { Parse } = require('parse/node');\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData) {\n  return request('auth/userinfo', authData.access_token).then(data => {\n    if (data && data.sub == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'PhantAuth auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token) {\n  return httpsRequest.get({\n    host: 'phantauth.net',\n    path: '/' + path,\n    headers: {\n      Authorization: 'bearer ' + access_token,\n      'User-Agent': 'parse-server',\n    },\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"],"file":"phantauth.js"}