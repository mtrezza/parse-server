{"version":3,"sources":["../../../src/Adapters/Auth/keycloak.js"],"names":["Parse","require","httpsRequest","arraysEqual","_arr1","_arr2","Array","isArray","length","arr1","concat","sort","arr2","i","handleAuth","access_token","id","roles","groups","config","Error","OBJECT_NOT_FOUND","response","get","host","path","headers","Authorization","data","sub","e","error","JSON","parse","text","error_description","HOSTING_ERROR","validateAuthData","authData","options","validateAppId","Promise","resolve","module","exports"],"mappings":"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","sourcesContent":["/*\n  # Parse Server Keycloak Authentication\n\n  ## Keycloak `authData`\n\n  ```\n    {\n      \"keycloak\": {\n        \"access_token\": \"access token you got from keycloak JS client authentication\",\n        \"id\": \"the id retrieved from client authentication in Keycloak\",\n        \"roles\": [\"the roles retrieved from client authentication in Keycloak\"],\n        \"groups\": [\"the groups retrieved from client authentication in Keycloak\"]\n      }\n    }\n  ```\n\n  The authentication module will test if the authData is the same as the\n  userinfo oauth call, comparing the attributes\n\n  Copy the JSON config file generated on Keycloak (https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter)\n  and paste it inside of a folder (Ex.: `auth/keycloak.json`) in your server.\n\n  The options passed to Parse server:\n\n  ```\n    {\n      auth: {\n        keycloak: {\n          config: require(`./auth/keycloak.json`)\n        }\n      }\n    }\n  ```\n*/\n\nconst { Parse } = require('parse/node');\nconst httpsRequest = require('./httpsRequest');\n\nconst arraysEqual = (_arr1, _arr2) => {\n  if (!Array.isArray(_arr1) || !Array.isArray(_arr2) || _arr1.length !== _arr2.length) return false;\n\n  var arr1 = _arr1.concat().sort();\n  var arr2 = _arr2.concat().sort();\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  return true;\n};\n\nconst handleAuth = async ({ access_token, id, roles, groups } = {}, { config } = {}) => {\n  if (!(access_token && id)) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Missing access token and/or User id');\n  }\n  if (!config || !(config['auth-server-url'] && config['realm'])) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Missing keycloak configuration');\n  }\n  try {\n    const response = await httpsRequest.get({\n      host: config['auth-server-url'],\n      path: `/realms/${config['realm']}/protocol/openid-connect/userinfo`,\n      headers: {\n        Authorization: 'Bearer ' + access_token,\n      },\n    });\n    if (\n      response &&\n      response.data &&\n      response.data.sub == id &&\n      arraysEqual(response.data.roles, roles) &&\n      arraysEqual(response.data.groups, groups)\n    ) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid authentication');\n  } catch (e) {\n    if (e instanceof Parse.Error) {\n      throw e;\n    }\n    const error = JSON.parse(e.text);\n    if (error.error_description) {\n      throw new Parse.Error(Parse.Error.HOSTING_ERROR, error.error_description);\n    } else {\n      throw new Parse.Error(\n        Parse.Error.HOSTING_ERROR,\n        'Could not connect to the authentication server'\n      );\n    }\n  }\n};\n\n/*\n  @param {Object} authData: the client provided authData\n  @param {string} authData.access_token: the access_token retrieved from client authentication in Keycloak\n  @param {string} authData.id: the id retrieved from client authentication in Keycloak\n  @param {Array}  authData.roles: the roles retrieved from client authentication in Keycloak\n  @param {Array}  authData.groups: the groups retrieved from client authentication in Keycloak\n  @param {Object} options: additional options\n  @param {Object} options.config: the config object passed during Parse Server instantiation\n*/\nfunction validateAuthData(authData, options = {}) {\n  return handleAuth(authData, options);\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n};\n"],"file":"keycloak.js"}