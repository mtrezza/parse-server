{"version":3,"sources":["../../../src/Adapters/Auth/apple.js"],"names":["Parse","require","jwksClient","util","jwt","TOKEN_ISSUER","getAppleKeyByKeyId","keyId","cacheMaxEntries","cacheMaxAge","client","jwksUri","cache","asyncGetSigningKeyFunction","promisify","getSigningKey","key","error","Error","OBJECT_NOT_FOUND","getHeaderFromToken","token","decodedToken","decode","complete","header","verifyIdToken","id","clientId","kid","alg","algorithm","ONE_HOUR_IN_MS","jwtClaims","appleKey","signingKey","publicKey","rsaPublicKey","verify","algorithms","audience","exception","message","iss","sub","validateAuthData","authData","options","validateAppId","Promise","resolve","module","exports"],"mappings":"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","sourcesContent":["// Apple SignIn Auth\n// https://developer.apple.com/documentation/signinwithapplerestapi\n\nconst Parse = require('parse/node').Parse;\nconst jwksClient = require('jwks-rsa');\nconst util = require('util');\nconst jwt = require('jsonwebtoken');\n\nconst TOKEN_ISSUER = 'https://appleid.apple.com';\n\nconst getAppleKeyByKeyId = async (keyId, cacheMaxEntries, cacheMaxAge) => {\n  const client = jwksClient({\n    jwksUri: `${TOKEN_ISSUER}/auth/keys`,\n    cache: true,\n    cacheMaxEntries,\n    cacheMaxAge,\n  });\n\n  const asyncGetSigningKeyFunction = util.promisify(client.getSigningKey);\n\n  let key;\n  try {\n    key = await asyncGetSigningKeyFunction(keyId);\n  } catch (error) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      `Unable to find matching key for Key ID: ${keyId}`\n    );\n  }\n  return key;\n};\n\nconst getHeaderFromToken = token => {\n  const decodedToken = jwt.decode(token, { complete: true });\n  if (!decodedToken) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `provided token does not decode as JWT`);\n  }\n\n  return decodedToken.header;\n};\n\nconst verifyIdToken = async ({ token, id }, { clientId, cacheMaxEntries, cacheMaxAge }) => {\n  if (!token) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token is invalid for this user.`);\n  }\n\n  const { kid: keyId, alg: algorithm } = getHeaderFromToken(token);\n  const ONE_HOUR_IN_MS = 3600000;\n  let jwtClaims;\n\n  cacheMaxAge = cacheMaxAge || ONE_HOUR_IN_MS;\n  cacheMaxEntries = cacheMaxEntries || 5;\n\n  const appleKey = await getAppleKeyByKeyId(keyId, cacheMaxEntries, cacheMaxAge);\n  const signingKey = appleKey.publicKey || appleKey.rsaPublicKey;\n\n  try {\n    jwtClaims = jwt.verify(token, signingKey, {\n      algorithms: algorithm,\n      // the audience can be checked against a string, a regular expression or a list of strings and/or regular expressions.\n      audience: clientId,\n    });\n  } catch (exception) {\n    const message = exception.message;\n\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `${message}`);\n  }\n\n  if (jwtClaims.iss !== TOKEN_ISSUER) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`\n    );\n  }\n\n  if (jwtClaims.sub !== id) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);\n  }\n  return jwtClaims;\n};\n\n// Returns a promise that fulfills if this id token is valid\nfunction validateAuthData(authData, options = {}) {\n  return verifyIdToken(authData, options);\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n};\n"],"file":"apple.js"}