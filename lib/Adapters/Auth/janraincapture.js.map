{"version":3,"sources":["../../../src/Adapters/Auth/janraincapture.js"],"names":["Parse","require","querystring","httpsRequest","validateAuthData","authData","options","request","janrain_capture_host","access_token","then","data","stat","result","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","host","query_string_data","stringify","attribute_name","get","path","module","exports"],"mappings":";;AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,KAAlC;;AACA,IAAIE,WAAW,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOC,OAAO,CAACD,OAAO,CAACE,oBAAT,EAA+BH,QAAQ,CAACI,YAAxC,CAAP,CAA6DC,IAA7D,CAAkEC,IAAI,IAAI;AAC/E;AACA;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,IAAa,IAArB,IAA6BD,IAAI,CAACE,MAAL,IAAeR,QAAQ,CAACS,EAAzD,EAA6D;AAC3D;AACD;;AACD,UAAM,IAAId,KAAK,CAACe,KAAV,CACJf,KAAK,CAACe,KAAN,CAAYC,gBADR,EAEJ,gDAFI,CAAN;AAID,GAVM,CAAP;AAWD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB;AACA,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASZ,OAAT,CAAiBa,IAAjB,EAAuBX,YAAvB,EAAqC;AACnC,MAAIY,iBAAiB,GAAGnB,WAAW,CAACoB,SAAZ,CAAsB;AAC5Cb,IAAAA,YAAY,EAAEA,YAD8B;AAE5Cc,IAAAA,cAAc,EAAE,MAF4B,CAEpB;;AAFoB,GAAtB,CAAxB;AAKA,SAAOpB,YAAY,CAACqB,GAAb,CAAiB;AAAEJ,IAAAA,IAAI,EAAEA,IAAR;AAAcK,IAAAA,IAAI,EAAE,aAAaJ;AAAjC,GAAjB,CAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,aAAa,EAAEA,aADA;AAEfb,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB","sourcesContent":["// Helper functions for accessing the Janrain Capture API.\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  return request(options.janrain_capture_host, authData.access_token).then(data => {\n    //successful response will have a \"stat\" (status) of 'ok' and a result node that stores the uuid, because that's all we asked for\n    //see: https://docs.janrain.com/api/registration/entity/#entity\n    if (data && data.stat == 'ok' && data.result == authData.id) {\n      return;\n    }\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      'Janrain capture auth is invalid for this user.'\n    );\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  //no-op\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(host, access_token) {\n  var query_string_data = querystring.stringify({\n    access_token: access_token,\n    attribute_name: 'uuid', // we only need to pull the uuid for this access token to make sure it matches\n  });\n\n  return httpsRequest.get({ host: host, path: '/entity?' + query_string_data });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"],"file":"janraincapture.js"}