{"version":3,"sources":["../../../src/Adapters/Auth/twitter.js"],"names":["OAuth","require","Parse","validateAuthData","authData","options","Error","INTERNAL_SERVER_ERROR","handleMultipleConfigurations","client","host","auth_token","auth_token_secret","get","then","data","id_str","id","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","Array","isArray","consumer_key","filter","option","length","module","exports"],"mappings":";;AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAlC,C,CAEA;;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,MAAI,CAACA,OAAL,EAAc;AACZ,UAAM,IAAIH,KAAK,CAACI,KAAV,CAAgBJ,KAAK,CAACI,KAAN,CAAYC,qBAA5B,EAAmD,oCAAnD,CAAN;AACD;;AACDF,EAAAA,OAAO,GAAGG,4BAA4B,CAACJ,QAAD,EAAWC,OAAX,CAAtC;AACA,MAAII,MAAM,GAAG,IAAIT,KAAJ,CAAUK,OAAV,CAAb;AACAI,EAAAA,MAAM,CAACC,IAAP,GAAc,iBAAd;AACAD,EAAAA,MAAM,CAACE,UAAP,GAAoBP,QAAQ,CAACO,UAA7B;AACAF,EAAAA,MAAM,CAACG,iBAAP,GAA2BR,QAAQ,CAACQ,iBAApC;AAEA,SAAOH,MAAM,CAACI,GAAP,CAAW,sCAAX,EAAmDC,IAAnD,CAAwDC,IAAI,IAAI;AACrE,QAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAe,KAAKZ,QAAQ,CAACa,EAAzC,EAA6C;AAC3C;AACD;;AACD,UAAM,IAAIf,KAAK,CAACI,KAAV,CAAgBJ,KAAK,CAACI,KAAN,CAAYY,gBAA5B,EAA8C,wCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,SAASb,4BAAT,CAAsCJ,QAAtC,EAAgDC,OAAhD,EAAyD;AACvD,MAAIiB,KAAK,CAACC,OAAN,CAAclB,OAAd,CAAJ,EAA4B;AAC1B,UAAMmB,YAAY,GAAGpB,QAAQ,CAACoB,YAA9B;;AACA,QAAI,CAACA,YAAL,EAAmB;AACjB,YAAM,IAAItB,KAAK,CAACI,KAAV,CAAgBJ,KAAK,CAACI,KAAN,CAAYY,gBAA5B,EAA8C,wCAA9C,CAAN;AACD;;AACDb,IAAAA,OAAO,GAAGA,OAAO,CAACoB,MAAR,CAAeC,MAAM,IAAI;AACjC,aAAOA,MAAM,CAACF,YAAP,IAAuBA,YAA9B;AACD,KAFS,CAAV;;AAIA,QAAInB,OAAO,CAACsB,MAAR,IAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIzB,KAAK,CAACI,KAAV,CAAgBJ,KAAK,CAACI,KAAN,CAAYY,gBAA5B,EAA8C,wCAA9C,CAAN;AACD;;AACDb,IAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACD;;AACD,SAAOA,OAAP;AACD;;AAEDuB,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,aADe;AAEfhB,EAAAA,gBAFe;AAGfK,EAAAA;AAHe,CAAjB","sourcesContent":["// Helper functions for accessing the twitter API.\nvar OAuth = require('./OAuth1Client');\nvar Parse = require('parse/node').Parse;\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  if (!options) {\n    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Twitter auth configuration missing');\n  }\n  options = handleMultipleConfigurations(authData, options);\n  var client = new OAuth(options);\n  client.host = 'api.twitter.com';\n  client.auth_token = authData.auth_token;\n  client.auth_token_secret = authData.auth_token_secret;\n\n  return client.get('/1.1/account/verify_credentials.json').then(data => {\n    if (data && data.id_str == '' + authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Twitter auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nfunction handleMultipleConfigurations(authData, options) {\n  if (Array.isArray(options)) {\n    const consumer_key = authData.consumer_key;\n    if (!consumer_key) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Twitter auth is invalid for this user.');\n    }\n    options = options.filter(option => {\n      return option.consumer_key == consumer_key;\n    });\n\n    if (options.length == 0) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Twitter auth is invalid for this user.');\n    }\n    options = options[0];\n  }\n  return options;\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n  handleMultipleConfigurations,\n};\n"],"file":"twitter.js"}